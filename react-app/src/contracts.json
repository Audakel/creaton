{
  "network": "goerli",
  "CreatonAdmin": {
    "address": "0xee73d6e78dEcDE9b8d2fBD478eCF44127F17Ad74",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "host",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "cfa",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "acceptedToken",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_treasury",
            "type": "address"
          },
          {
            "internalType": "int96",
            "name": "_treasury_fee",
            "type": "int96"
          },
          {
            "internalType": "address",
            "name": "_creatorBeacon",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_nftFactory",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_trustedForwarder",
            "type": "address"
          },
          {
            "internalType": "address payable",
            "name": "_paymaster",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "creator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "creatorContract",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "description",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "subscriptionPrice",
            "type": "uint256"
          }
        ],
        "name": "CreatorDeployed",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "NewSubscriber",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "jsonData",
            "type": "string"
          }
        ],
        "name": "ProfileUpdate",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "contract2creator",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "creator2contract",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "creatorBeacon",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "description",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "subscriptionPrice",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "nftName",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "nftSymbol",
            "type": "string"
          }
        ],
        "name": "deployCreator",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "forwarder",
            "type": "address"
          }
        ],
        "name": "isTrustedForwarder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "nftFactory",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "paymaster",
        "outputs": [
          {
            "internalType": "address payable",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "registered_users",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "twitter",
            "type": "string"
          }
        ],
        "name": "signUp",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "treasury",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "treasury_fee",
        "outputs": [
          {
            "internalType": "int96",
            "name": "",
            "type": "int96"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "trustedForwarder",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "dataJSON",
            "type": "string"
          }
        ],
        "name": "updateProfile",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "user2twitter",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "versionRecipient",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "transactionHash": "0x3df1bfc6a05c1eb837a4ccb08bbb50a5cb5b343c97609a1f3be058dd2df3f60b",
    "receipt": {
      "to": null,
      "from": "0xC7AF24dc120b0a74b73E360378867d0c9541094c",
      "contractAddress": "0xee73d6e78dEcDE9b8d2fBD478eCF44127F17Ad74",
      "transactionIndex": 12,
      "gasUsed": "1555035",
      "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "blockHash": "0x36f319e23cf70f6a15dd94c415b736723ec5ec31c8e471412dc6597ec889d0fc",
      "transactionHash": "0x3df1bfc6a05c1eb837a4ccb08bbb50a5cb5b343c97609a1f3be058dd2df3f60b",
      "logs": [],
      "blockNumber": 4710274,
      "cumulativeGasUsed": "2397505",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0x22ff293e14F1EC3A09B137e9e06084AFd63adDF9",
      "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8",
      "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a",
      "0x34d30c6386BD5552F60290290de41584e2A0E005",
      90,
      "0x760411553BE9e79f0f9f2cc9f259593308ab4C9a",
      "0xa6ec73b02E8cB93A31E36AEDab6F0F495C7704C6",
      "0xd9c1a99e9263B98F3f633a9f1A201FA0AFC2A1c2",
      "0xc94fB63908342C77a81e7bd008013a955dAD2825"
    ],
    "solcInputHash": "c2b08a7218906a5e77fffe56b1bdfb36",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cfa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"_treasury_fee\",\"type\":\"int96\"},{\"internalType\":\"address\",\"name\":\"_creatorBeacon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_paymaster\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionPrice\",\"type\":\"uint256\"}],\"name\":\"CreatorDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewSubscriber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"jsonData\",\"type\":\"string\"}],\"name\":\"ProfileUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contract2creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creator2contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"deployCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymaster\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered_users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury_fee\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dataJSON\",\"type\":\"string\"}],\"name\":\"updateProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user2twitter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/creaton/CreatonAdmin.sol\":\"CreatonAdmin\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0xc706395df88dc1d459f21e51c57ab8820af80d1e8c3c14933a651794d78a429f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _setBeacon(beacon, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_beacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).implementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(_implementation(), data, \\\"BeaconProxy: function call failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c0d4f7f413f8551a4c099f22f9221355f837a2ae60f4adc7c768b2f730f82f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x752ac2a89da774de5c98f8ca1adcad306ce00d0ebb547ad7be8ba7e95468aa73\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"src/creaton/CreatonAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\npragma abicoder v2;\\n\\n// import \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\nimport \\\"./CreatorProxy.sol\\\";\\nimport \\\"../metatx/CreatonPaymaster.sol\\\";\\n// TODO override _msgSender and _msgData from Context and BaseRelayRecipient\\n//import \\\"@openzeppelin/contracts/access/OwnableBaseRelayRecipient.sol\\\";\\nimport \\\"../dependency/gsn/contracts/BaseRelayRecipient.sol\\\";\\n\\ncontract CreatonAdmin is BaseRelayRecipient {\\n    \\n    // -----------------------------------------\\n    // Events\\n    // -----------------------------------------\\n\\n    event CreatorDeployed(address creator, address creatorContract, string description, uint256 subscriptionPrice);\\n    event NewSubscriber(address user, uint256 amount);\\n    event ProfileUpdate(address user, string jsonData);\\n\\n    // -----------------------------------------\\n    // Storage\\n    // -----------------------------------------\\n\\n    mapping(address => address[]) public creator2contract; \\n    mapping(address => address) public contract2creator;\\n    mapping(address => bool) public registered_users;\\n    mapping(address => string) public user2twitter;\\n\\n    address private _host;\\n    address private _cfa;\\n    address private _acceptedToken;\\n\\n    address public treasury;\\n    int96 public treasury_fee;\\n\\n\\n    address public creatorBeacon;\\n    address public nftFactory;\\n\\n    address payable public paymaster;\\n\\n\\n    // -----------------------------------------\\n    // Constructor\\n    // -----------------------------------------\\n\\n    constructor(\\n        address host,\\n        address cfa,\\n        address acceptedToken, // get these from superfluid contracts\\n        address _treasury,\\n        int96 _treasury_fee,\\n        address _creatorBeacon,\\n        address _nftFactory,\\n        address _trustedForwarder,\\n        address payable _paymaster\\n    ) {\\n        assert(host != address(0));\\n        assert(cfa != address(0));\\n        assert(acceptedToken != address(0));\\n\\n        _host = host;\\n        _cfa = cfa;\\n        _acceptedToken = acceptedToken;\\n\\n        treasury = _treasury;\\n        treasury_fee = _treasury_fee;\\n\\n        creatorBeacon = _creatorBeacon;\\n        nftFactory = _nftFactory;\\n\\n        trustedForwarder = _trustedForwarder;\\n        paymaster = _paymaster;\\n    }\\n\\n    // -----------------------------------------\\n    // Logic \\n    // -----------------------------------------\\n\\n    function deployCreator(string calldata description, uint256 subscriptionPrice,\\n        string memory nftName, string memory nftSymbol) external {\\n        require(registered_users[_msgSender()], \\\"You need to signup in Creaton before becoming a creator\\\");\\n        CreatorProxy creatorContract =\\n        new CreatorProxy(\\n            creatorBeacon,\\n            abi.encodeWithSignature(\\\"initialize(address,address,address,address,string,uint256,address,string,string)\\\",\\n            _host, _cfa, _acceptedToken, _msgSender(), description, subscriptionPrice, trustedForwarder, nftName, nftSymbol)\\n        );\\n\\n        address creatorContractAddr = address(creatorContract);\\n        require(creatorContractAddr != address(0));\\n\\n        contract2creator[creatorContractAddr] = _msgSender();\\n        creator2contract[_msgSender()].push(creatorContractAddr);\\n        CreatonPaymaster(paymaster).addCreatorContract(creatorContractAddr);\\n\\n        emit CreatorDeployed(_msgSender(), creatorContractAddr, description, subscriptionPrice);\\n    }\\n\\n    // TODO only be called from twitter contract\\n    function signUp (address user, string memory twitter) public {\\n        user2twitter[user] = twitter;\\n    }\\n\\n    function updateProfile(string memory dataJSON) external {\\n        registered_users[_msgSender()] = true;\\n        emit ProfileUpdate(_msgSender(), dataJSON);\\n    }\\n\\n    function versionRecipient() external view override  returns (string memory){\\n        return \\\"2.1.0\\\";\\n    }\\n\\n\\n//     function bytesToAddress(bytes memory bys) private pure returns (address addr) {\\n//         assembly {\\n//           addr := mload(add(bys,20))\\n//         }\\n//     }\\n\\n//     function forwardTx(address _target, bytes memory _data) public payable returns (bytes memory) {\\n//        require(contract2creator(_target) != address(0), \\\"Non-existent Creator Contract\\\");\\n//        (bool success, bytes memory res) = _target.call{value: msg.value}(abi.encodePacked(_data, _msgSender()));\\n//        require(success, \\\"TxForwarder#forwardTx:  CALL_FAILED\\\");\\n//        return res;\\n//     }\\n    \\n}\\n\",\"keccak256\":\"0xa8a0511444ec870c42b131518dc4265ee0bba90e61676138b11508d6a7726a53\",\"license\":\"MIT\"},\"src/creaton/CreatorProxy.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\ncontract CreatorProxy is BeaconProxy {\\n\\n    constructor (address beacon, bytes memory data) BeaconProxy(beacon, data){\\n\\n    }\\n}\\n\",\"keccak256\":\"0x5837e15dfe33057f08b4a703d9b1f6a91b8c43e2d7aef229c31b810cf85d8294\"},\"src/dependency/gsn/contracts/BasePaymaster.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/GsnTypes.sol\\\";\\nimport \\\"./interfaces/IPaymaster.sol\\\";\\nimport \\\"./interfaces/IRelayHub.sol\\\";\\nimport \\\"./utils/GsnEip712Library.sol\\\";\\nimport \\\"./forwarder/Forwarder.sol\\\";\\n\\n/**\\n * Abstract base class to be inherited by a concrete Paymaster\\n * A subclass must implement:\\n *  - preRelayedCall\\n *  - postRelayedCall\\n */\\nabstract contract BasePaymaster is IPaymaster, Ownable {\\n\\n    IRelayHub internal relayHub;\\n    IForwarder public override trustedForwarder;\\n\\n    function getHubAddr() public override view returns (address) {\\n        return address(relayHub);\\n    }\\n\\n    //overhead of forwarder verify+signature, plus hub overhead.\\n    uint256 constant public FORWARDER_HUB_OVERHEAD = 50000;\\n\\n    //These parameters are documented in IPaymaster.GasLimits\\n    uint256 constant public PRE_RELAYED_CALL_GAS_LIMIT = 100000;\\n    uint256 constant public POST_RELAYED_CALL_GAS_LIMIT = 110000;\\n    uint256 constant public PAYMASTER_ACCEPTANCE_BUDGET = PRE_RELAYED_CALL_GAS_LIMIT + FORWARDER_HUB_OVERHEAD;\\n\\n    function getGasLimits()\\n    public\\n    override\\n    virtual\\n    view\\n    returns (\\n        IPaymaster.GasLimits memory limits\\n    ) {\\n        return IPaymaster.GasLimits(\\n            PAYMASTER_ACCEPTANCE_BUDGET,\\n            PRE_RELAYED_CALL_GAS_LIMIT,\\n            POST_RELAYED_CALL_GAS_LIMIT\\n        );\\n    }\\n\\n    // this method must be called from preRelayedCall to validate that the forwarder\\n    // is approved by the paymaster as well as by the recipient contract.\\n    function _verifyForwarder(GsnTypes.RelayRequest calldata relayRequest)\\n    public\\n    view\\n    {\\n        require(address(trustedForwarder) == relayRequest.relayData.forwarder, \\\"Forwarder is not trusted\\\");\\n        GsnEip712Library.verifyForwarderTrusted(relayRequest);\\n    }\\n\\n    /*\\n     * modifier to be used by recipients as access control protection for preRelayedCall & postRelayedCall\\n     */\\n    modifier relayHubOnly() {\\n        require(msg.sender == getHubAddr(), \\\"Function can only be called by RelayHub\\\");\\n        _;\\n    }\\n\\n    function setRelayHub(IRelayHub hub) public onlyOwner {\\n        relayHub = hub;\\n    }\\n\\n    function setTrustedForwarder(IForwarder forwarder) public onlyOwner {\\n        trustedForwarder = forwarder;\\n    }\\n\\n    /// check current deposit on relay hub.\\n    function getRelayHubDeposit()\\n    public\\n    override\\n    view\\n    returns (uint) {\\n        return relayHub.balanceOf(address(this));\\n    }\\n\\n    // any money moved into the paymaster is transferred as a deposit.\\n    // This way, we don't need to understand the RelayHub API in order to replenish\\n    // the paymaster.\\n    receive() external virtual payable {\\n        require(address(relayHub) != address(0), \\\"relay hub address not set\\\");\\n        relayHub.depositFor{value:msg.value}(address(this));\\n    }\\n\\n    /// withdraw deposit from relayHub\\n    function withdrawRelayHubDepositTo(uint amount, address payable target) public onlyOwner {\\n        relayHub.withdraw(amount, target);\\n    }\\n}\\n\",\"keccak256\":\"0xf2d86f0ef53d74443679141c6063feb265c6ae88b1433b8dd93e1f4f97f00eb2\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n// solhint-disable no-inline-assembly\\npragma solidity 0.8.0;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address payable ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return payable(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal override virtual view returns (bytes memory ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // we copy the msg.data , except the last 20 bytes (and update the total length)\\n            assembly {\\n                let ptr := mload(0x40)\\n                // copy only size-20 bytes\\n                let size := sub(calldatasize(),20)\\n                // structure RLP data as <offset> <length> <bytes>\\n                mstore(ptr, 0x20)\\n                mstore(add(ptr,32), size)\\n                calldatacopy(add(ptr,64), 0, size)\\n                return(ptr, add(size,64))\\n            }\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf9c23638eb2c587f9adcab66a270efcdcc3da306b12399df484b7290ce6c7cd\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/forwarder/Forwarder.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwarder.sol\\\";\\n\\ncontract Forwarder is IForwarder {\\n    using ECDSA for bytes32;\\n\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data\\\";\\n\\n    string public constant EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    mapping(bytes32 => bool) public typeHashes;\\n    mapping(bytes32 => bool) public domains;\\n\\n    // Nonces of senders, used to prevent replay attacks\\n    mapping(address => uint256) private nonces;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function getNonce(address from)\\n    public view override\\n    returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    constructor() public {\\n\\n        string memory requestType = string(abi.encodePacked(\\\"ForwardRequest(\\\", GENERIC_PARAMS, \\\")\\\"));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function verify(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    external override view {\\n\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n    }\\n\\n    function execute(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig\\n    )\\n    external payable\\n    override\\n    returns (bool success, bytes memory ret) {\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n        _updateNonce(req);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(abi.encodePacked(req.data, req.from));\\n        if ( address(this).balance>0 ) {\\n            //can't fail: req.from signed (off-chain) the request, so it must be an EOA...\\n            payable(req.from).transfer(address(this).balance);\\n        }\\n        return (success,ret);\\n    }\\n\\n\\n    function _verifyNonce(ForwardRequest memory req) internal view {\\n        require(nonces[req.from] == req.nonce, \\\"nonce mismatch\\\");\\n    }\\n\\n    function _updateNonce(ForwardRequest memory req) internal {\\n        nonces[req.from]++;\\n    }\\n\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\\n\\n        for (uint i = 0; i < bytes(typeName).length; i++) {\\n            bytes1 c = bytes(typeName)[i];\\n            require(c != \\\"(\\\" && c != \\\")\\\", \\\"invalid typename\\\");\\n        }\\n\\n        string memory requestType = string(abi.encodePacked(typeName, \\\"(\\\", GENERIC_PARAMS, \\\",\\\", typeSuffix));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\\n        uint256 chainId;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly { chainId := chainid() }\\n\\n        bytes memory domainValue = abi.encode(\\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            address(this));\\n\\n        bytes32 domainHash = keccak256(domainValue);\\n\\n        domains[domainHash] = true;\\n        emit DomainRegistered(domainHash, domainValue);\\n    }\\n\\n    function registerRequestTypeInternal(string memory requestType) internal {\\n\\n        bytes32 requestTypehash = keccak256(bytes(requestType));\\n        typeHashes[requestTypehash] = true;\\n        emit RequestTypeRegistered(requestTypehash, requestType);\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n\\n    function _verifySig(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData,\\n        bytes memory sig)\\n    internal\\n    view\\n    {\\n        require(domains[domainSeparator], \\\"unregistered domain separator\\\");\\n        require(typeHashes[requestTypeHash], \\\"unregistered request typehash\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", domainSeparator,\\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\\n            ));\\n        require(digest.recover(sig) == req.from, \\\"signature mismatch\\\");\\n    }\\n\\n    function _getEncoded(\\n        ForwardRequest memory req,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData\\n    )\\n    public\\n    pure\\n    returns (\\n        bytes memory\\n    ) {\\n        return abi.encodePacked(\\n            requestTypeHash,\\n            abi.encode(\\n                req.from,\\n                req.to,\\n                req.value,\\n                req.gas,\\n                req.nonce,\\n                keccak256(req.data)\\n            ),\\n            suffixData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xff43678c67e4b9bc36b36a824725ee0d4249cf5d0a6a75c468cef63504d906ae\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IForwarder {\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * verify the transaction would execute.\\n     * validate the signature and the nonce of the request.\\n     * revert if either signature or nonce are incorrect.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * execute a transaction\\n     * @param forwardRequest - all transaction parameters\\n     * @param domainSeparator - domain used when signing this request\\n     * @param requestTypeHash - request type used when signing this request.\\n     * @param suffixData - the extension data used when signing this request.\\n     * @param signature - signature to validate.\\n     *\\n     * the transaction is verified, and then executed.\\n     * the success and ret of \\\"call\\\" are returned.\\n     * This method would revert only verification errors. target errors\\n     * are reported using the returned \\\"success\\\" and ret string\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * Register a new Request typehash.\\n     * @param typeName - the name of the request type.\\n     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)\\n     *        if it does contain a value, then a comma is added first.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * Register a new domain separator.\\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\\n     * This method is given the domain name and version to create and register the domain separator value.\\n     * @param name the domain's display name\\n     * @param version the domain/protocol version\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\\n\",\"keccak256\":\"0x79c00fa172e65230e836f7e9f6eb976033b9c1f464d7a907aa5d45207537fd9f\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/GsnTypes.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\ninterface GsnTypes {\\n    struct RelayData {\\n        uint256 gasPrice;\\n        uint256 pctRelayFee;\\n        uint256 baseRelayFee;\\n        address relayWorker;\\n        address paymaster;\\n        bytes paymasterData;\\n        uint256 clientId;\\n        address forwarder;\\n    }\\n\\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\\n    struct RelayRequest {\\n        IForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\\n\",\"keccak256\":\"0xeac05d78049d3238dd20025f843c1aa79f344aed0ff2cf3dea27bc410981b4f5\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GsnTypes.sol\\\";\\n\\ninterface IPaymaster {\\n\\n    /**\\n     * @param acceptanceBudget -\\n     *      Paymaster expected gas budget to accept (or reject) a request\\n     *      This a gas required by any calculations that might need to reject the\\n     *      transaction, by preRelayedCall, forwarder and recipient.\\n     *      See value in BasePaymaster.PAYMASTER_ACCEPTANCE_BUDGET\\n     *      Transaction that gets rejected above that gas usage is on the paymaster's expense.\\n     *      As long this value is above preRelayedCallGasLimit (see defaults in BasePaymaster), the\\n     *      Paymaster is guaranteed it will never pay for rejected transactions.\\n     *      If this value is below preRelayedCallGasLimt, it might might make Paymaster open to a \\\"griefing\\\" attack.\\n     *\\n     *      Specifying value too high might make the call rejected by some relayers.\\n     *\\n     *      From a Relay's point of view, this is the highest gas value a paymaster might \\\"grief\\\" the relay,\\n     *      since the paymaster will pay anything above that (regardless if the tx reverts)\\n     *\\n     * @param preRelayedCallGasLimit - the max gas usage of preRelayedCall. any revert (including OOG)\\n     *      of preRelayedCall is a reject by the paymaster.\\n     *      as long as acceptanceBudget is above preRelayedCallGasLimit, any such revert (including OOG)\\n     *      is not payed by the paymaster.\\n     * @param postRelayedCallGasLimit - the max gas usage of postRelayedCall.\\n     *      note that an OOG will revert the transaction, but the paymaster already committed to pay,\\n     *      so the relay will get compensated, at the expense of the paymaster\\n     */\\n    struct GasLimits {\\n        uint256 acceptanceBudget;\\n        uint256 preRelayedCallGasLimit;\\n        uint256 postRelayedCallGasLimit;\\n    }\\n\\n    /**\\n     * Return the GasLimits constants used by the Paymaster.\\n     */\\n    function getGasLimits()\\n    external\\n    view\\n    returns (\\n        GasLimits memory limits\\n    );\\n\\n    function trustedForwarder() external view returns (IForwarder);\\n\\n/**\\n * return the relayHub of this contract.\\n */\\n    function getHubAddr() external view returns (address);\\n\\n    /**\\n     * Can be used to determine if the contract can pay for incoming calls before making any.\\n     * @return the paymaster's deposit in the RelayHub.\\n     */\\n    function getRelayHubDeposit() external view returns (uint256);\\n\\n    /**\\n     * Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call.\\n     *\\n     * MUST be protected with relayHubOnly() in case it modifies state.\\n     *\\n     * The Paymaster rejects by the following \\\"revert\\\" operations\\n     *  - preRelayedCall() method reverts\\n     *  - the forwarder reverts because of nonce or signature error\\n     *  - the paymaster returned \\\"rejectOnRecipientRevert\\\", and the recipient contract reverted.\\n     * In any of the above cases, all paymaster calls (and recipient call) are reverted.\\n     * In any other case, the paymaster agrees to pay for the gas cost of the transaction (note\\n     *  that this includes also postRelayedCall revert)\\n     *\\n     * The rejectOnRecipientRevert flag means the Paymaster \\\"delegate\\\" the rejection to the recipient\\n     *  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,\\n     *  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,\\n     *  otherwise the TX is paid by the Paymaster.\\n     *\\n     *  @param relayRequest - the full relay request structure\\n     *  @param signature - user's EIP712-compatible signature of the {@link relayRequest}.\\n     *              Note that in most cases the paymaster shouldn't try use it at all. It is always checked\\n     *              by the forwarder immediately after preRelayedCall returns.\\n     *  @param approvalData - extra dapp-specific data (e.g. signature from trusted party)\\n     *  @param maxPossibleGas - based on values returned from {@link getGasLimits},\\n     *         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.\\n     *         In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"\\n     *  return:\\n     *      a context to be passed to postRelayedCall\\n     *      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.\\n     *          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.\\n     *          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).\\n     */\\n    function preRelayedCall(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    )\\n    external\\n    returns (bytes memory context, bool rejectOnRecipientRevert);\\n\\n    /**\\n     * This method is called after the actual relayed function call.\\n     * It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call.\\n     *\\n     * MUST be protected with relayHubOnly() in case it modifies state.\\n     *\\n     * @param context - the call context, as returned by the preRelayedCall\\n     * @param success - true if the relayed call succeeded, false if it reverted\\n     * @param gasUseWithoutPost - the actual amount of gas used by the entire transaction, EXCEPT\\n     *        the gas used by the postRelayedCall itself.\\n     * @param relayData - the relay params of the request. can be used by relayHub.calculateCharge()\\n     *\\n     * Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster\\n     * is still committed to pay the relay for the entire transaction.\\n     */\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        GsnTypes.RelayData calldata relayData\\n    ) external;\\n\\n    function versionPaymaster() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x29f01fad832cb05fb5c72141b86d77b47fd46bf70082af25dfbf1c0896fd5c11\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IRelayHub.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GsnTypes.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\n\\ninterface IRelayHub {\\n\\n    /// Emitted when a relay server registers or updates its details\\n    /// Looking at these events lets a client discover relay servers\\n    event RelayServerRegistered(\\n        address indexed relayManager,\\n        uint256 baseRelayFee,\\n        uint256 pctRelayFee,\\n        string relayUrl);\\n\\n    /// Emitted when relays are added by a relayManager\\n    event RelayWorkersAdded(\\n        address indexed relayManager,\\n        address[] newRelayWorkers,\\n        uint256 workersCount\\n    );\\n\\n    // Emitted when an account withdraws funds from RelayHub.\\n    event Withdrawn(\\n        address indexed account,\\n        address indexed dest,\\n        uint256 amount\\n    );\\n\\n    // Emitted when depositFor is called, including the amount and account that was funded.\\n    event Deposited(\\n        address indexed paymaster,\\n        address indexed from,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when an attempt to relay a call fails and Paymaster does not accept the transaction.\\n    /// The actual relayed call was not executed, and the recipient not charged.\\n    /// @param reason contains a revert reason returned from preRelayedCall or forwarder.\\n    event TransactionRejectedByPaymaster(\\n        address indexed relayManager,\\n        address indexed paymaster,\\n        address indexed from,\\n        address to,\\n        address relayWorker,\\n        bytes4 selector,\\n        uint256 innerGasUsed,\\n        bytes reason);\\n\\n    // Emitted when a transaction is relayed. Note that the actual encoded function might be reverted: this will be\\n    // indicated in the status field.\\n    // Useful when monitoring a relay's operation and relayed calls to a contract.\\n    // Charge is the ether value deducted from the recipient's balance, paid to the relay's manager.\\n    event TransactionRelayed(\\n        address indexed relayManager,\\n        address indexed relayWorker,\\n        address indexed from,\\n        address to,\\n        address paymaster,\\n        bytes4 selector,\\n        RelayCallStatus status,\\n        uint256 charge);\\n\\n    event TransactionResult(\\n        RelayCallStatus status,\\n        bytes returnValue\\n    );\\n\\n    /// Reason error codes for the TransactionRelayed event\\n    /// @param OK - the transaction was successfully relayed and execution successful - never included in the event\\n    /// @param RelayedCallFailed - the transaction was relayed, but the relayed call failed\\n    /// @param RejectedByPreRelayed - the transaction was not relayed due to preRelatedCall reverting\\n    /// @param RejectedByForwarder - the transaction was not relayed due to forwarder check (signature,nonce)\\n    /// @param PostRelayedFailed - the transaction was relayed and reverted due to postRelatedCall reverting\\n    /// @param PaymasterBalanceChanged - the transaction was relayed and reverted due to the paymaster balance change\\n    enum RelayCallStatus {\\n        OK,\\n        RelayedCallFailed,\\n        RejectedByPreRelayed,\\n        RejectedByForwarder,\\n        RejectedByRecipientRevert,\\n        PostRelayedFailed,\\n        PaymasterBalanceChanged\\n    }\\n\\n    /// Add new worker addresses controlled by sender who must be a staked Relay Manager address.\\n    /// Emits a RelayWorkersAdded event.\\n    /// This function can be called multiple times, emitting new events\\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\\n\\n    function registerRelayServer(uint256 baseRelayFee, uint256 pctRelayFee, string calldata url) external;\\n\\n    // Balance management\\n\\n    // Deposits ether for a contract, so that it can receive (and pay for) relayed transactions. Unused balance can only\\n    // be withdrawn by the contract itself, by calling withdraw.\\n    // Emits a Deposited event.\\n    function depositFor(address target) external payable;\\n\\n    // Withdraws from an account's balance, sending it back to it. Relay managers call this to retrieve their revenue, and\\n    // contracts can also use it to reduce their funding.\\n    // Emits a Withdrawn event.\\n    function withdraw(uint256 amount, address payable dest) external;\\n\\n    // Relaying\\n\\n\\n    /// Relays a transaction. For this to succeed, multiple conditions must be met:\\n    ///  - Paymaster's \\\"acceptRelayCall\\\" method must succeed and not revert\\n    ///  - the sender must be a registered Relay Worker that the user signed\\n    ///  - the transaction's gas price must be equal or larger than the one that was signed by the sender\\n    ///  - the transaction must have enough gas to run all internal transactions if they use all gas available to them\\n    ///  - the Paymaster must have enough balance to pay the Relay Worker for the scenario when all gas is spent\\n    ///\\n    /// If all conditions are met, the call will be relayed and the recipient charged.\\n    ///\\n    /// Arguments:\\n    /// @param relayRequest - all details of the requested relayed call\\n    /// @param signature - client's EIP-712 signature over the relayRequest struct\\n    /// @param approvalData: dapp-specific data forwarded to preRelayedCall.\\n    ///        This value is *not* verified by the Hub. For example, it can be used to pass a signature to the Paymaster\\n    /// @param externalGasLimit - the value passed as gasLimit to the transaction.\\n    ///\\n    /// Emits a TransactionRelayed event.\\n    function relayCall(\\n        uint paymasterMaxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint externalGasLimit\\n    )\\n    external\\n    returns (bool paymasterAccepted, bytes memory returnValue);\\n\\n    function penalize(address relayWorker, address payable beneficiary) external;\\n\\n    /// The fee is expressed as a base fee in wei plus percentage on actual charge.\\n    /// E.g. a value of 40 stands for a 40% fee, so the recipient will be\\n    /// charged for 1.4 times the spent amount.\\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\\n\\n    /* getters */\\n\\n    /// Returns the stake manager of this RelayHub.\\n    function stakeManager() external view returns(IStakeManager);\\n    function penalizer() external view returns(address);\\n\\n    /// Returns an account's deposits. It can be either a deposit of a paymaster, or a revenue of a relay manager.\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    // Minimum stake a relay can have. An attack to the network will never cost less than half this value.\\n    function minimumStake() external view returns (uint256);\\n\\n    // Minimum unstake delay blocks of a relay manager's stake on the StakeManager\\n    function minimumUnstakeDelay() external view returns (uint256);\\n\\n    // Maximum funds that can be deposited at once. Prevents user error by disallowing large deposits.\\n    function maximumRecipientDeposit() external view returns (uint256);\\n\\n    //gas overhead to calculate gasUseWithoutPost\\n    function postOverhead() external view returns (uint256);\\n\\n    // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\\n    function gasReserve() external view returns (uint256);\\n\\n    // maximum number of worker account allowed per manager\\n    function maxWorkerCount() external view returns (uint256);\\n\\n    function workerToManager(address worker) external view returns(address);\\n\\n    function workerCount(address manager) external view returns(uint256);\\n\\n    function isRelayManagerStaked(address relayManager) external view returns(bool);\\n\\n    /**\\n    * @dev the total gas overhead of relayCall(), before the first gasleft() and after the last gasleft().\\n    * Assume that relay has non-zero balance (costs 15'000 more otherwise).\\n    */\\n\\n    // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\\n    function gasOverhead() external view returns (uint256);\\n\\n    function versionHub() external view returns (string memory);\\n}\\n\\n\",\"keccak256\":\"0xecde689e0b6e313670d3e3ef181981b5aaae85d6c24ae26481a819cc27639d4d\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0xba3e7ee1cdc9567795ea096fad1e464dd16612c638744fb8b0ca1f8aa9ad7e27\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IStakeManager {\\n\\n    /// Emitted when a stake or unstakeDelay are initialized or increased\\n    event StakeAdded(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 stake,\\n        uint256 unstakeDelay\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 withdrawBlock\\n    );\\n\\n    /// Emitted when owner withdraws relayManager funds\\n    event StakeWithdrawn(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when an authorized Relay Hub penalizes a relayManager\\n    event StakePenalized(\\n        address indexed relayManager,\\n        address indexed beneficiary,\\n        uint256 reward\\n    );\\n\\n    event HubAuthorized(\\n        address indexed relayManager,\\n        address indexed relayHub\\n    );\\n\\n    event HubUnauthorized(\\n        address indexed relayManager,\\n        address indexed relayHub,\\n        uint256 removalBlock\\n    );\\n\\n    /// @param stake - amount of ether staked for this relay\\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\\n    /// @param withdrawBlock - first block number 'withdraw' will be callable, or zero if the unlock has not been called\\n    /// @param owner - address that receives revenue and manages relayManager's stake\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelay;\\n        uint256 withdrawBlock;\\n        address payable owner;\\n    }\\n\\n    struct RelayHubInfo {\\n        uint256 removalBlock;\\n    }\\n\\n    /// Put a stake for a relayManager and set its unstake delay.\\n    /// If the entry does not exist, it is created, and the caller of this function becomes its owner.\\n    /// If the entry already exists, only the owner can call this function.\\n    /// @param relayManager - address that represents a stake entry and controls relay registrations on relay hubs\\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\\n    function stakeForAddress(address relayManager, uint256 unstakeDelay) external payable;\\n\\n    function unlockStake(address relayManager) external;\\n\\n    function withdrawStake(address relayManager) external;\\n\\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    function authorizeHubByManager(address relayHub) external;\\n\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    function unauthorizeHubByManager(address relayHub) external;\\n\\n    function isRelayManagerStaked(address relayManager, address relayHub, uint256 minAmount, uint256 minUnstakeDelay)\\n    external\\n    view\\n    returns (bool);\\n\\n    /// Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns half of stake on the way.\\n    /// @param relayManager - entry to penalize\\n    /// @param beneficiary - address that receives half of the penalty amount\\n    /// @param amount - amount to withdraw from stake\\n    function penalizeRelayManager(address relayManager, address payable beneficiary, uint256 amount) external;\\n\\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo);\\n\\n    function versionSM() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8f3475fc1af48468ffa443e2e008f01687437c59668c9b5dbfbf1bfe54510d9\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/GsnEip712Library.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/GsnTypes.sol\\\";\\nimport \\\"../interfaces/IRelayRecipient.sol\\\";\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\nimport \\\"./GsnUtils.sol\\\";\\n\\n/**\\n * Bridge Library to map GSN RelayRequest into a call of a Forwarder\\n */\\nlibrary GsnEip712Library {\\n    // maximum length of return value/revert reason for 'execute' method. Will truncate result if exceeded.\\n    uint256 private constant MAX_RETURN_SIZE = 1024;\\n\\n    //copied from Forwarder (can't reference string constants even from another library)\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data\\\";\\n\\n    bytes public constant RELAYDATA_TYPE = \\\"RelayData(uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\\\";\\n\\n    string public constant RELAY_REQUEST_NAME = \\\"RelayRequest\\\";\\n    string public constant RELAY_REQUEST_SUFFIX = string(abi.encodePacked(\\\"RelayData relayData)\\\", RELAYDATA_TYPE));\\n\\n    bytes public constant RELAY_REQUEST_TYPE = abi.encodePacked(\\n        RELAY_REQUEST_NAME,\\\"(\\\",GENERIC_PARAMS,\\\",\\\", RELAY_REQUEST_SUFFIX);\\n\\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(RELAYDATA_TYPE);\\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(RELAY_REQUEST_TYPE);\\n\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n    function splitRequest(\\n        GsnTypes.RelayRequest calldata req\\n    )\\n    internal\\n    pure\\n    returns (\\n        IForwarder.ForwardRequest memory forwardRequest,\\n        bytes memory suffixData\\n    ) {\\n        forwardRequest = IForwarder.ForwardRequest(\\n            req.request.from,\\n            req.request.to,\\n            req.request.value,\\n            req.request.gas,\\n            req.request.nonce,\\n            req.request.data\\n        );\\n        suffixData = abi.encode(\\n            hashRelayData(req.relayData));\\n    }\\n\\n    //verify that the recipient trusts the given forwarder\\n    // MUST be called by paymaster\\n    function verifyForwarderTrusted(GsnTypes.RelayRequest calldata relayRequest) internal view {\\n        (bool success, bytes memory ret) = relayRequest.request.to.staticcall(\\n            abi.encodeWithSelector(\\n                IRelayRecipient.isTrustedForwarder.selector, relayRequest.relayData.forwarder\\n            )\\n        );\\n        require(success, \\\"isTrustedForwarder reverted\\\");\\n        require(ret.length == 32, \\\"isTrustedForwarder returned invalid response\\\");\\n        require(abi.decode(ret, (bool)), \\\"invalid forwarder for recipient\\\");\\n    }\\n\\n    function verifySignature(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\\n        (IForwarder.ForwardRequest memory forwardRequest, bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\\n        IForwarder forwarder = IForwarder(payable(relayRequest.relayData.forwarder));\\n        forwarder.verify(forwardRequest, domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature);\\n    }\\n\\n    function verify(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\\n        verifyForwarderTrusted(relayRequest);\\n        verifySignature(relayRequest, signature);\\n    }\\n\\n    function execute(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal returns (bool forwarderSuccess, bool callSuccess, bytes memory ret) {\\n        (IForwarder.ForwardRequest memory forwardRequest, bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\\n        /* solhint-disable-next-line avoid-low-level-calls */\\n        (forwarderSuccess, ret) = relayRequest.relayData.forwarder.call(\\n            abi.encodeWithSelector(IForwarder.execute.selector,\\n            forwardRequest, domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature\\n        ));\\n        if ( forwarderSuccess ) {\\n\\n          //decode return value of execute:\\n          (callSuccess, ret) = abi.decode(ret, (bool, bytes));\\n        }\\n        truncateInPlace(ret);\\n    }\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data) internal pure {\\n        MinLibBytes.truncateInPlace(data, MAX_RETURN_SIZE);\\n    }\\n\\n    function domainSeparator(address forwarder) internal view returns (bytes32) {\\n        return hashDomain(EIP712Domain({\\n            name : \\\"GSN Relayed Transaction\\\",\\n            version : \\\"2\\\",\\n            chainId : getChainID(),\\n            verifyingContract : forwarder\\n            }));\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function hashDomain(EIP712Domain memory req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                EIP712DOMAIN_TYPEHASH,\\n                keccak256(bytes(req.name)),\\n                keccak256(bytes(req.version)),\\n                req.chainId,\\n                req.verifyingContract));\\n    }\\n\\n    function hashRelayData(GsnTypes.RelayData calldata req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                RELAYDATA_TYPEHASH,\\n                req.gasPrice,\\n                req.pctRelayFee,\\n                req.baseRelayFee,\\n                req.relayWorker,\\n                req.paymaster,\\n                req.forwarder,\\n                keccak256(req.paymasterData),\\n                req.clientId\\n            ));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xa1db7951f8b4eb65773301b556b7c92b01a42ca79f2048673a8fd144dcbf54c6\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/GsnUtils.sol\":{\"content\":\"/* solhint-disable no-inline-assembly */\\n// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../utils/MinLibBytes.sol\\\";\\n\\nlibrary GsnUtils {\\n\\n    /**\\n     * extract method sig from encoded function call\\n     */\\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\\n        return MinLibBytes.readBytes4(msgData, 0);\\n    }\\n\\n    /**\\n     * extract parameter from encoded-function block.\\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\\n     * the return value should be casted to the right type (uintXXX/bytesXXX/address/bool/enum)\\n     */\\n    function getParam(bytes memory msgData, uint index) internal pure returns (uint) {\\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\\n    }\\n\\n    //re-throw revert with the same revert data.\\n    function revertWithData(bytes memory data) internal pure {\\n        assembly {\\n            revert(add(data,32), mload(data))\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfce546e18c85ff3e7f0c2f01b14f0c3e846239ce1038ea130c037bb6e8b543ce\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/MinLibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// minimal bytes manipulation required by GSN\\n// a minimal subset from 0x/LibBytes\\n/* solhint-disable no-inline-assembly */\\npragma solidity 0.8.0;\\n\\nlibrary MinLibBytes {\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\\n        if (data.length > maxlen) {\\n            assembly { mstore(data, maxlen) }\\n        }\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        require (b.length >= index + 20, \\\"readAddress: data too short\\\");\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        require(b.length >= index + 32, \\\"readBytes32: data too short\\\" );\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        require(b.length >= index + 4, \\\"readBytes4: data too short\\\");\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x74f6a37844ff7aca8002f3e38a5dd7a1c79784c5e51980fd8df373fd82f241fa\",\"license\":\"MIT\"},\"src/metatx/CreatonPaymaster.sol\":{\"content\":\"pragma solidity 0.8.0;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\nimport \\\"../dependency/gsn/contracts/forwarder/IForwarder.sol\\\";\\nimport \\\"../dependency/gsn/contracts/BasePaymaster.sol\\\";\\n\\ncontract CreatonPaymaster is BasePaymaster {\\n\\n    address public creatonAdmin;\\n    address public token;\\n    address public stakingContract;\\n\\tmapping(address=>bool) public targets ;   // The target contracts we are willing to pay for\\n\\n    function addCreatorContract(address creatorContract) public onlyAdmin {\\n        targets[creatorContract] = true;\\n    }\\n\\n    function addContract(address _contract) public onlyOwner {\\n        targets[_contract] = true;\\n    }\\n\\n    function setAdmin(address _admin) public onlyOwner {\\n        creatonAdmin = _admin;\\n        targets[creatonAdmin] = true;\\n    }\\n\\n    constructor (\\n        address _token,\\n        address _stakingContract\\n    ) public  {\\n        token = _token;\\n        stakingContract = _stakingContract;\\n    }\\n\\n\\tfunction preRelayedCall(\\n\\t\\tGsnTypes.RelayRequest calldata relayRequest,\\n\\t\\tbytes calldata signature,\\n\\t\\tbytes calldata approvalData,\\n\\t\\tuint256 maxPossibleGas\\n\\t) external override virtual\\n\\treturns (bytes memory context, bool) {\\n\\t\\t_verifyForwarder(relayRequest);\\n\\t\\t(signature, approvalData, maxPossibleGas);\\n\\n        if (relayRequest.request.to == token){\\n            bytes4 sig = abi.decode(relayRequest.request.data[:4], (bytes4));\\n            require( sig == bytes4(keccak256(\\\"send(address,uint256,bytes)\\\")));\\n            address recipient;\\n            (recipient, ,) = abi.decode(msg.data[4:], (address,uint256,bytes));\\n            require(recipient == stakingContract, \\\"Creaton Paymaster: Only free staking is supported\\\");\\n            return (new bytes(0), false);\\n        }\\n\\n\\t\\trequire(targets[relayRequest.request.to], \\\"Creaton Paymaster: Destination contract not supported\\\");\\n        return (new bytes(0), false);\\n\\t}\\n\\n\\tfunction postRelayedCall(\\n\\t\\tbytes calldata context,\\n\\t\\tbool success,\\n\\t\\tuint256 gasUseWithoutPost,\\n\\t\\tGsnTypes.RelayData calldata relayData\\n\\t) external override virtual {\\n        (context, success, gasUseWithoutPost, relayData);\\n\\t}\\n\\n    function versionPaymaster() external virtual view override returns (string memory) {\\n        return \\\"2.1.0\\\";\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == creatonAdmin, \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5c4c012682ac8dba4baa8e501fcbf5e209f30bf9d8295150929dd953122d5b62\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a2d38038062001a2d83398101604081905262000034916200014b565b6001600160a01b0389166200005957634e487b7160e01b600052600160045260246000fd5b6001600160a01b0388166200007e57634e487b7160e01b600052600160045260246000fd5b6001600160a01b038716620000a357634e487b7160e01b600052600160045260246000fd5b600580546001600160a01b03199081166001600160a01b039b8c1617909155600680548216998b1699909917909855600780548916978a1697909717909655600880548816958916959095178816600160a01b6001600160601b03600b96870b16021790945560098054871692881692909217909155600a8054861691871691909117905560008054851692861692909217909155805490921692169190911790556200023f565b60008060008060008060008060006101208a8c0312156200016a578485fd5b8951620001778162000226565b60208b01519099506200018a8162000226565b60408b01519098506200019d8162000226565b60608b0151909750620001b08162000226565b8096505060808a015180600b0b8114620001c8578586fd5b60a08b0151909550620001db8162000226565b60c08b0151909450620001ee8162000226565b60e08b0151909350620002018162000226565b6101008b0151909250620002158162000226565b809150509295985092959850929598565b6001600160a01b03811681146200023c57600080fd5b50565b6117de806200024f6000396000f3fe60806040523480156200001157600080fd5b50600436106200010b5760003560e01c8063770031ab11620000a5578063b531ff12116200006f578063b531ff121462000206578063b7b52873146200021d578063d619ba7d1462000234578063d63843cd146200024b576200010b565b8063770031ab14620001c25780637da0a87714620001d9578063996a81d614620001e35780639f26a9b414620001fc576200010b565b8063486ff0cd11620000e7578063486ff0cd1462000171578063572b6c05146200017b57806361d027b314620001a157806369d44ad014620001ab576200010b565b80629299e314620001105780630aeecac2146200012957806316e4cbf91462000158575b600080fd5b620001276200012136600462000aea565b62000255565b005b620001406200013a36600462000981565b620002f2565b6040516200014f919062000cbf565b60405180910390f35b6200016262000394565b6040516200014f919062000ba1565b62000140620003a3565b620001926200018c36600462000981565b620003db565b6040516200014f919062000ca6565b62000162620003f2565b62000162620001bc366004620009f7565b62000401565b62000192620001d336600462000981565b6200043a565b620001626200044f565b620001ed6200045e565b6040516200014f919062000cb1565b620001626200047f565b6200012762000217366004620009a5565b6200048e565b620001626200022e36600462000981565b620004be565b620001276200024536600462000a23565b620004d9565b62000162620007c7565b60016003600062000265620007d6565b6001600160a01b03168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790557f1546be3690ee6bd68fbc3f4935f658aa7339b7dde6c6683a03e94777c8f26433620002d6620007d6565b82604051620002e792919062000bf6565b60405180910390a150565b600460205260009081526040902080546200030d9062000d31565b80601f01602080910402602001604051908101604052809291908181526020018280546200033b9062000d31565b80156200038c5780601f1062000360576101008083540402835291602001916200038c565b820191906000526020600020905b8154815290600101906020018083116200036e57829003601f168201915b505050505081565b600b546001600160a01b031681565b60408051808201909152600581527f322e312e3000000000000000000000000000000000000000000000000000000060208201525b90565b6000546001600160a01b038281169116145b919050565b6008546001600160a01b031681565b600160205281600052604060002081815481106200041e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60036020526000908152604090205460ff1681565b6000546001600160a01b031681565b600854740100000000000000000000000000000000000000009004600b0b81565b6009546001600160a01b031681565b6001600160a01b03821660009081526004602090815260409091208251620004b9928401906200082c565b505050565b6002602052600090815260409020546001600160a01b031681565b60036000620004e7620007d6565b6001600160a01b0316815260208101919091526040016000205460ff1662000546576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200053d9062000cd4565b60405180910390fd5b6009546005546006546007546000936001600160a01b03908116938116928116911662000572620007d6565b600054604051620005a095949392918d918d918d916001600160a01b03909116908d908d9060240162000c1a565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fca518ab000000000000000000000000000000000000000000000000000000000179052516200060490620008bb565b6200061192919062000bf6565b604051809103906000f0801580156200062e573d6000803e3d6000fd5b509050806001600160a01b0381166200064657600080fd5b62000650620007d6565b6001600160a01b03828116600090815260026020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001693909216929092179055600190620006a4620007d6565b6001600160a01b03908116825260208083019390935260409182016000908120805460018101825590825293902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016848416179055600b5490517f3f218d8f000000000000000000000000000000000000000000000000000000008152911690633f218d8f906200074090849060040162000ba1565b600060405180830381600087803b1580156200075b57600080fd5b505af115801562000770573d6000803e3d6000fd5b505050507f215dcde4cec02030a2493197a3ae4996dccae3964f175ef907789b86b06abf7a6200079f620007d6565b82898989604051620007b695949392919062000bb5565b60405180910390a150505050505050565b600a546001600160a01b031681565b600060183610801590620007f05750620007f033620003db565b156200082457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c620003d8565b5033620003d8565b8280546200083a9062000d31565b90600052602060002090601f0160209004810192826200085e5760008555620008a9565b82601f106200087957805160ff1916838001178555620008a9565b82800160010185558215620008a9579182015b82811115620008a95782518255916020019190600101906200088c565b50620008b7929150620008c9565b5090565b6109f28062000db783390190565b5b80821115620008b75760008155600101620008ca565b80356001600160a01b0381168114620003ed57600080fd5b600082601f83011262000909578081fd5b813567ffffffffffffffff8082111562000927576200092762000d87565b6040516020601f19601f85011682010181811083821117156200094e576200094e62000d87565b60405282815284830160200186101562000966578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121562000993578081fd5b6200099e82620008e0565b9392505050565b60008060408385031215620009b8578081fd5b620009c383620008e0565b9150602083013567ffffffffffffffff811115620009df578182fd5b620009ed85828601620008f8565b9150509250929050565b6000806040838503121562000a0a578182fd5b62000a1583620008e0565b946020939093013593505050565b60008060008060006080868803121562000a3b578081fd5b853567ffffffffffffffff8082111562000a53578283fd5b818801915088601f83011262000a67578283fd5b81358181111562000a76578384fd5b89602082850101111562000a88578384fd5b6020928301975095509087013593506040870135908082111562000aaa578283fd5b62000ab889838a01620008f8565b9350606088013591508082111562000ace578283fd5b5062000add88828901620008f8565b9150509295509295909350565b60006020828403121562000afc578081fd5b813567ffffffffffffffff81111562000b13578182fd5b62000b2184828501620008f8565b949350505050565b60008151808452815b8181101562000b505760208185018101518683018201520162000b32565b8181111562000b625782602083870101525b50601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b60006001600160a01b0380881683528087166020840152506080604083015262000be460808301858762000b77565b90508260608301529695505050505050565b60006001600160a01b03841682526040602083015262000b21604083018462000b29565b60006101206001600160a01b03808e168452808d166020850152808c166040850152808b16606085015281608085015262000c598285018a8c62000b77565b91508760a085015280871660c08501525082810360e084015262000c7e818662000b29565b905082810361010084015262000c95818562000b29565b9d9c50505050505050505050505050565b901515815260200190565b600b9190910b815260200190565b6000602082526200099e602083018462000b29565b60208082526037908201527f596f75206e65656420746f207369676e757020696e2043726561746f6e20626560408201527f666f7265206265636f6d696e6720612063726561746f72000000000000000000606082015260800190565b60028104600182168062000d4657607f821691505b6020821081141562000d81577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620009f2380380620009f28339810160408190526200003491620003a8565b81816200006360017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51620005a7565b600080516020620009b1833981519152146200008f57634e487b7160e01b600052600160045260246000fd5b6200009b8282620000a5565b5050505062000610565b620000bb82620001e860201b620000311760201c565b620000e35760405162461bcd60e51b8152600401620000da90620004bf565b60405180910390fd5b6200016d826001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200012157600080fd5b505afa15801562000136573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015c91906200038b565b620001e860201b620000311760201c565b6200018c5760405162461bcd60e51b8152600401620000da906200054a565b600080516020620009b1833981519152828155815115620001e357620001e1620001b5620001f2565b83604051806060016040528060218152602001620009d1602191396200027760201b620000371760201c565b505b505050565b803b15155b919050565b6000620001fe62000321565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200023757600080fd5b505afa1580156200024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027291906200038b565b905090565b60606200028484620001e8565b620002a35760405162461bcd60e51b8152600401620000da9062000504565b600080856001600160a01b031685604051620002c091906200046c565b600060405180830381855af49150503d8060008114620002fd576040519150601f19603f3d011682016040523d82523d6000602084013e62000302565b606091505b5090925090506200031582828662000335565b925050505b9392505050565b600080516020620009b18339815191525490565b60608315620003465750816200031a565b825115620003575782518084602001fd5b8160405162461bcd60e51b8152600401620000da91906200048a565b80516001600160a01b0381168114620001ed57600080fd5b6000602082840312156200039d578081fd5b6200031a8262000373565b60008060408385031215620003bb578081fd5b620003c68362000373565b60208401519092506001600160401b0380821115620003e3578283fd5b818501915085601f830112620003f7578283fd5b8151818111156200040c576200040c620005fa565b604051601f8201601f191681016020018381118282101715620004335762000433620005fa565b6040528181528382016020018810156200044b578485fd5b6200045e826020830160208701620005cb565b809450505050509250929050565b6000825162000480818460208701620005cb565b9190910192915050565b6000602082528251806020840152620004ab816040850160208701620005cb565b601f01601f19169190910160400192915050565b60208082526025908201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6040820152641d1c9858dd60da1b606082015260800190565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60208082526034908201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960408201527f6f6e206973206e6f74206120636f6e7472616374000000000000000000000000606082015260800190565b600082821015620005c657634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015620005e8578181015183820152602001620005ce565b83811115620001e15750506000910152565b634e487b7160e01b600052604160045260246000fd5b61039180620006206000396000f3fe60806040523661001357610011610017565b005b6100115b61001f61002f565b61002f61002a610105565b610191565b565b3b151590565b606061004284610031565b610081576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610078906102ce565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516100a99190610261565b600060405180830381855af49150503d80600081146100e4576040519150601f19603f3d011682016040523d82523d6000602084013e6100e9565b606091505b50915091506100f98282866101b5565b925050505b9392505050565b600061010f610208565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561015457600080fd5b505afa158015610168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018c919061022d565b905090565b3660008037600080366000845af43d6000803e8080156101b0573d6000f35b3d6000fd5b606083156101c45750816100fe565b8251156101d45782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610078919061027d565b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b60006020828403121561023e578081fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146100fe578182fd5b6000825161027381846020870161032b565b9190910192915050565b600060208252825180602084015261029c81604085016020870161032b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60408201527f6e74726163740000000000000000000000000000000000000000000000000000606082015260800190565b60005b8381101561034657818101518382015260200161032e565b83811115610355576000848401525b5050505056fea2646970667358221220bbc178e10fa374d7cb435c6d51a8573cd31dc48dee41f8ea038230d2363e3ff464736f6c63430008000033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564a2646970667358221220ae23bb9b93bfe448ad68ca43efefb1bc3b9976e2382488af81d3ca0902d0f32a64736f6c63430008000033",
    "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200010b5760003560e01c8063770031ab11620000a5578063b531ff12116200006f578063b531ff121462000206578063b7b52873146200021d578063d619ba7d1462000234578063d63843cd146200024b576200010b565b8063770031ab14620001c25780637da0a87714620001d9578063996a81d614620001e35780639f26a9b414620001fc576200010b565b8063486ff0cd11620000e7578063486ff0cd1462000171578063572b6c05146200017b57806361d027b314620001a157806369d44ad014620001ab576200010b565b80629299e314620001105780630aeecac2146200012957806316e4cbf91462000158575b600080fd5b620001276200012136600462000aea565b62000255565b005b620001406200013a36600462000981565b620002f2565b6040516200014f919062000cbf565b60405180910390f35b6200016262000394565b6040516200014f919062000ba1565b62000140620003a3565b620001926200018c36600462000981565b620003db565b6040516200014f919062000ca6565b62000162620003f2565b62000162620001bc366004620009f7565b62000401565b62000192620001d336600462000981565b6200043a565b620001626200044f565b620001ed6200045e565b6040516200014f919062000cb1565b620001626200047f565b6200012762000217366004620009a5565b6200048e565b620001626200022e36600462000981565b620004be565b620001276200024536600462000a23565b620004d9565b62000162620007c7565b60016003600062000265620007d6565b6001600160a01b03168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790557f1546be3690ee6bd68fbc3f4935f658aa7339b7dde6c6683a03e94777c8f26433620002d6620007d6565b82604051620002e792919062000bf6565b60405180910390a150565b600460205260009081526040902080546200030d9062000d31565b80601f01602080910402602001604051908101604052809291908181526020018280546200033b9062000d31565b80156200038c5780601f1062000360576101008083540402835291602001916200038c565b820191906000526020600020905b8154815290600101906020018083116200036e57829003601f168201915b505050505081565b600b546001600160a01b031681565b60408051808201909152600581527f322e312e3000000000000000000000000000000000000000000000000000000060208201525b90565b6000546001600160a01b038281169116145b919050565b6008546001600160a01b031681565b600160205281600052604060002081815481106200041e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60036020526000908152604090205460ff1681565b6000546001600160a01b031681565b600854740100000000000000000000000000000000000000009004600b0b81565b6009546001600160a01b031681565b6001600160a01b03821660009081526004602090815260409091208251620004b9928401906200082c565b505050565b6002602052600090815260409020546001600160a01b031681565b60036000620004e7620007d6565b6001600160a01b0316815260208101919091526040016000205460ff1662000546576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200053d9062000cd4565b60405180910390fd5b6009546005546006546007546000936001600160a01b03908116938116928116911662000572620007d6565b600054604051620005a095949392918d918d918d916001600160a01b03909116908d908d9060240162000c1a565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fca518ab000000000000000000000000000000000000000000000000000000000179052516200060490620008bb565b6200061192919062000bf6565b604051809103906000f0801580156200062e573d6000803e3d6000fd5b509050806001600160a01b0381166200064657600080fd5b62000650620007d6565b6001600160a01b03828116600090815260026020526040812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001693909216929092179055600190620006a4620007d6565b6001600160a01b03908116825260208083019390935260409182016000908120805460018101825590825293902090920180547fffffffffffffffffffffffff000000000000000000000000000000000000000016848416179055600b5490517f3f218d8f000000000000000000000000000000000000000000000000000000008152911690633f218d8f906200074090849060040162000ba1565b600060405180830381600087803b1580156200075b57600080fd5b505af115801562000770573d6000803e3d6000fd5b505050507f215dcde4cec02030a2493197a3ae4996dccae3964f175ef907789b86b06abf7a6200079f620007d6565b82898989604051620007b695949392919062000bb5565b60405180910390a150505050505050565b600a546001600160a01b031681565b600060183610801590620007f05750620007f033620003db565b156200082457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c620003d8565b5033620003d8565b8280546200083a9062000d31565b90600052602060002090601f0160209004810192826200085e5760008555620008a9565b82601f106200087957805160ff1916838001178555620008a9565b82800160010185558215620008a9579182015b82811115620008a95782518255916020019190600101906200088c565b50620008b7929150620008c9565b5090565b6109f28062000db783390190565b5b80821115620008b75760008155600101620008ca565b80356001600160a01b0381168114620003ed57600080fd5b600082601f83011262000909578081fd5b813567ffffffffffffffff8082111562000927576200092762000d87565b6040516020601f19601f85011682010181811083821117156200094e576200094e62000d87565b60405282815284830160200186101562000966578384fd5b82602086016020830137918201602001929092529392505050565b60006020828403121562000993578081fd5b6200099e82620008e0565b9392505050565b60008060408385031215620009b8578081fd5b620009c383620008e0565b9150602083013567ffffffffffffffff811115620009df578182fd5b620009ed85828601620008f8565b9150509250929050565b6000806040838503121562000a0a578182fd5b62000a1583620008e0565b946020939093013593505050565b60008060008060006080868803121562000a3b578081fd5b853567ffffffffffffffff8082111562000a53578283fd5b818801915088601f83011262000a67578283fd5b81358181111562000a76578384fd5b89602082850101111562000a88578384fd5b6020928301975095509087013593506040870135908082111562000aaa578283fd5b62000ab889838a01620008f8565b9350606088013591508082111562000ace578283fd5b5062000add88828901620008f8565b9150509295509295909350565b60006020828403121562000afc578081fd5b813567ffffffffffffffff81111562000b13578182fd5b62000b2184828501620008f8565b949350505050565b60008151808452815b8181101562000b505760208185018101518683018201520162000b32565b8181111562000b625782602083870101525b50601f01601f19169290920160200192915050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b60006001600160a01b0380881683528087166020840152506080604083015262000be460808301858762000b77565b90508260608301529695505050505050565b60006001600160a01b03841682526040602083015262000b21604083018462000b29565b60006101206001600160a01b03808e168452808d166020850152808c166040850152808b16606085015281608085015262000c598285018a8c62000b77565b91508760a085015280871660c08501525082810360e084015262000c7e818662000b29565b905082810361010084015262000c95818562000b29565b9d9c50505050505050505050505050565b901515815260200190565b600b9190910b815260200190565b6000602082526200099e602083018462000b29565b60208082526037908201527f596f75206e65656420746f207369676e757020696e2043726561746f6e20626560408201527f666f7265206265636f6d696e6720612063726561746f72000000000000000000606082015260800190565b60028104600182168062000d4657607f821691505b6020821081141562000d81577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620009f2380380620009f28339810160408190526200003491620003a8565b81816200006360017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d51620005a7565b600080516020620009b1833981519152146200008f57634e487b7160e01b600052600160045260246000fd5b6200009b8282620000a5565b5050505062000610565b620000bb82620001e860201b620000311760201c565b620000e35760405162461bcd60e51b8152600401620000da90620004bf565b60405180910390fd5b6200016d826001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200012157600080fd5b505afa15801562000136573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015c91906200038b565b620001e860201b620000311760201c565b6200018c5760405162461bcd60e51b8152600401620000da906200054a565b600080516020620009b1833981519152828155815115620001e357620001e1620001b5620001f2565b83604051806060016040528060218152602001620009d1602191396200027760201b620000371760201c565b505b505050565b803b15155b919050565b6000620001fe62000321565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200023757600080fd5b505afa1580156200024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027291906200038b565b905090565b60606200028484620001e8565b620002a35760405162461bcd60e51b8152600401620000da9062000504565b600080856001600160a01b031685604051620002c091906200046c565b600060405180830381855af49150503d8060008114620002fd576040519150601f19603f3d011682016040523d82523d6000602084013e62000302565b606091505b5090925090506200031582828662000335565b925050505b9392505050565b600080516020620009b18339815191525490565b60608315620003465750816200031a565b825115620003575782518084602001fd5b8160405162461bcd60e51b8152600401620000da91906200048a565b80516001600160a01b0381168114620001ed57600080fd5b6000602082840312156200039d578081fd5b6200031a8262000373565b60008060408385031215620003bb578081fd5b620003c68362000373565b60208401519092506001600160401b0380821115620003e3578283fd5b818501915085601f830112620003f7578283fd5b8151818111156200040c576200040c620005fa565b604051601f8201601f191681016020018381118282101715620004335762000433620005fa565b6040528181528382016020018810156200044b578485fd5b6200045e826020830160208701620005cb565b809450505050509250929050565b6000825162000480818460208701620005cb565b9190910192915050565b6000602082528251806020840152620004ab816040850160208701620005cb565b601f01601f19169190910160400192915050565b60208082526025908201527f426561636f6e50726f78793a20626561636f6e206973206e6f74206120636f6e6040820152641d1c9858dd60da1b606082015260800190565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60208082526034908201527f426561636f6e50726f78793a20626561636f6e20696d706c656d656e7461746960408201527f6f6e206973206e6f74206120636f6e7472616374000000000000000000000000606082015260800190565b600082821015620005c657634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015620005e8578181015183820152602001620005ce565b83811115620001e15750506000910152565b634e487b7160e01b600052604160045260246000fd5b61039180620006206000396000f3fe60806040523661001357610011610017565b005b6100115b61001f61002f565b61002f61002a610105565b610191565b565b3b151590565b606061004284610031565b610081576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610078906102ce565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516100a99190610261565b600060405180830381855af49150503d80600081146100e4576040519150601f19603f3d011682016040523d82523d6000602084013e6100e9565b606091505b50915091506100f98282866101b5565b925050505b9392505050565b600061010f610208565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561015457600080fd5b505afa158015610168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018c919061022d565b905090565b3660008037600080366000845af43d6000803e8080156101b0573d6000f35b3d6000fd5b606083156101c45750816100fe565b8251156101d45782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610078919061027d565b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505490565b60006020828403121561023e578081fd5b815173ffffffffffffffffffffffffffffffffffffffff811681146100fe578182fd5b6000825161027381846020870161032b565b9190910192915050565b600060208252825180602084015261029c81604085016020870161032b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60408201527f6e74726163740000000000000000000000000000000000000000000000000000606082015260800190565b60005b8381101561034657818101518382015260200161032e565b83811115610355576000848401525b5050505056fea2646970667358221220bbc178e10fa374d7cb435c6d51a8573cd31dc48dee41f8ea038230d2363e3ff464736f6c63430008000033a3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50426561636f6e50726f78793a2066756e6374696f6e2063616c6c206661696c6564a2646970667358221220ae23bb9b93bfe448ad68ca43efefb1bc3b9976e2382488af81d3ca0902d0f32a64736f6c63430008000033",
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "isTrustedForwarder(address)": {
          "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
        }
      },
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 9669,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "trustedForwarder",
          "offset": 0,
          "slot": "0",
          "type": "t_address"
        },
        {
          "astId": 7332,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "creator2contract",
          "offset": 0,
          "slot": "1",
          "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
        },
        {
          "astId": 7336,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "contract2creator",
          "offset": 0,
          "slot": "2",
          "type": "t_mapping(t_address,t_address)"
        },
        {
          "astId": 7340,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "registered_users",
          "offset": 0,
          "slot": "3",
          "type": "t_mapping(t_address,t_bool)"
        },
        {
          "astId": 7344,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "user2twitter",
          "offset": 0,
          "slot": "4",
          "type": "t_mapping(t_address,t_string_storage)"
        },
        {
          "astId": 7346,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "_host",
          "offset": 0,
          "slot": "5",
          "type": "t_address"
        },
        {
          "astId": 7348,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "_cfa",
          "offset": 0,
          "slot": "6",
          "type": "t_address"
        },
        {
          "astId": 7350,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "_acceptedToken",
          "offset": 0,
          "slot": "7",
          "type": "t_address"
        },
        {
          "astId": 7352,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "treasury",
          "offset": 0,
          "slot": "8",
          "type": "t_address"
        },
        {
          "astId": 7354,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "treasury_fee",
          "offset": 20,
          "slot": "8",
          "type": "t_int96"
        },
        {
          "astId": 7356,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "creatorBeacon",
          "offset": 0,
          "slot": "9",
          "type": "t_address"
        },
        {
          "astId": 7358,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "nftFactory",
          "offset": 0,
          "slot": "10",
          "type": "t_address"
        },
        {
          "astId": 7360,
          "contract": "src/creaton/CreatonAdmin.sol:CreatonAdmin",
          "label": "paymaster",
          "offset": 0,
          "slot": "11",
          "type": "t_address_payable"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_address_payable": {
          "encoding": "inplace",
          "label": "address payable",
          "numberOfBytes": "20"
        },
        "t_array(t_address)dyn_storage": {
          "base": "t_address",
          "encoding": "dynamic_array",
          "label": "address[]",
          "numberOfBytes": "32"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_int96": {
          "encoding": "inplace",
          "label": "int96",
          "numberOfBytes": "12"
        },
        "t_mapping(t_address,t_address)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => address)",
          "numberOfBytes": "32",
          "value": "t_address"
        },
        "t_mapping(t_address,t_array(t_address)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => address[])",
          "numberOfBytes": "32",
          "value": "t_array(t_address)dyn_storage"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_string_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => string)",
          "numberOfBytes": "32",
          "value": "t_string_storage"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        }
      }
    }
  },
  "Creator": {
    "address": "0xBc1A02071dCc82c3EF5b573B59F1f46B0E5Bf3A3",
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "enum CreatorV1.Approval",
            "name": "approval",
            "type": "uint8"
          }
        ],
        "name": "Like",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "jsonData",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "enum CreatorV1.Type",
            "name": "contentType",
            "type": "uint8"
          }
        ],
        "name": "NewPost",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "nftContract",
            "type": "address"
          }
        ],
        "name": "PostContract",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "pubKey",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "enum CreatorV1.Status",
            "name": "status",
            "type": "uint8"
          }
        ],
        "name": "SubscriberEvent",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_address",
            "type": "address"
          }
        ],
        "name": "acceptSubscribe",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "admin",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISuperToken",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "agreementClass",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "agreementId",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "cbdata",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "ctx",
            "type": "bytes"
          }
        ],
        "name": "afterAgreementCreated",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "newCtx",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISuperToken",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "cbdata",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "ctx",
            "type": "bytes"
          }
        ],
        "name": "afterAgreementTerminated",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "newCtx",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISuperToken",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "agreementClass",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "agreementId",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "cbdata",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "ctx",
            "type": "bytes"
          }
        ],
        "name": "afterAgreementUpdated",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "newCtx",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISuperToken",
            "name": "superToken",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "agreementClass",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "ctx",
            "type": "bytes"
          }
        ],
        "name": "beforeAgreementCreated",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "cbdata",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISuperToken",
            "name": "superToken",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "agreementClass",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "name": "beforeAgreementTerminated",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "cbdata",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract ISuperToken",
            "name": "superToken",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "agreementClass",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "agreementId",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "name": "beforeAgreementUpdated",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "cbdata",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_address",
            "type": "address"
          }
        ],
        "name": "blockSubscription",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "_addresses",
            "type": "address[]"
          }
        ],
        "name": "bulkAcceptSubscribe",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "_addresses",
            "type": "address[]"
          }
        ],
        "name": "bulkBlockSubscription",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "creator",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "description",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getSubscriberCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "host",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "cfa",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "acceptedToken",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_creator",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "_description",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "_subscriptionPrice",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_trustedForwarder",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "nftName",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "nftSymbol",
            "type": "string"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "forwarder",
            "type": "address"
          }
        ],
        "name": "isTrustedForwarder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "approvalEnum",
            "type": "uint256"
          }
        ],
        "name": "like",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "int96",
            "name": "num",
            "type": "int96"
          },
          {
            "internalType": "int96",
            "name": "percent",
            "type": "int96"
          }
        ],
        "name": "percentage",
        "outputs": [
          {
            "internalType": "int96",
            "name": "",
            "type": "int96"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "postNFT",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_pubKey",
            "type": "string"
          }
        ],
        "name": "requestSubscribe",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "revokeSubscribe",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "subscribers",
        "outputs": [
          {
            "internalType": "enum CreatorV1.Status",
            "name": "status",
            "type": "uint8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "subscriptionPrice",
        "outputs": [
          {
            "internalType": "int96",
            "name": "",
            "type": "int96"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "trustedForwarder",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_metadataURI",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_dataJSON",
            "type": "string"
          },
          {
            "internalType": "enum CreatorV1.Type",
            "name": "contentType",
            "type": "uint8"
          }
        ],
        "name": "upload",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "versionRecipient",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawEth",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "transactionHash": "0xfae07b2b321e5effa7011524b0898a4cb464c25442831bcdb412a318d4b36f13",
    "receipt": {
      "to": null,
      "from": "0xC7AF24dc120b0a74b73E360378867d0c9541094c",
      "contractAddress": "0xBc1A02071dCc82c3EF5b573B59F1f46B0E5Bf3A3",
      "transactionIndex": 8,
      "gasUsed": "3781324",
      "logsBloom": "0x
      "blockHash": "0x7a7a2b05a7585df337c25e0d4e509813dec992b3325f5d315b7e28f7002f5254",
      "transactionHash": "0xfae07b2b321e5effa7011524b0898a4cb464c25442831bcdb412a318d4b36f13",
      "logs": [],
      "blockNumber": 4710271,
      "cumulativeGasUsed": "4327271",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "solcInputHash": "c2b08a7218906a5e77fffe56b1bdfb36",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CreatorV1.Approval\",\"name\":\"approval\",\"type\":\"uint8\"}],\"name\":\"Like\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"jsonData\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum CreatorV1.Type\",\"name\":\"contentType\",\"type\":\"uint8\"}],\"name\":\"NewPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"PostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum CreatorV1.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"SubscriberEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"acceptSubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blockSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"bulkAcceptSubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"bulkBlockSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cfa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalEnum\",\"type\":\"uint256\"}],\"name\":\"like\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int96\",\"name\":\"num\",\"type\":\"int96\"},{\"internalType\":\"int96\",\"name\":\"percent\",\"type\":\"int96\"}],\"name\":\"percentage\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"\",\"type\":\"int96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pubKey\",\"type\":\"string\"}],\"name\":\"requestSubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeSubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribers\",\"outputs\":[{\"internalType\":\"enum CreatorV1.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPrice\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dataJSON\",\"type\":\"string\"},{\"internalType\":\"enum CreatorV1.Type\",\"name\":\"contentType\",\"type\":\"uint8\"}],\"name\":\"upload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/creaton/CreatorV1.sol\":\"CreatorV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x897b526c3c1b6196d7c2202b3dbb04b77513a40633c6083a00e8c11402011710\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x0d616363c1a1e6f9f489303f94df0cbe606826ab4944d315c3801a07f9b8d4ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0xc706395df88dc1d459f21e51c57ab8820af80d1e8c3c14933a651794d78a429f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy {\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 private constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _setBeacon(beacon, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address beacon) {\\n        bytes32 slot = _BEACON_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            beacon := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_beacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        require(\\n            Address.isContract(beacon),\\n            \\\"BeaconProxy: beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(beacon).implementation()),\\n            \\\"BeaconProxy: beacon implementation is not a contract\\\"\\n        );\\n        bytes32 slot = _BEACON_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, beacon)\\n        }\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(_implementation(), data, \\\"BeaconProxy: function call failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c0d4f7f413f8551a4c099f22f9221355f837a2ae60f4adc7c768b2f730f82f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9abb3184c06afb50807598533c4c0943dd864080d310ac28cbb5b2cfae6a18b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa13cd62eaa1b09d931a025eed11b553303a4a0866b10318224ebf4dc45e7c490\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd03f5c3d258a9b0f751a3246e0802106585561ab5909b808368759364fc786f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x180af7df8832ffcba53dae0c5450b062d2c571a8eaec22619fcaef5758503d7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x752ac2a89da774de5c98f8ca1adcad306ce00d0ebb547ad7be8ba7e95468aa73\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1\",\"license\":\"MIT\"},\"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport {\\n    ISuperfluid,\\n    ISuperToken,\\n    ISuperApp,\\n    SuperAppDefinitions\\n} from \\\"../interfaces/superfluid/ISuperfluid.sol\\\";\\n\\nabstract contract SuperAppBase is ISuperApp {\\n\\n    function beforeAgreementCreated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback - Before Agreement Created\\\");\\n    }\\n\\n    function afterAgreementCreated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Created\\\");\\n    }\\n\\n    function beforeAgreementUpdated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback - Before Agreement updated\\\");\\n    }\\n\\n    function afterAgreementUpdated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Updated\\\");\\n    }\\n\\n    function beforeAgreementTerminated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bytes memory /*cbdata*/)\\n    {\\n        revert(\\\"Unsupported callback -  Before Agreement Terminated\\\");\\n    }\\n\\n    function afterAgreementTerminated(\\n        ISuperToken /*superToken*/,\\n        address /*agreementClass*/,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*cbdata*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory /*newCtx*/)\\n    {\\n        revert(\\\"Unsupported callback - After Agreement Terminated\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0x76db1497b95aa8af5c6b6d64222c5894c6f5e5662844b7287f0134cbbd0bb5c5\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"../superfluid/ISuperAgreement.sol\\\";\\nimport { ISuperfluidToken } from \\\"../superfluid/ISuperfluidToken.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's constant flow agreement interface\\n *\\n * @author Superfluid\\n */\\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\\n\\n    /// @dev ISuperAgreement.agreementType implementation\\n    function agreementType() external override pure returns (bytes32) {\\n        return keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    /**\\n     * @dev Get the maximum flow rate allowed with the deposit\\n     * @param deposit Deposit amount used for creating the flow\\n     */\\n    function getMaximumFlowRateFromDeposit(\\n        ISuperfluidToken token,\\n        uint256 deposit)\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Get the deposit required for creating the flow\\n     * @param flowRate Flow rate to be tested\\n     */\\n    function getDepositRequiredForFlowRate(\\n        ISuperfluidToken token,\\n        int96 flowRate)\\n        external view virtual\\n        returns (uint256 deposit);\\n\\n    /**\\n     * @dev Create a flow betwen sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementCreated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - A deposit is taken as safety margin for the solvency agents.\\n     * - A extra gas fee may be taken to pay for solvency agent liquidations.\\n     */\\n    function createFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n    /**\\n     * @dev Update the flow rate between sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementUpdated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Only the flow sender may update the flow rate.\\n     * - Even if the flow rate is zero, the flow is not deleted\\n     * from the system.\\n     * - Deposit amount will be adjusted accordingly.\\n     * - No new gas fee is charged.\\n     */\\n    function updateFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n\\n    /**\\n     * @dev Get the flow data between `sender` and `receiver`.\\n     * @param token Super token address.\\n     * @param sender Flow receiver.\\n     * @param receiver Flow sender.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get flow data using agreement ID\\n     * @param token Super token address.\\n     * @param agreementId The agreement ID.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlowByID(\\n       ISuperfluidToken token,\\n       bytes32 agreementId\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get the aggregated flow info of the account\\n     * @param token Super token address.\\n    * @param account Account for the query.\\n    */\\n    function getAccountFlowInfo(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @dev Get the net flow rate of the account\\n     * @param token Super token address.\\n     * @param account Account for the query.\\n     * @return flowRate Flow rate.\\n     */\\n    function getNetFlow(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Delete the flow between sender and receiver\\n     * @param token Super token address.\\n     * @param ctx Context bytes.\\n     * @param receiver Flow receiver address.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementTerminated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Both flow sender and receiver may delete the flow.\\n     * - If Sender account is insolvent or in critical state, a solvency agent may\\n     *   also terminate the agreement.\\n     * - Gas fee may be returned to the sender.\\n     */\\n    function deleteFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n     /**\\n      * @dev Flow updated event.\\n      * @param token Super token address.\\n      * @param sender Flow sender address.\\n      * @param receiver Flow recipient address.\\n      * @param flowRate Flow rate in amount per second for this flow.\\n      * @param flowRate Total flow rate in amount per second for the sender.\\n      * @param flowRate Total flow rate in amount per second for the receiver.\\n      * @param userData The user provided data.\\n      */\\n     event FlowUpdated(\\n         ISuperfluidToken indexed token,\\n         address indexed sender,\\n         address indexed receiver,\\n         int96 flowRate,\\n         int256 totalSenderFlowRate,\\n         int256 totalReceiverFlowRate,\\n         bytes userData\\n     );\\n\\n}\\n\",\"keccak256\":\"0xc47783262893c4600d412987ea47558b3b79336407462e6dff2117c04304177f\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\n/**\\n * @dev Super app definitions library\\n */\\nlibrary SuperAppDefinitions {\\n\\n    /**************************************************************************\\n    / App manifest config word\\n    /**************************************************************************/\\n\\n    /*\\n     * App level is a way to allow the app to whitelist what other app it can\\n     * interact with (aka. composite app feature).\\n     *\\n     * For more details, refer to the technical paper of superfluid protocol.\\n     */\\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\\n\\n    // The app is at the final level, hence it doesn't want to interact with any other app\\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\\n\\n    // The app is at the second level, it may interact with other final level apps if whitelisted\\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\\n\\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\\n        return uint8(configWord & APP_LEVEL_MASK);\\n    }\\n\\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\\n    }\\n\\n    /**************************************************************************\\n    / Callback implementation bit masks\\n    /**************************************************************************/\\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\\n\\n    /**************************************************************************\\n    / App Jail Reasons\\n    /**************************************************************************/\\n\\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\\n}\\n\\n/**\\n * @dev Context definitions library\\n */\\nlibrary ContextDefinitions {\\n\\n    /**************************************************************************\\n    / Call info\\n    /**************************************************************************/\\n\\n    // app level\\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\\n\\n    // call type\\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\\n\\n    function decodeCallInfo(uint256 callInfo)\\n        internal pure\\n        returns (uint8 appLevel, uint8 callType)\\n    {\\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\\n        internal pure\\n        returns (uint256 callInfo)\\n    {\\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n}\\n\\n/**\\n * @dev Batch operation library\\n */\\nlibrary BatchOperation {\\n    /**\\n     * @dev ERC20.approve batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationApprove(\\n     *     abi.decode(data, (address spender, uint256 amount))\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\\n    /**\\n     * @dev ERC20.transferFrom batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationTransferFrom(\\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\\n    /**\\n     * @dev SuperToken.upgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationUpgrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\\n    /**\\n     * @dev SuperToken.downgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationDowngrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\\n    /**\\n     * @dev ERC20 Approve batch operation type\\n     *\\n     * Call spec:\\n     * callAgreement(\\n     *     ISuperAgreement(target)),\\n     *     abi.decode(data, (bytes calldata, bytes userdata)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\\n    /**\\n     * @dev ERC20 Approve batch operation type\\n     *\\n     * Call spec:\\n     * callAppAction(\\n     *     ISuperApp(target)),\\n     *     data\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\\n}\\n\\nlibrary SuperfluidGovernanceConfigs {\\n\\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.rewardAddress\\\");\\n\\n    bytes32 constant internal CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\\\");\\n\\n    bytes32 constant internal BICONOMY_FORWARDER_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.biconomyForwarderAddress\\\");\\n\\n}\\n\",\"keccak256\":\"0x9064326a1d8b682294b48a11589525ffa2c33dd99389db0cc900d688b112795a\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\n\\n/**\\n * @title Superfluid's agreement interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperAgreement {\\n\\n    /**\\n     * @dev Initialize the agreement contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the type of the agreement class.\\n     */\\n    function agreementType() external view returns (bytes32);\\n\\n    /**\\n     * @dev Calculate the real-time balance for the account of this agreement class.\\n     * @param account Account the state belongs to\\n     * @param time Future time used for the calculation.\\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement.\\n     * @return deposit Account deposit amount of this agreement.\\n     * @return owedDeposit Account owed deposit amount of this agreement.\\n     */\\n    function realtimeBalanceOf(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 time\\n    )\\n        external\\n        view\\n        returns (\\n            int256 dynamicBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n}\\n\",\"keccak256\":\"0xcf8a33fadd5db47562156a11098623246efd1b46a2c3d28269767bcbb324fd66\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's app interface.\\n *\\n * NOTE:\\n * - Be fearful of the app jail, when the word permitted is used.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperApp {\\n\\n    /**\\n     * @dev Callback before a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n     * @dev Callback after a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param cbdata The data returned from the before-hook callback.\\n     * @param ctx The context data.\\n     * @return newCtx The current context of the transaction.\\n     *\\n     * NOTE:\\n     * - State changes is permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function afterAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n     * @dev Callback before a new agreement is updated.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n\\n    /**\\n    * @dev Callback after a new agreement is updated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Only revert with a \\\"reason\\\" is permitted.\\n    */\\n    function afterAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n    * @dev Callback before a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param ctx The context data.\\n    * @return cbdata A free format in memory data the app can use to pass\\n    *          arbitary information to the after-hook callback.\\n    *\\n    * NOTE:\\n    * - It will be invoked with `staticcall`, no state changes are permitted.\\n    * - Revert is not permitted.\\n    */\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n    * @dev Callback after a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Revert is not permitted.\\n    */\\n    function afterAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n}\\n\",\"keccak256\":\"0xca93702505ec3c8244227e372687d9bdbc9d368fa07723d310ab9550501abb2a\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\\n\\n    /// @dev Initialize the contract\\n    function initialize(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        string calldata n,\\n        string calldata s\\n    ) external;\\n\\n    /**************************************************************************\\n    * TokenInfo & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: SuperToken always uses 18 decimals.\\n     *\\n     * Note: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override(TokenInfo) returns (uint8);\\n\\n    /**************************************************************************\\n    * ERC20 & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\\n\\n    /**************************************************************************\\n    * ERC20\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**************************************************************************\\n    * ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For super token contracts, this value is 1 always\\n     */\\n    function granularity() external view override(IERC777) returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**************************************************************************\\n     * SuperToken custom token functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Mint new tokens for the account\\n     *\\n     * Modifiers:\\n     *  - onlySelf\\n     */\\n    function selfMint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData\\n    ) external;\\n\\n   /**\\n    * @dev Burn existing tokens for the account\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfBurn(\\n       address account,\\n       uint256 amount,\\n       bytes memory userData\\n   ) external;\\n\\n    /**************************************************************************\\n     * SuperToken extra functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\\n     */\\n    function transferAll(address recipient) external;\\n\\n    /**************************************************************************\\n     * ERC20 wrapping\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Return the underlaying token contract\\n     * @return tokenAddr Underlying token address\\n     */\\n    function getUnderlyingToken() external view returns(address tokenAddr);\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken.\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\\n     * @param to The account to received upgraded tokens\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     * @param data User data for the TokensRecipient callback\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Token upgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens upgraded (in 18 decimals)\\n     */\\n    event TokenUpgraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Downgrade SuperToken to ERC20.\\n     * @dev It will call transfer to send tokens\\n     * @param amount Number of tokens to be downgraded\\n     */\\n    function downgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Token downgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens downgraded\\n     */\\n    event TokenDowngraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**************************************************************************\\n    * Batch Operations\\n    *************************************************************************/\\n\\n    /**\\n    * @dev Perform ERC20 approve by host contract.\\n    * @param account The account owner to be approved.\\n    * @param spender The spender of account owner's funds.\\n    * @param amount Number of tokens to be approved.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationApprove(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Perform ERC20 transfer from by host contract.\\n    * @param account The account to spend sender's funds.\\n    * @param spender  The account where the funds is sent from.\\n    * @param recipient The recipient of thefunds.\\n    * @param amount Number of tokens to be transferred.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationTransferFrom(\\n        address account,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Upgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationUpgrade(address account, uint256 amount) external;\\n\\n    /**\\n    * @dev Downgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationDowngrade(address account, uint256 amount) external;\\n\\n\\n    /**************************************************************************\\n    * Function modifiers for access control and parameter validations\\n    *\\n    * While they cannot be explicitly stated in function definitions, they are\\n    * listed in function definition comments instead for clarity.\\n    *\\n    * NOTE: solidity-coverage not supporting it\\n    *************************************************************************/\\n\\n    /// @dev The msg.sender must be the contract itself\\n    //modifier onlySelf() virtual\\n\\n}\\n\",\"keccak256\":\"0x8dfd34270438c845f9c03f72a575e5bf2c9e2011b2d0f8ac20f3fdea711b51ca\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\nimport {\\n    IERC20,\\n    ERC20WithTokenInfo\\n} from \\\"../tokens/ERC20WithTokenInfo.sol\\\";\\n\\n\\ninterface ISuperTokenFactory {\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /// @dev Initialize the contract\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the current super token logic used by the factory\\n     */\\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Upgradability modes\\n     */\\n    enum Upgradability {\\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\\n        NON_UPGRADABLE,\\n        /// Upgradable through `host.updateSuperTokenLogic` operation\\n        SEMI_UPGRADABLE,\\n        /// Always using the latest super token logic\\n        FULL_UPGRADABE\\n    }\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param underlyingDecimals Underlying token decimals\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     */\\n    function createERC20Wrapper(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external;\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     *\\n     * NOTE:\\n     * - It assumes token provide the .decimals() function\\n     */\\n    function createERC20Wrapper(\\n        ERC20WithTokenInfo underlyingToken,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external;\\n\\n    function initializeCustomSuperToken(\\n        address customSuperTokenProxy\\n    )\\n        external;\\n\\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\\n\\n    event SuperTokenCreated(ISuperToken indexed token);\\n\\n}\\n\",\"keccak256\":\"0x98ec18cb1785aed6fe64aa5641036c2f5a3047c16e3b50cd48c0b7d6771432e1\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n// This is required by the batchCall and decodeCtx\\npragma experimental ABIEncoderV2;\\n\\nimport { ISuperfluidGovernance } from \\\"./ISuperfluidGovernance.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperTokenFactory } from \\\"./ISuperTokenFactory.sol\\\";\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperApp } from \\\"./ISuperApp.sol\\\";\\nimport {\\n    SuperAppDefinitions,\\n    ContextDefinitions,\\n    BatchOperation,\\n    SuperfluidGovernanceConfigs\\n} from \\\"./Definitions.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid host interface.\\n\\n * It is the central contract of the system where super agreement, super app\\n * and super token features are connected together.\\n *\\n * The superfluid host contract is also the entry point for the protocol users,\\n * where batch call and meta transaction are provided for UX improvements.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluid {\\n\\n    /**************************************************************************\\n     * Governance\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get the current governace of the Superfluid host\\n     */\\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\\n\\n    /**\\n     * @dev Replace the current governance with a new one\\n     */\\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\\n\\n    /**************************************************************************\\n     * Agreement Whitelisting\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Register a new agreement class to the system\\n     * @param agreementClassLogic INitial agreement class code\\n     *\\n     * Modifiers:\\n     *  - onlyGovernance\\n     */\\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    /**\\n    * @dev Update code of an agreement class\\n    * @param agreementClassLogic New code for the agreement class\\n    *\\n    * Modifiers:\\n    *  - onlyGovernance\\n    */\\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\\n\\n    /**\\n    * @dev Get agreement class\\n    */\\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\\n\\n    /**\\n    * @dev Map list of the agreement classes using a bitmap\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function mapAgreementClasses(uint256 bitmap)\\n        external view\\n        returns (ISuperAgreement[] memory agreementClasses);\\n\\n    /**\\n    * @dev Create a new bitmask by adding a agreement class to it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**\\n    * @dev Create a new bitmask by removing a agreement class from it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**************************************************************************\\n    * Super Token Factory\\n    **************************************************************************/\\n\\n    /**\\n     * @dev Get the super token factory\\n     * @return factory The factory\\n     */\\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\\n\\n    /**\\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\\n     * @return logic The factory logic\\n     */\\n    function getSuperTokenFactoryLogic() external view returns (address logic);\\n\\n    /**\\n     * @dev Update super token factory\\n     * @param newFactory New factory logic\\n     */\\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\\n\\n    /**\\n     * @dev Update the super token logic to the latest\\n     *\\n     * NOTE:\\n     * - Refer toISuperTokenFactory.Upgradability for expected behaviours.\\n     */\\n    function updateSuperTokenLogic(ISuperToken token) external;\\n\\n    /**************************************************************************\\n     * App Registry\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Message sender declares it as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     */\\n    function registerApp(uint256 configWord) external;\\n\\n    /**\\n     * @dev Query if the app is registered\\n     * @param app Super app address\\n     */\\n    function isApp(ISuperApp app) external view returns(bool);\\n\\n    /**\\n     * @dev Query app level\\n     * @param app Super app address\\n     */\\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\\n\\n    /**\\n     * @dev Get the manifest of the super app\\n     * @param app Super app address\\n     */\\n    function getAppManifest(\\n        ISuperApp app\\n    )\\n        external view\\n        returns (\\n            bool isSuperApp,\\n            bool isJailed,\\n            uint256 noopMask\\n        );\\n\\n    /**\\n     * @dev Query if the app has been jailed\\n     * @param app Super app address\\n     */\\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\\n\\n    /**\\n     * @dev White-list the target app for app composition for the source app (msg.sender)\\n     * @param targetApp The taget super app address\\n     */\\n    function allowCompositeApp(ISuperApp targetApp) external;\\n\\n    /**\\n     * @dev Query if source app  is allowed to call the target app as downstream app.\\n     * @param app Super app address\\n     * @param targetApp The taget super app address\\n     */\\n    function isCompositeAppAllowed(\\n        ISuperApp app,\\n        ISuperApp targetApp\\n    )\\n        external view\\n        returns (bool isAppAllowed);\\n\\n    /**\\n     * @dev Jail event for the app\\n     */\\n    event Jail(ISuperApp indexed app, uint256 reason);\\n\\n    /**************************************************************************\\n     * Agreement Framework\\n     *\\n     * Agreements use these function to trigger super app callbacks, updates\\n     * app allowance and charge gas fees.\\n     *\\n     * These functions can only be called by registered agreements.\\n     *************************************************************************/\\n\\n    function callAppBeforeCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory cbdata);\\n\\n    function callAppAfterCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory appCtx);\\n\\n    function appCallbackPush(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 appAllowanceGranted,\\n        int256 appAllowanceUsed\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory appCtx);\\n\\n    function appCallbackPop(\\n        bytes calldata ctx,\\n        int256 allowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function ctxUseAllowance(\\n        bytes calldata ctx,\\n        uint256 allowanceWantedMore,\\n        int256 allowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function jailApp(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 reason\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    /**************************************************************************\\n     * Contextless Call Proxies\\n     *\\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\\n     * with agreements or apps.\\n     *\\n     * NOTE: The contextual call data should be generated using\\n     * abi.encodeWithSelector. The context parameter should be set to \\\"0x\\\",\\n     * an empty bytes array as a placeholder to be replaced by the host\\n     * contract.\\n     *************************************************************************/\\n\\n     /**\\n      * @dev Call agreement function\\n      * @param callData The contextual call data with placeholder ctx\\n      * @param userData Extra user data being sent to the super app callbacks\\n      */\\n     function callAgreement(\\n         ISuperAgreement agreementClass,\\n         bytes calldata callData,\\n         bytes calldata userData\\n     )\\n        external\\n        //cleanCtx\\n        returns(bytes memory returnedData);\\n\\n    /**\\n     * @dev Call app action\\n     * @param callData The contextual call data.\\n     *\\n     * NOTE: See callAgreement about contextual call data.\\n     */\\n    function callAppAction(\\n        ISuperApp app,\\n        bytes calldata callData\\n    )\\n        external\\n        //cleanCtx\\n        //isAppActive(app)\\n        returns(bytes memory returnedData);\\n\\n    /**************************************************************************\\n     * Contextual Call Proxies and Context Utilities\\n     *\\n     * For apps, they must use context they receive to interact with\\n     * agreements or apps.\\n     *\\n     * The context changes must be saved and returned by the apps in their\\n     * callbacks always, any modification to the context will be detected and\\n     * the violating app will be jailed.\\n     *************************************************************************/\\n\\n    /**\\n     * @dev ABIv2 Encoded memory data of context\\n     *\\n     * NOTE on backward compatibility:\\n     * - Non-dynamic fields are padded to 32bytes and packed\\n     * - Dynamic fields are referenced through a 32bytes offset to their \\\"parents\\\" field (or root)\\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\\n     *    - non-dynamic fields will be parsed at the same memory location,\\n     *    - and dynamic fields will simply have a greater offset than it was.\\n     */\\n    struct Context {\\n        //\\n        // Call context\\n        //\\n        // callback level\\n        uint8 appLevel;\\n        // type of call\\n        uint8 callType;\\n        // the system timestsamp\\n        uint256 timestamp;\\n        // The intended message sender for the call\\n        address msgSender;\\n\\n        //\\n        // Callback context\\n        //\\n        // For callbacks it is used to know which agreement function selector is called\\n        bytes4 agreementSelector;\\n        // User provided data for app callbacks\\n        bytes userData;\\n\\n        //\\n        // App context\\n        //\\n        // app allowance granted\\n        uint256 appAllowanceGranted;\\n        // app allowance wanted by the app callback\\n        uint256 appAllowanceWanted;\\n        // app allowance used, allowing negative values over a callback session\\n        int256 appAllowanceUsed;\\n    }\\n\\n    function callAgreementWithContext(\\n        ISuperAgreement agreementClass,\\n        bytes calldata callData,\\n        bytes calldata userData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // onlyAgreement(agreementClass)\\n        returns (bytes memory newCtx, bytes memory returnedData);\\n\\n    function callAppActionWithContext(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // isAppActive(app)\\n        returns (bytes memory newCtx);\\n\\n    function decodeCtx(bytes calldata ctx)\\n        external pure\\n        returns (Context memory context);\\n\\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\\n\\n    /**************************************************************************\\n    * Batch call\\n    **************************************************************************/\\n    /**\\n     * @dev Batch operation data\\n     */\\n    struct Operation {\\n        // Operation. Defined in BatchOperation (Definitions.sol)\\n        uint32 operationType;\\n        // Operation target\\n        address target;\\n        // Data specific to the operation\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Batch call function\\n     * @param operations Array of batch operations.\\n     */\\n    function batchCall(Operation[] memory operations) external;\\n\\n    /**\\n     * @dev Batch call function with biconomy forwarder\\n     * @param operations Array of batch operations.\\n     */\\n    function biconomyBatchCall(Operation[] memory operations) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * TODO: turning these off because solidity-coverage don't like it\\n     *************************************************************************/\\n\\n     /* /// @dev The current superfluid context is clean.\\n     modifier cleanCtx() virtual;\\n\\n     /// @dev The superfluid context is valid.\\n     modifier validCtx(bytes memory ctx) virtual;\\n\\n     /// @dev The agreement is a listed agreement.\\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\\n\\n     // onlyGovernance\\n\\n     /// @dev The msg.sender must be a listed agreement.\\n     modifier onlyAgreement() virtual;\\n\\n     /// @dev The app is registered and not jailed.\\n     modifier isAppActive(ISuperApp app) virtual; */\\n}\\n\",\"keccak256\":\"0xcd1a4ada488892fb2cde3a63bf798a57505519df1fdf0daf21a002bd5186a3d6\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperfluidToken  } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's Governance interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidGovernance {\\n\\n    /**\\n     * @dev Replace the current governance with a new governance\\n     */\\n    function replaceGovernance(\\n        ISuperfluid host,\\n        address newGov) external;\\n\\n    /**\\n     * @dev Register a new agreement class\\n     */\\n    function registerAgreementClass(\\n        ISuperfluid host,\\n        address agreementClass) external;\\n\\n    /**\\n     * @dev Update logics of the contracts\\n     *\\n     * NOTE:\\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\\n     */\\n    function updateContracts(\\n        ISuperfluid host,\\n        address hostNewLogic,\\n        address[] calldata agreementClassNewLogics,\\n        address superTokenFactoryNewLogic\\n    ) external;\\n\\n    /**\\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\\n     */\\n    function updateSuperTokenLogic(\\n        ISuperfluid host,\\n        ISuperToken token) external;\\n\\n    /// @dev Get configuration as address value\\n    function getConfigAsAddress(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (address value);\\n\\n    /// @dev Get configuration as uint256 value\\n    function getConfigAsUint256(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x1494ca0fcbe19dac4d2cf599dacd1053c1405d96965761f4bbae9fc4f39e88ac\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's token interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidToken {\\n\\n    /**************************************************************************\\n     * Basic information\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /**************************************************************************\\n     * Real-time balance functions\\n     *************************************************************************/\\n\\n    /**\\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\\n    * @param account for the query\\n    * @param timestamp Time of balance\\n    * @param account Account to query\\n    * @return availableBalance Real-time balance\\n    * @return deposit Account deposit\\n    * @return owedDeposit Account owed Deposit\\n    */\\n    function realtimeBalanceOf(\\n       address account,\\n       uint256 timestamp\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /// @dev realtimeBalanceOf with timestamp equals to block timestamp\\n    function realtimeBalanceOfNow(\\n       address account\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit,\\n            uint256 timestamp);\\n\\n    /**\\n    * @dev Check if one account is critical\\n    * @param account Account check if is critical by a future time\\n    * @param timestamp Time of balance\\n    * @return isCritical\\n    */\\n    function isAccountCritical(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n    * @dev Check if one account is critical now\\n    * @param account Account check if is critical by a future time\\n    * @return isCritical\\n    */\\n    function isAccountCriticalNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n     * @dev Check if one account is solvent\\n     * @param account Account check if is solvent by a future time\\n     * @param timestamp Time of balance\\n     * @return isSolvent\\n     */\\n    function isAccountSolvent(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n     * @dev Check if one account is solvent now\\n     * @param account Account check if is solvent now\\n     * @return isSolvent\\n     */\\n    function isAccountSolventNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n    * @dev Get a list of agreements that is active for the account\\n    * @dev An active agreement is one that has state for the account\\n    * @param account Account to query\\n    * @return activeAgreements List of accounts that have non-zero states for the account\\n    */\\n    function getAccountActiveAgreements(address account)\\n       external view\\n       returns(ISuperAgreement[] memory activeAgreements);\\n\\n\\n   /**************************************************************************\\n    * Super Agreement hosting functions\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function createAgreement(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementCreated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Get data of the agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @return data Data of the agreement\\n     */\\n    function getAgreementData(\\n        address agreementClass,\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external view\\n        returns(bytes32[] memory data);\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function updateAgreementData(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementUpdated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Close the agreement\\n     * @param id Agreement ID\\n     */\\n    function terminateAgreement(\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement termination event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     */\\n    event AgreementTerminated(\\n        address indexed agreementClass,\\n        bytes32 id\\n    );\\n\\n    /**\\n     * @dev Update agreement state slot\\n     * @param account Account to be updated\\n     *\\n     * NOTE\\n     * - To clear the storage out, provide zero-ed array of intended length\\n     */\\n    function updateAgreementStateSlot(\\n        address account,\\n        uint256 slotId,\\n        bytes32[] calldata slotData\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account updated\\n     * @param slotId slot id of the agreement state\\n     */\\n    event AgreementStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        uint256 slotId\\n    );\\n\\n    /**\\n     * @dev Get data of the slot of the state of a agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account to query\\n     * @param slotId slot id of the state\\n     * @param dataLength length of the state data\\n     */\\n    function getAgreementStateSlot(\\n        address agreementClass,\\n        address account,\\n        uint256 slotId,\\n        uint dataLength\\n    )\\n        external view\\n        returns (bytes32[] memory slotData);\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account of the agrement\\n     * @param state Agreement state of the account\\n     */\\n    event AgreementAccountStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        bytes state\\n    );\\n\\n    /**\\n     * @dev Settle balance from an account by the agreement.\\n     *      The agreement needs to make sure that the balance delta is balanced afterwards\\n     * @param account Account to query.\\n     * @param delta Amount of balance delta to be settled\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function settleBalance(\\n        address account,\\n        int256 delta\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement liquidation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAccount Account that collect the reward\\n     * @param rewardAmount Amount of liquidation reward\\n     */\\n    event AgreementLiquidated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed rewardAccount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev System bailout occurred\\n     * @param bailoutAccount Account that bailout the penalty account\\n     * @param bailoutAmount Amount of account bailout\\n     */\\n    event Bailout(\\n        address indexed bailoutAccount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Make liquidation payouts\\n     * @param id Agreement ID\\n     * @param liquidator Address of the executer of liquidation\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of account bailout needed\\n     *\\n     * NOTE:\\n     * Liquidation rules:\\n     *  - If a bailout is required (bailoutAmount > 0)\\n     *     - the actual reward goes to the liquidator,\\n     *     - while the reward account becomes the bailout account\\n     *     - total bailout include: bailout amount + reward amount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayouts\\n    (\\n        bytes32 id,\\n        address liquidator,\\n        address penaltyAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    )\\n        external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * NOTE: solidity-coverage not supporting it\\n     *************************************************************************/\\n\\n     /// @dev The msg.sender must be host contract\\n     //modifier onlyHost() virtual;\\n\\n    /// @dev The msg.sender must be a listed agreement.\\n    //modifier onlyAgreement() virtual;\\n\\n}\\n\",\"keccak256\":\"0xfee1ab65ddbf90b8543a443de70a576218b83dd45aca360c0ec858726eb03feb\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInfo } from \\\"./TokenInfo.sol\\\";\\n\\n\\n/**\\n *\\n * @dev Interface for ERC20 token with token info\\n *\\n * NOTE: Using abstract contract instead of interfaces because old solidity\\n * does not support interface inheriting other interfaces\\n * solhint-disable-next-line no-empty-blocks\\n *\\n */\\n// solhint-disable-next-line no-empty-blocks\\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\\n\",\"keccak256\":\"0x808d3a486826e7f119671174a77896c6e23578e691625350dbb3e9f74a0d5137\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\n/**\\n * @dev ERC20 token info interface\\n *\\n * NOTE: ERC20 standard interface does not specify these functions, but\\n * often the token implementations have them.\\n *\\n */\\ninterface TokenInfo {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x4dee21b8f64edbfe811a300d31f529b5367d1186d69b8b2b8dc3373be7a108b0\",\"license\":\"AGPLv3\"},\"src/creaton/CreatonAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\npragma abicoder v2;\\n\\n// import \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\nimport \\\"./CreatorProxy.sol\\\";\\nimport \\\"../metatx/CreatonPaymaster.sol\\\";\\n// TODO override _msgSender and _msgData from Context and BaseRelayRecipient\\n//import \\\"@openzeppelin/contracts/access/OwnableBaseRelayRecipient.sol\\\";\\nimport \\\"../dependency/gsn/contracts/BaseRelayRecipient.sol\\\";\\n\\ncontract CreatonAdmin is BaseRelayRecipient {\\n    \\n    // -----------------------------------------\\n    // Events\\n    // -----------------------------------------\\n\\n    event CreatorDeployed(address creator, address creatorContract, string description, uint256 subscriptionPrice);\\n    event NewSubscriber(address user, uint256 amount);\\n    event ProfileUpdate(address user, string jsonData);\\n\\n    // -----------------------------------------\\n    // Storage\\n    // -----------------------------------------\\n\\n    mapping(address => address[]) public creator2contract; \\n    mapping(address => address) public contract2creator;\\n    mapping(address => bool) public registered_users;\\n    mapping(address => string) public user2twitter;\\n\\n    address private _host;\\n    address private _cfa;\\n    address private _acceptedToken;\\n\\n    address public treasury;\\n    int96 public treasury_fee;\\n\\n\\n    address public creatorBeacon;\\n    address public nftFactory;\\n\\n    address payable public paymaster;\\n\\n\\n    // -----------------------------------------\\n    // Constructor\\n    // -----------------------------------------\\n\\n    constructor(\\n        address host,\\n        address cfa,\\n        address acceptedToken, // get these from superfluid contracts\\n        address _treasury,\\n        int96 _treasury_fee,\\n        address _creatorBeacon,\\n        address _nftFactory,\\n        address _trustedForwarder,\\n        address payable _paymaster\\n    ) {\\n        assert(host != address(0));\\n        assert(cfa != address(0));\\n        assert(acceptedToken != address(0));\\n\\n        _host = host;\\n        _cfa = cfa;\\n        _acceptedToken = acceptedToken;\\n\\n        treasury = _treasury;\\n        treasury_fee = _treasury_fee;\\n\\n        creatorBeacon = _creatorBeacon;\\n        nftFactory = _nftFactory;\\n\\n        trustedForwarder = _trustedForwarder;\\n        paymaster = _paymaster;\\n    }\\n\\n    // -----------------------------------------\\n    // Logic \\n    // -----------------------------------------\\n\\n    function deployCreator(string calldata description, uint256 subscriptionPrice,\\n        string memory nftName, string memory nftSymbol) external {\\n        require(registered_users[_msgSender()], \\\"You need to signup in Creaton before becoming a creator\\\");\\n        CreatorProxy creatorContract =\\n        new CreatorProxy(\\n            creatorBeacon,\\n            abi.encodeWithSignature(\\\"initialize(address,address,address,address,string,uint256,address,string,string)\\\",\\n            _host, _cfa, _acceptedToken, _msgSender(), description, subscriptionPrice, trustedForwarder, nftName, nftSymbol)\\n        );\\n\\n        address creatorContractAddr = address(creatorContract);\\n        require(creatorContractAddr != address(0));\\n\\n        contract2creator[creatorContractAddr] = _msgSender();\\n        creator2contract[_msgSender()].push(creatorContractAddr);\\n        CreatonPaymaster(paymaster).addCreatorContract(creatorContractAddr);\\n\\n        emit CreatorDeployed(_msgSender(), creatorContractAddr, description, subscriptionPrice);\\n    }\\n\\n    // TODO only be called from twitter contract\\n    function signUp (address user, string memory twitter) public {\\n        user2twitter[user] = twitter;\\n    }\\n\\n    function updateProfile(string memory dataJSON) external {\\n        registered_users[_msgSender()] = true;\\n        emit ProfileUpdate(_msgSender(), dataJSON);\\n    }\\n\\n    function versionRecipient() external view override  returns (string memory){\\n        return \\\"2.1.0\\\";\\n    }\\n\\n\\n//     function bytesToAddress(bytes memory bys) private pure returns (address addr) {\\n//         assembly {\\n//           addr := mload(add(bys,20))\\n//         }\\n//     }\\n\\n//     function forwardTx(address _target, bytes memory _data) public payable returns (bytes memory) {\\n//        require(contract2creator(_target) != address(0), \\\"Non-existent Creator Contract\\\");\\n//        (bool success, bytes memory res) = _target.call{value: msg.value}(abi.encodePacked(_data, _msgSender()));\\n//        require(success, \\\"TxForwarder#forwardTx:  CALL_FAILED\\\");\\n//        return res;\\n//     }\\n    \\n}\\n\",\"keccak256\":\"0xa8a0511444ec870c42b131518dc4265ee0bba90e61676138b11508d6a7726a53\",\"license\":\"MIT\"},\"src/creaton/CreatorProxy.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\n\\ncontract CreatorProxy is BeaconProxy {\\n\\n    constructor (address beacon, bytes memory data) BeaconProxy(beacon, data){\\n\\n    }\\n}\\n\",\"keccak256\":\"0x5837e15dfe33057f08b4a703d9b1f6a91b8c43e2d7aef229c31b810cf85d8294\"},\"src/creaton/CreatorV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\npragma abicoder v2;\\n\\nimport './CreatonAdmin.sol';\\nimport './NFTFactory.sol';\\nimport './Post.sol';\\nimport \\\"../dependency/gsn/contracts/BaseRelayRecipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport {\\n    ISuperfluid,\\n    ISuperToken,\\n    ISuperAgreement,\\n    SuperAppDefinitions\\n} from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\n\\nimport {\\n    IConstantFlowAgreementV1\\n} from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\n\\nimport {\\n    SuperAppBase\\n} from \\\"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\\\";\\n\\n\\nimport { Int96SafeMath } from \\\"../utils/Int96SafeMath.sol\\\";\\n\\n\\n\\ncontract CreatorV1 is SuperAppBase, Initializable, BaseRelayRecipient {\\n    using Int96SafeMath for int96;\\n    // -----------------------------------------\\n    // Errors\\n    // -----------------------------------------\\n\\n    string private constant _ERR_STR_LOW_FLOW_RATE = \\\"Superfluid: flow rate not enough\\\";\\n\\n    // -----------------------------------------\\n    // Structures\\n    // -----------------------------------------\\n\\n    enum Status { unSubscribed, requestSubscribe, pendingSubscribe, pendingUnsubscribe, subscribed }\\n    enum Approval { neutral, like, dislike }\\n    enum Type {free, encrypted}\\n\\n    event SubscriberEvent(address user, string pubKey, Status status);\\n    event Like(address user, uint256 tokenId, Approval approval);\\n    event NewPost(uint256 tokenId, string jsonData, Type contentType);\\n    event PostContract(address nftContract);\\n\\n    struct Subscriber {\\n        Status status;\\n    }\\n\\n    // -----------------------------------------\\n    // Storage\\n    // -----------------------------------------\\n\\n    ISuperfluid private _host; // host\\n    IConstantFlowAgreementV1 private _cfa; // the stored constant flow agreement class address\\n    ISuperToken private _acceptedToken; // accepted token\\n\\n    address public admin;\\n    address public creator;\\n    CreatonAdmin adminContract;\\n    NFTFactory nftFactory;\\n\\n    string public description;\\n    int96 public subscriptionPrice;\\n    int96 private _MINIMUM_FLOW_RATE;\\n    mapping (address => Subscriber) public subscribers;\\n    uint256 subscriberCount; // subscribers in subscribed/pendingSubscribe state\\n    address public postNFT;\\n    mapping (uint256 => Type) post2tier;\\n\\n    // -----------------------------------------\\n    // Initializer\\n    // -----------------------------------------\\n\\n    function initialize(\\n        address host,\\n        address cfa,\\n        address acceptedToken,\\n        address _creator,\\n        string memory _description,\\n        uint256 _subscriptionPrice,\\n        address _trustedForwarder,\\n        string memory nftName,\\n        string memory nftSymbol\\n    ) public payable initializer {\\n        admin = msg.sender;\\n\\n        assert(address(host) != address(0));\\n        assert(address(cfa) != address(0));\\n        assert(address(acceptedToken) != address(0));\\n\\n        _host = ISuperfluid(host);\\n        _cfa = IConstantFlowAgreementV1(cfa);\\n        _acceptedToken = ISuperToken(acceptedToken);\\n        uint256 configWord = SuperAppDefinitions.APP_LEVEL_FINAL;\\n        _host.registerApp(configWord);\\n\\n        creator = _creator;\\n        description = _description;\\n        subscriptionPrice = int96(uint96(_subscriptionPrice));\\n        _MINIMUM_FLOW_RATE = subscriptionPrice.mul(1e18).div(3600 * 24 * 30);\\n\\n        adminContract = CreatonAdmin(admin);\\n        nftFactory = NFTFactory(adminContract.nftFactory());\\n        trustedForwarder = _trustedForwarder;\\n        createPostNFT(nftName, nftSymbol);\\n    }\\n\\n    // -----------------------------------------\\n    // Logic\\n    // -----------------------------------------\\n\\n    receive() external payable {}\\n\\n    // TODO check for msg.sender\\n    function withdrawEth() public {\\n        (bool success, ) = msg.sender.call{value: (address(this).balance)}(\\\"Not admin\\\");\\n        require(success, \\\"No balance\\\");\\n    }\\n\\n    // function recoverTokens(address _token) external isCreator {\\n    //     ERC20(_token).approve(address(this), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n    //     ERC20(_token).transfer(msg.sender, ERC20(_token).balanceOf(address(this)));\\n    // }\\n\\n    function changeStatus(address _address, Status status) private {\\n        subscribers[_address].status = status;\\n        emit SubscriberEvent(_address, \\\"\\\", status);\\n    }\\n\\n    // TODO require subscriber is not subscribes already (sth like that)\\n    function requestSubscribe(string memory _pubKey) external {\\n        address _address = _msgSender();\\n        require(adminContract.registered_users(_address), \\\"You need to signup in Creaton first\\\");\\n        require (subscribers[_address].status == Status.unSubscribed, \\\"Subscription Already Requested\\\");\\n        subscribers[_address] = Subscriber(Status.requestSubscribe);\\n        emit SubscriberEvent(_address, _pubKey, Status.requestSubscribe);\\n    }\\n\\n    function revokeSubscribe() external {\\n        address _address = _msgSender();\\n        require(subscribers[_address].status == Status.requestSubscribe ||\\n            subscribers[_address].status == Status.pendingSubscribe, \\\"No Subscription Request to Revoke\\\");\\n        changeStatus(_address, Status.unSubscribed);\\n        delete subscribers[_address];\\n    }\\n\\n    function acceptSubscribe(address _address) external onlyCreator {\\n        require(subscribers[_address].status == Status.requestSubscribe, \\\"No subscription requested\\\");\\n        changeStatus(_address, Status.pendingSubscribe);\\n    }\\n\\n    function blockSubscription(address _address) external onlyCreator {\\n        require(subscribers[_address].status != Status.unSubscribed, \\\"Can't Block Unsubscribed Users\\\");\\n        changeStatus(_address, Status.unSubscribed);\\n        delete subscribers[_address];\\n    }\\n\\n    function bulkAcceptSubscribe(address[] memory _addresses) external onlyCreator {\\n        for(uint i = 0; i < _addresses.length; i++) {\\n            require(subscribers[_addresses[i]].status == Status.requestSubscribe, \\\"No Subscription Requested\\\");\\n            changeStatus(_addresses[i], Status.pendingSubscribe);\\n        }\\n    }\\n\\n    function bulkBlockSubscription(address[] memory _addresses) external onlyCreator {\\n        for(uint i = 0; i < _addresses.length; i++) {\\n            require(subscribers[_addresses[i]].status != Status.unSubscribed, \\\"Can't Block Unsubscribed Users\\\");\\n            changeStatus(_addresses[i], Status.unSubscribed);\\n            delete subscribers[_addresses[i]];\\n        }\\n    }\\n\\n    function getSubscriberCount() public view returns (uint256) {\\n        return subscriberCount;\\n    }\\n\\n    function like(uint _tokenId, uint approvalEnum) external {\\n        require(postNFT != address(0));\\n        require(Post(postNFT).exists(_tokenId));\\n        address subAddress = _msgSender();\\n        require(adminContract.registered_users(subAddress), \\\"You need to signup before liking content\\\");\\n        if (post2tier[_tokenId] == Type.encrypted) {\\n            require(subscribers[subAddress].status == Status.subscribed, \\\"Not subscribed\\\");\\n        }\\n        require(approvalEnum < 3 && approvalEnum >= 0, \\\"Invalid approval enum\\\");\\n        Approval approval = Approval(approvalEnum);\\n        emit Like(subAddress, _tokenId, approval);\\n    }\\n\\n    function createPostNFT(string memory name, string memory symbol) internal {\\n        require(postNFT == address(0));\\n        postNFT = nftFactory.createPostNFT(name, symbol, \\\"\\\", address(this));\\n        emit PostContract(postNFT);\\n    }\\n\\n    function upload(string memory _metadataURI, string memory _dataJSON, Type contentType) external onlyCreator {\\n        require(postNFT != address(0));\\n        require(contentType ==  Type.free || contentType == Type.encrypted);\\n        uint256 tokenId = Post(postNFT).mint(creator, _metadataURI);\\n        post2tier[tokenId] = contentType;\\n        emit NewPost(tokenId, _dataJSON, contentType);\\n    }\\n\\n    // -----------------------------------------\\n    // utility\\n    // -----------------------------------------\\n\\n    function percentage (\\n        int96 num,\\n        int96 percent\\n    ) public pure returns (int96) {\\n        return num.mul(percent).div(100);\\n    }\\n\\n    function versionRecipient() external view override  returns (string memory){\\n        return \\\"2.1.0\\\";\\n    }\\n\\n    // -----------------------------------------\\n    // Superfluid Logic\\n    // -----------------------------------------\\n\\n    function _openFlows(\\n        bytes calldata ctx,\\n        int96 contract2creator, \\n        int96 contract2treasury\\n    ) private returns (bytes memory newCtx){\\n        // open flow to creator\\n            (newCtx, ) = _host.callAgreementWithContext(\\n                _cfa,\\n                abi.encodeWithSelector(\\n                    _cfa.createFlow.selector,\\n                    _acceptedToken,\\n                    creator,\\n                    contract2creator,\\n                    new bytes(0)\\n                ),\\n                new bytes(0),\\n                ctx\\n            );\\n\\n            // open flow to treasury\\n            (newCtx, ) = _host.callAgreementWithContext(\\n                _cfa,\\n                abi.encodeWithSelector(\\n                    _cfa.createFlow.selector,\\n                    _acceptedToken,\\n                    adminContract.treasury(),\\n                    contract2treasury,\\n                    new bytes(0)\\n                ),\\n                new bytes(0),\\n                newCtx\\n            );\\n    }\\n\\n    function _updateFlows(\\n        bytes calldata ctx,\\n        int96 contract2creator, \\n        int96 contract2treasury\\n    ) private returns (bytes memory newCtx){\\n        // update flow to creator\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.updateFlow.selector,\\n                _acceptedToken,\\n                creator,\\n                contract2creator,\\n                new bytes(0)\\n            ),\\n            new bytes(0),\\n            ctx\\n        );\\n\\n        // update flow to treasury\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.updateFlow.selector,\\n                _acceptedToken,\\n                adminContract.treasury(),\\n                contract2treasury,\\n                new bytes(0)\\n            ), // call data\\n            new bytes(0), // user data\\n            newCtx // ctx\\n        );\\n    }\\n\\n    function _deleteFlows(\\n        bytes calldata ctx\\n    ) private returns (bytes memory newCtx) {\\n        // delete flow to creator\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.deleteFlow.selector,\\n                _acceptedToken,\\n                address(this),\\n                creator,\\n                new bytes(0)\\n            ),\\n            new bytes(0),\\n            ctx\\n        );\\n\\n        // delete flow to treasury\\n        (newCtx, ) = _host.callAgreementWithContext(\\n            _cfa,\\n            abi.encodeWithSelector(\\n                _cfa.deleteFlow.selector,\\n                _acceptedToken,\\n                address(this),\\n                adminContract.treasury(),\\n                new bytes(0)\\n            ), // call data\\n            new bytes(0), // user data\\n            newCtx // ctx\\n        );\\n    }\\n\\n    function _addSubscriber(address _address) private {\\n        subscriberCount += 1;\\n        changeStatus(_address, Status.subscribed);\\n    }\\n\\n    function _delSubscriber(address _address) private {\\n        subscriberCount -= 1;\\n        changeStatus(_address, Status.unSubscribed);\\n        delete subscribers[_address];\\n    }\\n\\n    function _subscribe (\\n        bytes calldata ctx,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata cbdata\\n    ) private returns (bytes memory newCtx){\\n\\n        (, int96 flowRate, , ) = IConstantFlowAgreementV1(agreementClass).getFlowByID(_acceptedToken, agreementId);\\n        require(flowRate >= _MINIMUM_FLOW_RATE, _ERR_STR_LOW_FLOW_RATE);\\n        ISuperfluid.Context memory context = _host.decodeCtx(ctx); // should give userData\\n        require(subscribers[context.msgSender].status == Status.pendingSubscribe, \\\"Subscription not Granted\\\");\\n\\n        int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\\n        int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasury_fee());\\n        int96 contract2treasuryDelta = contractFlowRate.sub(contract2creatorDelta);\\n\\n        if (subscriberCount == 0){\\n            newCtx = _openFlows(ctx, contract2creatorDelta, contract2treasuryDelta);\\n        } else if (subscriberCount > 0){\\n            (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\\n            (, int96 contract2treasuryCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\\n            newCtx = _updateFlows(ctx,\\n                                contract2creatorCurrent + contract2creatorDelta, \\n                                contract2treasuryCurrent + contract2treasuryDelta\\n                                );\\n        }\\n\\n        _addSubscriber(context.msgSender);\\n    }\\n\\n    function _updateSubscribe(\\n        bytes calldata ctx,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata cbdata\\n    ) private returns (bytes memory newCtx){\\n\\n        (, int96 flowRate, , ) = IConstantFlowAgreementV1(agreementClass).getFlowByID(_acceptedToken, agreementId);\\n        require(flowRate >= _MINIMUM_FLOW_RATE, _ERR_STR_LOW_FLOW_RATE);\\n\\n        int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\\n        int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasury_fee());\\n        int96 contract2treasuryDelta = contractFlowRate.sub(contract2creatorDelta);\\n\\n        (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\\n        (, int96 contract2treasuryCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\\n        newCtx = _updateFlows(ctx,\\n                              contract2creatorCurrent + contract2creatorDelta, \\n                              contract2treasuryCurrent + contract2treasuryDelta\\n                             );\\n    }\\n\\n    function _unsubscribe (\\n        bytes calldata ctx\\n    ) private returns (bytes memory newCtx){\\n        address sender = _host.decodeCtx(ctx).msgSender;\\n        if (subscriberCount == 1){\\n            newCtx = _deleteFlows(ctx);\\n        } else if (subscriberCount > 0){\\n            int96 contractFlowRate = _cfa.getNetFlow(_acceptedToken, address(this));\\n            int96 contract2creatorDelta = percentage(contractFlowRate, adminContract.treasury_fee());\\n            int96 contract2treasuryDelta = contractFlowRate.sub(contract2creatorDelta);\\n\\n            (, int96 contract2creatorCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), creator);\\n            (, int96 contract2treasuryCurrent, , ) = _cfa.getFlow(_acceptedToken, address(this), adminContract.treasury());\\n\\n            newCtx = _updateFlows(ctx,\\n                                  contract2creatorCurrent + contract2creatorDelta, \\n                                  contract2treasuryCurrent + contract2treasuryDelta\\n                                 );\\n        }\\n\\n        _delSubscriber(sender);\\n    }\\n\\n    // -----------------------------------------\\n    // Superfluid Callbacks\\n    // -----------------------------------------\\n\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata ctx\\n    )\\n        external view override\\n        onlyHost\\n        onlyExpected(superToken, agreementClass)\\n        returns (bytes memory cbdata)\\n    {\\n        cbdata = new bytes(0);\\n    }\\n\\n    function afterAgreementCreated(\\n        ISuperToken /* superToken */,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external override\\n        onlyHost\\n        returns (bytes memory newCtx)\\n    {\\n        return _subscribe(ctx, agreementClass, agreementId, cbdata);\\n    }\\n\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external view override\\n        onlyHost\\n        onlyExpected(superToken, agreementClass)\\n        returns (bytes memory cbdata)\\n    {\\n        cbdata = new bytes(0);\\n    }\\n\\n    function afterAgreementUpdated(\\n        ISuperToken /* superToken */,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external override\\n        onlyHost\\n        returns (bytes memory newCtx)\\n    {\\n        return _updateSubscribe(ctx, agreementClass, agreementId, cbdata);\\n    }\\n\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 /*agreementId*/,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata /*ctx*/\\n    )\\n        external view override\\n        onlyHost\\n        returns (bytes memory cbdata)\\n    {\\n        // According to the app basic law, we should never revert in a termination callback\\n        if (!_isSameToken(superToken) || !_isCFAv1(agreementClass)) return abi.encode(true);\\n        return abi.encode(false);\\n    }\\n\\n    function afterAgreementTerminated(\\n        ISuperToken /* superToken */,\\n        address /* agreementClass */,\\n        bytes32 /* agreementId */,\\n        bytes calldata /*agreementData*/,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external override\\n        onlyHost\\n        returns (bytes memory newCtx)\\n    {\\n        // According to the app basic law, we should never revert in a termination callback\\n        (bool shouldIgnore) = abi.decode(cbdata, (bool));\\n        if (shouldIgnore) return ctx;\\n        return _unsubscribe(ctx);\\n    }\\n\\n    function _isSameToken(ISuperToken superToken) private view returns (bool) {\\n        return address(superToken) == address(_acceptedToken);\\n    }\\n\\n    function _isCFAv1(address agreementClass) private view returns (bool) {\\n        return ISuperAgreement(agreementClass).agreementType()\\n            == keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    // -----------------------------------------\\n    // Modifiers\\n    // -----------------------------------------\\n\\n    modifier onlyHost() {\\n        require(msg.sender == address(_host), \\\"LotterySuperApp: support only one host\\\");\\n        _;\\n    }\\n\\n    modifier onlyExpected(ISuperToken superToken, address agreementClass) {\\n        require(_isSameToken(superToken), \\\"LotterySuperApp: not accepted token\\\");\\n        require(_isCFAv1(agreementClass), \\\"LotterySuperApp: only CFAv1 supported\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreator() {\\n        require(_msgSender() == creator, \\\"Not the creator\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb6c02c6295249fe8591365dd0d25e6c64a63abdb644d01a58abdb8bfa1aeeb37\",\"license\":\"MIT\"},\"src/creaton/NFTFactory.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\nimport \\\"./Post.sol\\\";\\n\\ncontract NFTFactory {\\n    constructor () {\\n\\n    }\\n\\n    function createPostNFT(string memory name, string memory symbol, string memory baseTokenURI, address minter) public returns (address){\\n        return address(new Post(name, symbol, baseTokenURI, minter));\\n    }\\n}\\n\",\"keccak256\":\"0xfb611269734c0ebf3524daa72a7e62beb93e2a9cbc5c50085879f2c487d95b2c\"},\"src/creaton/Post.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract Post is Context, AccessControlEnumerable, ERC721URIStorage, ERC721Burnable, ERC721Pausable {\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenId;\\n    string private _baseTokenURI;\\n\\n\\n    constructor (string memory name, string memory symbol, string memory baseTokenURI, address minter) ERC721(name, symbol) {\\n        _baseTokenURI = baseTokenURI;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, minter);\\n        _setupRole(MINTER_ROLE, minter);\\n        _setupRole(PAUSER_ROLE, minter);\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function mint(address to, string memory _metadataURI) public returns(uint256) {\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC721PresetMinterPauserAutoId: must have minter role to mint\\\");\\n        _mint(to, _tokenId.current());\\n        _setTokenURI(_tokenId.current(), _metadataURI);\\n        _tokenId.increment();\\n        return (_tokenId.current() - 1);\\n    }\\n\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual override(ERC721URIStorage, ERC721) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override (ERC721URIStorage, ERC721) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x82d87ee5f0318edb04516cae7016181a28bf9ee4590329214e63908ba2293228\"},\"src/dependency/gsn/contracts/BasePaymaster.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/GsnTypes.sol\\\";\\nimport \\\"./interfaces/IPaymaster.sol\\\";\\nimport \\\"./interfaces/IRelayHub.sol\\\";\\nimport \\\"./utils/GsnEip712Library.sol\\\";\\nimport \\\"./forwarder/Forwarder.sol\\\";\\n\\n/**\\n * Abstract base class to be inherited by a concrete Paymaster\\n * A subclass must implement:\\n *  - preRelayedCall\\n *  - postRelayedCall\\n */\\nabstract contract BasePaymaster is IPaymaster, Ownable {\\n\\n    IRelayHub internal relayHub;\\n    IForwarder public override trustedForwarder;\\n\\n    function getHubAddr() public override view returns (address) {\\n        return address(relayHub);\\n    }\\n\\n    //overhead of forwarder verify+signature, plus hub overhead.\\n    uint256 constant public FORWARDER_HUB_OVERHEAD = 50000;\\n\\n    //These parameters are documented in IPaymaster.GasLimits\\n    uint256 constant public PRE_RELAYED_CALL_GAS_LIMIT = 100000;\\n    uint256 constant public POST_RELAYED_CALL_GAS_LIMIT = 110000;\\n    uint256 constant public PAYMASTER_ACCEPTANCE_BUDGET = PRE_RELAYED_CALL_GAS_LIMIT + FORWARDER_HUB_OVERHEAD;\\n\\n    function getGasLimits()\\n    public\\n    override\\n    virtual\\n    view\\n    returns (\\n        IPaymaster.GasLimits memory limits\\n    ) {\\n        return IPaymaster.GasLimits(\\n            PAYMASTER_ACCEPTANCE_BUDGET,\\n            PRE_RELAYED_CALL_GAS_LIMIT,\\n            POST_RELAYED_CALL_GAS_LIMIT\\n        );\\n    }\\n\\n    // this method must be called from preRelayedCall to validate that the forwarder\\n    // is approved by the paymaster as well as by the recipient contract.\\n    function _verifyForwarder(GsnTypes.RelayRequest calldata relayRequest)\\n    public\\n    view\\n    {\\n        require(address(trustedForwarder) == relayRequest.relayData.forwarder, \\\"Forwarder is not trusted\\\");\\n        GsnEip712Library.verifyForwarderTrusted(relayRequest);\\n    }\\n\\n    /*\\n     * modifier to be used by recipients as access control protection for preRelayedCall & postRelayedCall\\n     */\\n    modifier relayHubOnly() {\\n        require(msg.sender == getHubAddr(), \\\"Function can only be called by RelayHub\\\");\\n        _;\\n    }\\n\\n    function setRelayHub(IRelayHub hub) public onlyOwner {\\n        relayHub = hub;\\n    }\\n\\n    function setTrustedForwarder(IForwarder forwarder) public onlyOwner {\\n        trustedForwarder = forwarder;\\n    }\\n\\n    /// check current deposit on relay hub.\\n    function getRelayHubDeposit()\\n    public\\n    override\\n    view\\n    returns (uint) {\\n        return relayHub.balanceOf(address(this));\\n    }\\n\\n    // any money moved into the paymaster is transferred as a deposit.\\n    // This way, we don't need to understand the RelayHub API in order to replenish\\n    // the paymaster.\\n    receive() external virtual payable {\\n        require(address(relayHub) != address(0), \\\"relay hub address not set\\\");\\n        relayHub.depositFor{value:msg.value}(address(this));\\n    }\\n\\n    /// withdraw deposit from relayHub\\n    function withdrawRelayHubDepositTo(uint amount, address payable target) public onlyOwner {\\n        relayHub.withdraw(amount, target);\\n    }\\n}\\n\",\"keccak256\":\"0xf2d86f0ef53d74443679141c6063feb265c6ae88b1433b8dd93e1f4f97f00eb2\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n// solhint-disable no-inline-assembly\\npragma solidity 0.8.0;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address payable ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return payable(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal override virtual view returns (bytes memory ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // we copy the msg.data , except the last 20 bytes (and update the total length)\\n            assembly {\\n                let ptr := mload(0x40)\\n                // copy only size-20 bytes\\n                let size := sub(calldatasize(),20)\\n                // structure RLP data as <offset> <length> <bytes>\\n                mstore(ptr, 0x20)\\n                mstore(add(ptr,32), size)\\n                calldatacopy(add(ptr,64), 0, size)\\n                return(ptr, add(size,64))\\n            }\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf9c23638eb2c587f9adcab66a270efcdcc3da306b12399df484b7290ce6c7cd\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/forwarder/Forwarder.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwarder.sol\\\";\\n\\ncontract Forwarder is IForwarder {\\n    using ECDSA for bytes32;\\n\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data\\\";\\n\\n    string public constant EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    mapping(bytes32 => bool) public typeHashes;\\n    mapping(bytes32 => bool) public domains;\\n\\n    // Nonces of senders, used to prevent replay attacks\\n    mapping(address => uint256) private nonces;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function getNonce(address from)\\n    public view override\\n    returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    constructor() public {\\n\\n        string memory requestType = string(abi.encodePacked(\\\"ForwardRequest(\\\", GENERIC_PARAMS, \\\")\\\"));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function verify(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    external override view {\\n\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n    }\\n\\n    function execute(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig\\n    )\\n    external payable\\n    override\\n    returns (bool success, bytes memory ret) {\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n        _updateNonce(req);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(abi.encodePacked(req.data, req.from));\\n        if ( address(this).balance>0 ) {\\n            //can't fail: req.from signed (off-chain) the request, so it must be an EOA...\\n            payable(req.from).transfer(address(this).balance);\\n        }\\n        return (success,ret);\\n    }\\n\\n\\n    function _verifyNonce(ForwardRequest memory req) internal view {\\n        require(nonces[req.from] == req.nonce, \\\"nonce mismatch\\\");\\n    }\\n\\n    function _updateNonce(ForwardRequest memory req) internal {\\n        nonces[req.from]++;\\n    }\\n\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\\n\\n        for (uint i = 0; i < bytes(typeName).length; i++) {\\n            bytes1 c = bytes(typeName)[i];\\n            require(c != \\\"(\\\" && c != \\\")\\\", \\\"invalid typename\\\");\\n        }\\n\\n        string memory requestType = string(abi.encodePacked(typeName, \\\"(\\\", GENERIC_PARAMS, \\\",\\\", typeSuffix));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\\n        uint256 chainId;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly { chainId := chainid() }\\n\\n        bytes memory domainValue = abi.encode(\\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            address(this));\\n\\n        bytes32 domainHash = keccak256(domainValue);\\n\\n        domains[domainHash] = true;\\n        emit DomainRegistered(domainHash, domainValue);\\n    }\\n\\n    function registerRequestTypeInternal(string memory requestType) internal {\\n\\n        bytes32 requestTypehash = keccak256(bytes(requestType));\\n        typeHashes[requestTypehash] = true;\\n        emit RequestTypeRegistered(requestTypehash, requestType);\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n\\n    function _verifySig(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData,\\n        bytes memory sig)\\n    internal\\n    view\\n    {\\n        require(domains[domainSeparator], \\\"unregistered domain separator\\\");\\n        require(typeHashes[requestTypeHash], \\\"unregistered request typehash\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", domainSeparator,\\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\\n            ));\\n        require(digest.recover(sig) == req.from, \\\"signature mismatch\\\");\\n    }\\n\\n    function _getEncoded(\\n        ForwardRequest memory req,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData\\n    )\\n    public\\n    pure\\n    returns (\\n        bytes memory\\n    ) {\\n        return abi.encodePacked(\\n            requestTypeHash,\\n            abi.encode(\\n                req.from,\\n                req.to,\\n                req.value,\\n                req.gas,\\n                req.nonce,\\n                keccak256(req.data)\\n            ),\\n            suffixData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xff43678c67e4b9bc36b36a824725ee0d4249cf5d0a6a75c468cef63504d906ae\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IForwarder {\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * verify the transaction would execute.\\n     * validate the signature and the nonce of the request.\\n     * revert if either signature or nonce are incorrect.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * execute a transaction\\n     * @param forwardRequest - all transaction parameters\\n     * @param domainSeparator - domain used when signing this request\\n     * @param requestTypeHash - request type used when signing this request.\\n     * @param suffixData - the extension data used when signing this request.\\n     * @param signature - signature to validate.\\n     *\\n     * the transaction is verified, and then executed.\\n     * the success and ret of \\\"call\\\" are returned.\\n     * This method would revert only verification errors. target errors\\n     * are reported using the returned \\\"success\\\" and ret string\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * Register a new Request typehash.\\n     * @param typeName - the name of the request type.\\n     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)\\n     *        if it does contain a value, then a comma is added first.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * Register a new domain separator.\\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\\n     * This method is given the domain name and version to create and register the domain separator value.\\n     * @param name the domain's display name\\n     * @param version the domain/protocol version\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\\n\",\"keccak256\":\"0x79c00fa172e65230e836f7e9f6eb976033b9c1f464d7a907aa5d45207537fd9f\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/GsnTypes.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\ninterface GsnTypes {\\n    struct RelayData {\\n        uint256 gasPrice;\\n        uint256 pctRelayFee;\\n        uint256 baseRelayFee;\\n        address relayWorker;\\n        address paymaster;\\n        bytes paymasterData;\\n        uint256 clientId;\\n        address forwarder;\\n    }\\n\\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\\n    struct RelayRequest {\\n        IForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\\n\",\"keccak256\":\"0xeac05d78049d3238dd20025f843c1aa79f344aed0ff2cf3dea27bc410981b4f5\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GsnTypes.sol\\\";\\n\\ninterface IPaymaster {\\n\\n    /**\\n     * @param acceptanceBudget -\\n     *      Paymaster expected gas budget to accept (or reject) a request\\n     *      This a gas required by any calculations that might need to reject the\\n     *      transaction, by preRelayedCall, forwarder and recipient.\\n     *      See value in BasePaymaster.PAYMASTER_ACCEPTANCE_BUDGET\\n     *      Transaction that gets rejected above that gas usage is on the paymaster's expense.\\n     *      As long this value is above preRelayedCallGasLimit (see defaults in BasePaymaster), the\\n     *      Paymaster is guaranteed it will never pay for rejected transactions.\\n     *      If this value is below preRelayedCallGasLimt, it might might make Paymaster open to a \\\"griefing\\\" attack.\\n     *\\n     *      Specifying value too high might make the call rejected by some relayers.\\n     *\\n     *      From a Relay's point of view, this is the highest gas value a paymaster might \\\"grief\\\" the relay,\\n     *      since the paymaster will pay anything above that (regardless if the tx reverts)\\n     *\\n     * @param preRelayedCallGasLimit - the max gas usage of preRelayedCall. any revert (including OOG)\\n     *      of preRelayedCall is a reject by the paymaster.\\n     *      as long as acceptanceBudget is above preRelayedCallGasLimit, any such revert (including OOG)\\n     *      is not payed by the paymaster.\\n     * @param postRelayedCallGasLimit - the max gas usage of postRelayedCall.\\n     *      note that an OOG will revert the transaction, but the paymaster already committed to pay,\\n     *      so the relay will get compensated, at the expense of the paymaster\\n     */\\n    struct GasLimits {\\n        uint256 acceptanceBudget;\\n        uint256 preRelayedCallGasLimit;\\n        uint256 postRelayedCallGasLimit;\\n    }\\n\\n    /**\\n     * Return the GasLimits constants used by the Paymaster.\\n     */\\n    function getGasLimits()\\n    external\\n    view\\n    returns (\\n        GasLimits memory limits\\n    );\\n\\n    function trustedForwarder() external view returns (IForwarder);\\n\\n/**\\n * return the relayHub of this contract.\\n */\\n    function getHubAddr() external view returns (address);\\n\\n    /**\\n     * Can be used to determine if the contract can pay for incoming calls before making any.\\n     * @return the paymaster's deposit in the RelayHub.\\n     */\\n    function getRelayHubDeposit() external view returns (uint256);\\n\\n    /**\\n     * Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call.\\n     *\\n     * MUST be protected with relayHubOnly() in case it modifies state.\\n     *\\n     * The Paymaster rejects by the following \\\"revert\\\" operations\\n     *  - preRelayedCall() method reverts\\n     *  - the forwarder reverts because of nonce or signature error\\n     *  - the paymaster returned \\\"rejectOnRecipientRevert\\\", and the recipient contract reverted.\\n     * In any of the above cases, all paymaster calls (and recipient call) are reverted.\\n     * In any other case, the paymaster agrees to pay for the gas cost of the transaction (note\\n     *  that this includes also postRelayedCall revert)\\n     *\\n     * The rejectOnRecipientRevert flag means the Paymaster \\\"delegate\\\" the rejection to the recipient\\n     *  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,\\n     *  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,\\n     *  otherwise the TX is paid by the Paymaster.\\n     *\\n     *  @param relayRequest - the full relay request structure\\n     *  @param signature - user's EIP712-compatible signature of the {@link relayRequest}.\\n     *              Note that in most cases the paymaster shouldn't try use it at all. It is always checked\\n     *              by the forwarder immediately after preRelayedCall returns.\\n     *  @param approvalData - extra dapp-specific data (e.g. signature from trusted party)\\n     *  @param maxPossibleGas - based on values returned from {@link getGasLimits},\\n     *         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.\\n     *         In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"\\n     *  return:\\n     *      a context to be passed to postRelayedCall\\n     *      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.\\n     *          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.\\n     *          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).\\n     */\\n    function preRelayedCall(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    )\\n    external\\n    returns (bytes memory context, bool rejectOnRecipientRevert);\\n\\n    /**\\n     * This method is called after the actual relayed function call.\\n     * It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call.\\n     *\\n     * MUST be protected with relayHubOnly() in case it modifies state.\\n     *\\n     * @param context - the call context, as returned by the preRelayedCall\\n     * @param success - true if the relayed call succeeded, false if it reverted\\n     * @param gasUseWithoutPost - the actual amount of gas used by the entire transaction, EXCEPT\\n     *        the gas used by the postRelayedCall itself.\\n     * @param relayData - the relay params of the request. can be used by relayHub.calculateCharge()\\n     *\\n     * Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster\\n     * is still committed to pay the relay for the entire transaction.\\n     */\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        GsnTypes.RelayData calldata relayData\\n    ) external;\\n\\n    function versionPaymaster() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x29f01fad832cb05fb5c72141b86d77b47fd46bf70082af25dfbf1c0896fd5c11\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IRelayHub.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GsnTypes.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\n\\ninterface IRelayHub {\\n\\n    /// Emitted when a relay server registers or updates its details\\n    /// Looking at these events lets a client discover relay servers\\n    event RelayServerRegistered(\\n        address indexed relayManager,\\n        uint256 baseRelayFee,\\n        uint256 pctRelayFee,\\n        string relayUrl);\\n\\n    /// Emitted when relays are added by a relayManager\\n    event RelayWorkersAdded(\\n        address indexed relayManager,\\n        address[] newRelayWorkers,\\n        uint256 workersCount\\n    );\\n\\n    // Emitted when an account withdraws funds from RelayHub.\\n    event Withdrawn(\\n        address indexed account,\\n        address indexed dest,\\n        uint256 amount\\n    );\\n\\n    // Emitted when depositFor is called, including the amount and account that was funded.\\n    event Deposited(\\n        address indexed paymaster,\\n        address indexed from,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when an attempt to relay a call fails and Paymaster does not accept the transaction.\\n    /// The actual relayed call was not executed, and the recipient not charged.\\n    /// @param reason contains a revert reason returned from preRelayedCall or forwarder.\\n    event TransactionRejectedByPaymaster(\\n        address indexed relayManager,\\n        address indexed paymaster,\\n        address indexed from,\\n        address to,\\n        address relayWorker,\\n        bytes4 selector,\\n        uint256 innerGasUsed,\\n        bytes reason);\\n\\n    // Emitted when a transaction is relayed. Note that the actual encoded function might be reverted: this will be\\n    // indicated in the status field.\\n    // Useful when monitoring a relay's operation and relayed calls to a contract.\\n    // Charge is the ether value deducted from the recipient's balance, paid to the relay's manager.\\n    event TransactionRelayed(\\n        address indexed relayManager,\\n        address indexed relayWorker,\\n        address indexed from,\\n        address to,\\n        address paymaster,\\n        bytes4 selector,\\n        RelayCallStatus status,\\n        uint256 charge);\\n\\n    event TransactionResult(\\n        RelayCallStatus status,\\n        bytes returnValue\\n    );\\n\\n    /// Reason error codes for the TransactionRelayed event\\n    /// @param OK - the transaction was successfully relayed and execution successful - never included in the event\\n    /// @param RelayedCallFailed - the transaction was relayed, but the relayed call failed\\n    /// @param RejectedByPreRelayed - the transaction was not relayed due to preRelatedCall reverting\\n    /// @param RejectedByForwarder - the transaction was not relayed due to forwarder check (signature,nonce)\\n    /// @param PostRelayedFailed - the transaction was relayed and reverted due to postRelatedCall reverting\\n    /// @param PaymasterBalanceChanged - the transaction was relayed and reverted due to the paymaster balance change\\n    enum RelayCallStatus {\\n        OK,\\n        RelayedCallFailed,\\n        RejectedByPreRelayed,\\n        RejectedByForwarder,\\n        RejectedByRecipientRevert,\\n        PostRelayedFailed,\\n        PaymasterBalanceChanged\\n    }\\n\\n    /// Add new worker addresses controlled by sender who must be a staked Relay Manager address.\\n    /// Emits a RelayWorkersAdded event.\\n    /// This function can be called multiple times, emitting new events\\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\\n\\n    function registerRelayServer(uint256 baseRelayFee, uint256 pctRelayFee, string calldata url) external;\\n\\n    // Balance management\\n\\n    // Deposits ether for a contract, so that it can receive (and pay for) relayed transactions. Unused balance can only\\n    // be withdrawn by the contract itself, by calling withdraw.\\n    // Emits a Deposited event.\\n    function depositFor(address target) external payable;\\n\\n    // Withdraws from an account's balance, sending it back to it. Relay managers call this to retrieve their revenue, and\\n    // contracts can also use it to reduce their funding.\\n    // Emits a Withdrawn event.\\n    function withdraw(uint256 amount, address payable dest) external;\\n\\n    // Relaying\\n\\n\\n    /// Relays a transaction. For this to succeed, multiple conditions must be met:\\n    ///  - Paymaster's \\\"acceptRelayCall\\\" method must succeed and not revert\\n    ///  - the sender must be a registered Relay Worker that the user signed\\n    ///  - the transaction's gas price must be equal or larger than the one that was signed by the sender\\n    ///  - the transaction must have enough gas to run all internal transactions if they use all gas available to them\\n    ///  - the Paymaster must have enough balance to pay the Relay Worker for the scenario when all gas is spent\\n    ///\\n    /// If all conditions are met, the call will be relayed and the recipient charged.\\n    ///\\n    /// Arguments:\\n    /// @param relayRequest - all details of the requested relayed call\\n    /// @param signature - client's EIP-712 signature over the relayRequest struct\\n    /// @param approvalData: dapp-specific data forwarded to preRelayedCall.\\n    ///        This value is *not* verified by the Hub. For example, it can be used to pass a signature to the Paymaster\\n    /// @param externalGasLimit - the value passed as gasLimit to the transaction.\\n    ///\\n    /// Emits a TransactionRelayed event.\\n    function relayCall(\\n        uint paymasterMaxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint externalGasLimit\\n    )\\n    external\\n    returns (bool paymasterAccepted, bytes memory returnValue);\\n\\n    function penalize(address relayWorker, address payable beneficiary) external;\\n\\n    /// The fee is expressed as a base fee in wei plus percentage on actual charge.\\n    /// E.g. a value of 40 stands for a 40% fee, so the recipient will be\\n    /// charged for 1.4 times the spent amount.\\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\\n\\n    /* getters */\\n\\n    /// Returns the stake manager of this RelayHub.\\n    function stakeManager() external view returns(IStakeManager);\\n    function penalizer() external view returns(address);\\n\\n    /// Returns an account's deposits. It can be either a deposit of a paymaster, or a revenue of a relay manager.\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    // Minimum stake a relay can have. An attack to the network will never cost less than half this value.\\n    function minimumStake() external view returns (uint256);\\n\\n    // Minimum unstake delay blocks of a relay manager's stake on the StakeManager\\n    function minimumUnstakeDelay() external view returns (uint256);\\n\\n    // Maximum funds that can be deposited at once. Prevents user error by disallowing large deposits.\\n    function maximumRecipientDeposit() external view returns (uint256);\\n\\n    //gas overhead to calculate gasUseWithoutPost\\n    function postOverhead() external view returns (uint256);\\n\\n    // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\\n    function gasReserve() external view returns (uint256);\\n\\n    // maximum number of worker account allowed per manager\\n    function maxWorkerCount() external view returns (uint256);\\n\\n    function workerToManager(address worker) external view returns(address);\\n\\n    function workerCount(address manager) external view returns(uint256);\\n\\n    function isRelayManagerStaked(address relayManager) external view returns(bool);\\n\\n    /**\\n    * @dev the total gas overhead of relayCall(), before the first gasleft() and after the last gasleft().\\n    * Assume that relay has non-zero balance (costs 15'000 more otherwise).\\n    */\\n\\n    // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\\n    function gasOverhead() external view returns (uint256);\\n\\n    function versionHub() external view returns (string memory);\\n}\\n\\n\",\"keccak256\":\"0xecde689e0b6e313670d3e3ef181981b5aaae85d6c24ae26481a819cc27639d4d\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0xba3e7ee1cdc9567795ea096fad1e464dd16612c638744fb8b0ca1f8aa9ad7e27\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IStakeManager {\\n\\n    /// Emitted when a stake or unstakeDelay are initialized or increased\\n    event StakeAdded(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 stake,\\n        uint256 unstakeDelay\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 withdrawBlock\\n    );\\n\\n    /// Emitted when owner withdraws relayManager funds\\n    event StakeWithdrawn(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when an authorized Relay Hub penalizes a relayManager\\n    event StakePenalized(\\n        address indexed relayManager,\\n        address indexed beneficiary,\\n        uint256 reward\\n    );\\n\\n    event HubAuthorized(\\n        address indexed relayManager,\\n        address indexed relayHub\\n    );\\n\\n    event HubUnauthorized(\\n        address indexed relayManager,\\n        address indexed relayHub,\\n        uint256 removalBlock\\n    );\\n\\n    /// @param stake - amount of ether staked for this relay\\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\\n    /// @param withdrawBlock - first block number 'withdraw' will be callable, or zero if the unlock has not been called\\n    /// @param owner - address that receives revenue and manages relayManager's stake\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelay;\\n        uint256 withdrawBlock;\\n        address payable owner;\\n    }\\n\\n    struct RelayHubInfo {\\n        uint256 removalBlock;\\n    }\\n\\n    /// Put a stake for a relayManager and set its unstake delay.\\n    /// If the entry does not exist, it is created, and the caller of this function becomes its owner.\\n    /// If the entry already exists, only the owner can call this function.\\n    /// @param relayManager - address that represents a stake entry and controls relay registrations on relay hubs\\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\\n    function stakeForAddress(address relayManager, uint256 unstakeDelay) external payable;\\n\\n    function unlockStake(address relayManager) external;\\n\\n    function withdrawStake(address relayManager) external;\\n\\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    function authorizeHubByManager(address relayHub) external;\\n\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    function unauthorizeHubByManager(address relayHub) external;\\n\\n    function isRelayManagerStaked(address relayManager, address relayHub, uint256 minAmount, uint256 minUnstakeDelay)\\n    external\\n    view\\n    returns (bool);\\n\\n    /// Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns half of stake on the way.\\n    /// @param relayManager - entry to penalize\\n    /// @param beneficiary - address that receives half of the penalty amount\\n    /// @param amount - amount to withdraw from stake\\n    function penalizeRelayManager(address relayManager, address payable beneficiary, uint256 amount) external;\\n\\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo);\\n\\n    function versionSM() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8f3475fc1af48468ffa443e2e008f01687437c59668c9b5dbfbf1bfe54510d9\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/GsnEip712Library.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/GsnTypes.sol\\\";\\nimport \\\"../interfaces/IRelayRecipient.sol\\\";\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\nimport \\\"./GsnUtils.sol\\\";\\n\\n/**\\n * Bridge Library to map GSN RelayRequest into a call of a Forwarder\\n */\\nlibrary GsnEip712Library {\\n    // maximum length of return value/revert reason for 'execute' method. Will truncate result if exceeded.\\n    uint256 private constant MAX_RETURN_SIZE = 1024;\\n\\n    //copied from Forwarder (can't reference string constants even from another library)\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data\\\";\\n\\n    bytes public constant RELAYDATA_TYPE = \\\"RelayData(uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\\\";\\n\\n    string public constant RELAY_REQUEST_NAME = \\\"RelayRequest\\\";\\n    string public constant RELAY_REQUEST_SUFFIX = string(abi.encodePacked(\\\"RelayData relayData)\\\", RELAYDATA_TYPE));\\n\\n    bytes public constant RELAY_REQUEST_TYPE = abi.encodePacked(\\n        RELAY_REQUEST_NAME,\\\"(\\\",GENERIC_PARAMS,\\\",\\\", RELAY_REQUEST_SUFFIX);\\n\\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(RELAYDATA_TYPE);\\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(RELAY_REQUEST_TYPE);\\n\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n    function splitRequest(\\n        GsnTypes.RelayRequest calldata req\\n    )\\n    internal\\n    pure\\n    returns (\\n        IForwarder.ForwardRequest memory forwardRequest,\\n        bytes memory suffixData\\n    ) {\\n        forwardRequest = IForwarder.ForwardRequest(\\n            req.request.from,\\n            req.request.to,\\n            req.request.value,\\n            req.request.gas,\\n            req.request.nonce,\\n            req.request.data\\n        );\\n        suffixData = abi.encode(\\n            hashRelayData(req.relayData));\\n    }\\n\\n    //verify that the recipient trusts the given forwarder\\n    // MUST be called by paymaster\\n    function verifyForwarderTrusted(GsnTypes.RelayRequest calldata relayRequest) internal view {\\n        (bool success, bytes memory ret) = relayRequest.request.to.staticcall(\\n            abi.encodeWithSelector(\\n                IRelayRecipient.isTrustedForwarder.selector, relayRequest.relayData.forwarder\\n            )\\n        );\\n        require(success, \\\"isTrustedForwarder reverted\\\");\\n        require(ret.length == 32, \\\"isTrustedForwarder returned invalid response\\\");\\n        require(abi.decode(ret, (bool)), \\\"invalid forwarder for recipient\\\");\\n    }\\n\\n    function verifySignature(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\\n        (IForwarder.ForwardRequest memory forwardRequest, bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\\n        IForwarder forwarder = IForwarder(payable(relayRequest.relayData.forwarder));\\n        forwarder.verify(forwardRequest, domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature);\\n    }\\n\\n    function verify(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\\n        verifyForwarderTrusted(relayRequest);\\n        verifySignature(relayRequest, signature);\\n    }\\n\\n    function execute(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal returns (bool forwarderSuccess, bool callSuccess, bytes memory ret) {\\n        (IForwarder.ForwardRequest memory forwardRequest, bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\\n        /* solhint-disable-next-line avoid-low-level-calls */\\n        (forwarderSuccess, ret) = relayRequest.relayData.forwarder.call(\\n            abi.encodeWithSelector(IForwarder.execute.selector,\\n            forwardRequest, domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature\\n        ));\\n        if ( forwarderSuccess ) {\\n\\n          //decode return value of execute:\\n          (callSuccess, ret) = abi.decode(ret, (bool, bytes));\\n        }\\n        truncateInPlace(ret);\\n    }\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data) internal pure {\\n        MinLibBytes.truncateInPlace(data, MAX_RETURN_SIZE);\\n    }\\n\\n    function domainSeparator(address forwarder) internal view returns (bytes32) {\\n        return hashDomain(EIP712Domain({\\n            name : \\\"GSN Relayed Transaction\\\",\\n            version : \\\"2\\\",\\n            chainId : getChainID(),\\n            verifyingContract : forwarder\\n            }));\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function hashDomain(EIP712Domain memory req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                EIP712DOMAIN_TYPEHASH,\\n                keccak256(bytes(req.name)),\\n                keccak256(bytes(req.version)),\\n                req.chainId,\\n                req.verifyingContract));\\n    }\\n\\n    function hashRelayData(GsnTypes.RelayData calldata req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                RELAYDATA_TYPEHASH,\\n                req.gasPrice,\\n                req.pctRelayFee,\\n                req.baseRelayFee,\\n                req.relayWorker,\\n                req.paymaster,\\n                req.forwarder,\\n                keccak256(req.paymasterData),\\n                req.clientId\\n            ));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xa1db7951f8b4eb65773301b556b7c92b01a42ca79f2048673a8fd144dcbf54c6\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/GsnUtils.sol\":{\"content\":\"/* solhint-disable no-inline-assembly */\\n// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../utils/MinLibBytes.sol\\\";\\n\\nlibrary GsnUtils {\\n\\n    /**\\n     * extract method sig from encoded function call\\n     */\\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\\n        return MinLibBytes.readBytes4(msgData, 0);\\n    }\\n\\n    /**\\n     * extract parameter from encoded-function block.\\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\\n     * the return value should be casted to the right type (uintXXX/bytesXXX/address/bool/enum)\\n     */\\n    function getParam(bytes memory msgData, uint index) internal pure returns (uint) {\\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\\n    }\\n\\n    //re-throw revert with the same revert data.\\n    function revertWithData(bytes memory data) internal pure {\\n        assembly {\\n            revert(add(data,32), mload(data))\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfce546e18c85ff3e7f0c2f01b14f0c3e846239ce1038ea130c037bb6e8b543ce\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/MinLibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// minimal bytes manipulation required by GSN\\n// a minimal subset from 0x/LibBytes\\n/* solhint-disable no-inline-assembly */\\npragma solidity 0.8.0;\\n\\nlibrary MinLibBytes {\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\\n        if (data.length > maxlen) {\\n            assembly { mstore(data, maxlen) }\\n        }\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        require (b.length >= index + 20, \\\"readAddress: data too short\\\");\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        require(b.length >= index + 32, \\\"readBytes32: data too short\\\" );\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        require(b.length >= index + 4, \\\"readBytes4: data too short\\\");\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x74f6a37844ff7aca8002f3e38a5dd7a1c79784c5e51980fd8df373fd82f241fa\",\"license\":\"MIT\"},\"src/metatx/CreatonPaymaster.sol\":{\"content\":\"pragma solidity 0.8.0;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\nimport \\\"../dependency/gsn/contracts/forwarder/IForwarder.sol\\\";\\nimport \\\"../dependency/gsn/contracts/BasePaymaster.sol\\\";\\n\\ncontract CreatonPaymaster is BasePaymaster {\\n\\n    address public creatonAdmin;\\n    address public token;\\n    address public stakingContract;\\n\\tmapping(address=>bool) public targets ;   // The target contracts we are willing to pay for\\n\\n    function addCreatorContract(address creatorContract) public onlyAdmin {\\n        targets[creatorContract] = true;\\n    }\\n\\n    function addContract(address _contract) public onlyOwner {\\n        targets[_contract] = true;\\n    }\\n\\n    function setAdmin(address _admin) public onlyOwner {\\n        creatonAdmin = _admin;\\n        targets[creatonAdmin] = true;\\n    }\\n\\n    constructor (\\n        address _token,\\n        address _stakingContract\\n    ) public  {\\n        token = _token;\\n        stakingContract = _stakingContract;\\n    }\\n\\n\\tfunction preRelayedCall(\\n\\t\\tGsnTypes.RelayRequest calldata relayRequest,\\n\\t\\tbytes calldata signature,\\n\\t\\tbytes calldata approvalData,\\n\\t\\tuint256 maxPossibleGas\\n\\t) external override virtual\\n\\treturns (bytes memory context, bool) {\\n\\t\\t_verifyForwarder(relayRequest);\\n\\t\\t(signature, approvalData, maxPossibleGas);\\n\\n        if (relayRequest.request.to == token){\\n            bytes4 sig = abi.decode(relayRequest.request.data[:4], (bytes4));\\n            require( sig == bytes4(keccak256(\\\"send(address,uint256,bytes)\\\")));\\n            address recipient;\\n            (recipient, ,) = abi.decode(msg.data[4:], (address,uint256,bytes));\\n            require(recipient == stakingContract, \\\"Creaton Paymaster: Only free staking is supported\\\");\\n            return (new bytes(0), false);\\n        }\\n\\n\\t\\trequire(targets[relayRequest.request.to], \\\"Creaton Paymaster: Destination contract not supported\\\");\\n        return (new bytes(0), false);\\n\\t}\\n\\n\\tfunction postRelayedCall(\\n\\t\\tbytes calldata context,\\n\\t\\tbool success,\\n\\t\\tuint256 gasUseWithoutPost,\\n\\t\\tGsnTypes.RelayData calldata relayData\\n\\t) external override virtual {\\n        (context, success, gasUseWithoutPost, relayData);\\n\\t}\\n\\n    function versionPaymaster() external virtual view override returns (string memory) {\\n        return \\\"2.1.0\\\";\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == creatonAdmin, \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5c4c012682ac8dba4baa8e501fcbf5e209f30bf9d8295150929dd953122d5b62\",\"license\":\"MIT OR Apache-2.0\"},\"src/utils/Int96SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @title Int96SafeMath\\n * @dev Int96 math operations with safety checks that revert on error.\\n */\\nlibrary Int96SafeMath {\\n    int96 constant private _INT96_MIN = -2**95;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int96 a, int96 b) internal pure returns (int96) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT96_MIN));\\n\\n        int96 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int96 a, int96 b) internal pure returns (int96) {\\n        require(b != 0, \\\"Int96SafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT96_MIN), \\\"Int96SafeMath: division overflow\\\");\\n        int96 c = a / b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int96 a, int96 b) internal pure returns (int96) {\\n        int96 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int96 a, int96 b) internal pure returns (int96) {\\n        int96 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xce7f330279f23276b1bda5f5ef1830e8b5ad21a36615d03b7b409a29ddf32794\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b506143a9806100206000396000f3fe6080604052600436106101b05760003560e01c80637da0a877116100ec578063b73410d11161008a578063cbd5497c11610064578063cbd5497c14610470578063d86ed3e514610490578063f851a440146104b0578063f9680f82146104c5576101b7565b8063b73410d114610428578063bdc8e54c14610448578063ca518ab01461045d576101b7565b80639e87ad21116100c65780639e87ad21146103b3578063a0d2aea3146103d3578063a0ef91df146103f3578063b234545814610408576101b7565b80637da0a87714610389578063884d1f401461026357806388f9c9461461039e576101b7565b80633d3acb1f11610159578063572b6c0511610133578063572b6c05146102fa5780635745ae28146103275780635f9e7d77146103545780637284e41614610374576101b7565b80633d3acb1f146102a5578063486ff0cd146102c557806353c11f99146102da576101b7565b8063230dbd291161018a578063230dbd291461023657806330d9c9151461026357806332725c8914610283576101b7565b806302d05d3f146101bc578063123ff984146101e757806317e703ab14610214576101b7565b366101b757005b600080fd5b3480156101c857600080fd5b506101d16104da565b6040516101de9190613874565b60405180910390f35b3480156101f357600080fd5b506102076102023660046135c2565b6104e9565b6040516101de9190613ae9565b34801561022057600080fd5b50610229610510565b6040516101de9190614029565b34801561024257600080fd5b506102566102513660046134df565b610517565b6040516101de9190613962565b34801561026f57600080fd5b5061025661027e366004613443565b61056b565b34801561028f57600080fd5b506102a361029e3660046132df565b610601565b005b3480156102b157600080fd5b506102a36102c03660046135fa565b610718565b3480156102d157600080fd5b506102566108cc565b3480156102e657600080fd5b506102566102f53660046134df565b610903565b34801561030657600080fd5b5061031a6103153660046131c5565b61099f565b6040516101de9190613943565b34801561033357600080fd5b506103476103423660046131c5565b6109bc565b6040516101de9190613adb565b34801561036057600080fd5b5061025661036f366004613443565b6109d1565b34801561038057600080fd5b50610256610a75565b34801561039557600080fd5b506101d1610b03565b3480156103aa57600080fd5b506101d1610b18565b3480156103bf57600080fd5b506102a36103ce3660046131c5565b610b27565b3480156103df57600080fd5b506102a36103ee3660046131c5565b610be6565b3480156103ff57600080fd5b506102a3610c88565b34801561041457600080fd5b506102a36104233660046137c0565b610d04565b34801561043457600080fd5b506102a36104433660046132df565b610f9d565b34801561045457600080fd5b50610207611100565b6102a361046b3660046131fd565b611109565b34801561047c57600080fd5b506102a361048b36600461362d565b6114dc565b34801561049c57600080fd5b506102566104ab3660046134df565b611698565b3480156104bc57600080fd5b506101d16116d3565b3480156104d157600080fd5b506102a36116e2565b6005546001600160a01b031681565b600061050760646104fe600b86900b8561178d565b600b0b906117fb565b90505b92915050565b600b545b90565b6001546060906001600160a01b0316331461054d5760405162461bcd60e51b815260040161054490613e12565b60405180910390fd5b61055b83838b8b8989611876565b90505b9998505050505050505050565b6001546060906001600160a01b031633146105985760405162461bcd60e51b815260040161054490613e12565b87876105a382611c87565b6105bf5760405162461bcd60e51b815260040161054490613fcc565b6105c881611c9b565b6105e45760405162461bcd60e51b815260040161054490613e6f565b505060408051600081526020810190915298975050505050505050565b6005546001600160a01b0316610615611d36565b6001600160a01b03161461063b5760405162461bcd60e51b815260040161054490613b43565b60005b8151811015610714576001600a600084848151811061066d57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1660048111156106b357634e487b7160e01b600052602160045260246000fd5b146106d05760405162461bcd60e51b815260040161054490613b7a565b6107028282815181106106f357634e487b7160e01b600052603260045260246000fd5b60200260200101516002611d86565b8061070c816142e4565b91505061063e565b5050565b6000610722611d36565b6006546040517f770031ab0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063770031ab9061076c908490600401613874565b60206040518083038186803b15801561078457600080fd5b505afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc91906133ae565b6107d85760405162461bcd60e51b815260040161054490613ecc565b6001600160a01b0381166000908152600a602052604081205460ff16600481111561081357634e487b7160e01b600052602160045260246000fd5b146108305760405162461bcd60e51b815260040161054490613f95565b604080516020810190915280600190526001600160a01b0382166000908152600a6020526040902081518154829060ff1916600183600481111561088457634e487b7160e01b600052602160045260246000fd5b02179055509050507fa7e352d2ea99326930f137ed355adf9bf95f5a63d3cc6367c83aee21acc7f25c818360016040516108c0939291906138aa565b60405180910390a15050565b60408051808201909152600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290565b6001546060906001600160a01b031633146109305760405162461bcd60e51b815260040161054490613e12565b600061093e85870187613392565b905080156109865783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092945061055e9350505050565b6109908484611dff565b9b9a5050505050505050505050565b6000546001600160a01b038281166201000090920416145b919050565b600a6020526000908152604090205460ff1681565b6001546060906001600160a01b031633146109fe5760405162461bcd60e51b815260040161054490613e12565b610a0788611c87565b1580610a195750610a1787611c9b565b155b15610a46576001604051602001610a309190613943565b6040516020818303038152906040529050610a6a565b6000604051602001610a589190613943565b60405160208183030381529060405290505b979650505050505050565b60088054610a82906142a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610aae906142a9565b8015610afb5780601f10610ad057610100808354040283529160200191610afb565b820191906000526020600020905b815481529060010190602001808311610ade57829003601f168201915b505050505081565b6000546201000090046001600160a01b031681565b600c546001600160a01b031681565b6005546001600160a01b0316610b3b611d36565b6001600160a01b031614610b615760405162461bcd60e51b815260040161054490613b43565b6001600160a01b0381166000908152600a602052604081205460ff166004811115610b9c57634e487b7160e01b600052602160045260246000fd5b1415610bba5760405162461bcd60e51b815260040161054490613da4565b610bc5816000611d86565b6001600160a01b03166000908152600a60205260409020805460ff19169055565b6005546001600160a01b0316610bfa611d36565b6001600160a01b031614610c205760405162461bcd60e51b815260040161054490613b43565b60016001600160a01b0382166000908152600a602052604090205460ff166004811115610c5d57634e487b7160e01b600052602160045260246000fd5b14610c7a5760405162461bcd60e51b815260040161054490613d6d565b610c85816002611d86565b50565b6000336001600160a01b031647604051610ca19061384b565b60006040518083038185875af1925050503d8060008114610cde576040519150601f19603f3d011682016040523d82523d6000602084013e610ce3565b606091505b5050905080610c855760405162461bcd60e51b815260040161054490613c0e565b600c546001600160a01b0316610d1957600080fd5b600c546040517f4f558e790000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634f558e7990610d62908590600401614029565b60206040518083038186803b158015610d7a57600080fd5b505afa158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db291906133ae565b610dbb57600080fd5b6000610dc5611d36565b6006546040517f770031ab0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063770031ab90610e0f908490600401613874565b60206040518083038186803b158015610e2757600080fd5b505afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f91906133ae565b610e7b5760405162461bcd60e51b815260040161054490613bb1565b60016000848152600d602052604090205460ff166001811115610eae57634e487b7160e01b600052602160045260246000fd5b1415610f0e5760046001600160a01b0382166000908152600a602052604090205460ff166004811115610ef157634e487b7160e01b600052602160045260246000fd5b14610f0e5760405162461bcd60e51b815260040161054490613f29565b600382108015610f1c575060015b610f385760405162461bcd60e51b815260040161054490613cd9565b6000826002811115610f5a57634e487b7160e01b600052602160045260246000fd5b90507f594c74d47bf317d4fc72fc016e89d227fb8c8d601c730b9c5aed1733d5afcf67828583604051610f8f9392919061390e565b60405180910390a150505050565b6005546001600160a01b0316610fb1611d36565b6001600160a01b031614610fd75760405162461bcd60e51b815260040161054490613b43565b60005b8151811015610714576000600a600084848151811061100957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16600481111561104f57634e487b7160e01b600052602160045260246000fd5b141561106d5760405162461bcd60e51b815260040161054490613da4565b61109f82828151811061109057634e487b7160e01b600052603260045260246000fd5b60200260200101516000611d86565b600a60008383815181106110c357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169055806110f8816142e4565b915050610fda565b600954600b0b81565b600054610100900460ff1680611122575060005460ff16155b61113e5760405162461bcd60e51b815260040161054490613d10565b600054610100900460ff16158015611169576000805460ff1961ff0019909116610100171660011790555b6004805473ffffffffffffffffffffffffffffffffffffffff1916331790556001600160a01b038a166111ac57634e487b7160e01b600052600160045260246000fd5b6001600160a01b0389166111d057634e487b7160e01b600052600160045260246000fd5b6001600160a01b0388166111f457634e487b7160e01b600052600160045260246000fd5b600180546001600160a01b03808d1673ffffffffffffffffffffffffffffffffffffffff1992831617808455600280548e8416908516179055600380548d84169416939093179092556040517fad3915c800000000000000000000000000000000000000000000000000000000815291169063ad3915c89061127a908490600401614029565b600060405180830381600087803b15801561129457600080fd5b505af11580156112a8573d6000803e3d6000fd5b50506005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038c16179055505086516112e79060089060208a0190612ffa565b5060098054600b88810b6bffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffff000000000000000000000000909216919091179182905561134a9162278d00916104fe91810b900b670de0b6b3a764000061178d565b60098054600b9290920b6bffffffffffffffffffffffff166c01000000000000000000000000027fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff909216919091179055600480546006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790819055604080517fd63843cd0000000000000000000000000000000000000000000000000000000081529051919092169263d63843cd92808201926020929091829003018186803b15801561141b57600080fd5b505afa15801561142f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145391906131e1565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff1662010000928816929092029190911790556114bd8484612189565b5080156114d0576000805461ff00191690555b50505050505050505050565b6005546001600160a01b03166114f0611d36565b6001600160a01b0316146115165760405162461bcd60e51b815260040161054490613b43565b600c546001600160a01b031661152b57600080fd5b600081600181111561154d57634e487b7160e01b600052602160045260246000fd5b14806115785750600181600181111561157657634e487b7160e01b600052602160045260246000fd5b145b61158157600080fd5b600c546005546040517fd0def5210000000000000000000000000000000000000000000000000000000081526000926001600160a01b039081169263d0def521926115d492909116908890600401613888565b602060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162691906133ca565b6000818152600d602052604090208054919250839160ff19166001838181111561166057634e487b7160e01b600052602160045260246000fd5b02179055507f56e18d3f05fcdacbb5f30945553714915803451f602499a7a4d9d278428490ed818484604051610f8f93929190614032565b6001546060906001600160a01b031633146116c55760405162461bcd60e51b815260040161054490613e12565b61055b83838b8b8989612299565b6004546001600160a01b031681565b60006116ec611d36565b905060016001600160a01b0382166000908152600a602052604090205460ff16600481111561172b57634e487b7160e01b600052602160045260246000fd5b1480611771575060026001600160a01b0382166000908152600a602052604090205460ff16600481111561176f57634e487b7160e01b600052602160045260246000fd5b145b610bba5760405162461bcd60e51b815260040161054490613c45565b600082600b0b600014156117a35750600061050a565b82600b0b6000191480156117c75750600b82900b6b7fffffffffffffffffffffff19145b156117d157600080fd5b60006117dd838561416e565b9050600b83900b6117ee858361411f565b600b0b1461050757600080fd5b600081600b0b600014156118215760405162461bcd60e51b815260040161054490613ddb565b81600b0b6000191480156118455750600b83900b6b7fffffffffffffffffffffff19145b156118625760405162461bcd60e51b815260040161054490613f60565b600061186e838561411f565b949350505050565b6003546040517faabd26680000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b038881169263aabd2668926118c992909116908990600401613ac2565b60806040518083038186803b1580156118e157600080fd5b505afa1580156118f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119199190613783565b50509150506009600c9054906101000a9004600b0b600b0b81600b0b12156040518060400160405280602081526020017f5375706572666c7569643a20666c6f772072617465206e6f7420656e6f7567688152509061198b5760405162461bcd60e51b81526004016105449190613962565b5060025460035460405163e8e7e2d160e01b81526000926001600160a01b039081169263e8e7e2d1926119c692909116903090600401613a12565b60206040518083038186803b1580156119de57600080fd5b505afa1580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1691906135a6565b90506000611aa482600660009054906101000a90046001600160a01b03166001600160a01b031663996a81d66040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6c57600080fd5b505afa158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020291906135a6565b90506000611ab6600b84900b83612797565b600254600354600554604051631cd43d1160e31b81529394506000936001600160a01b039384169363e6a1e88893611afa9390821692309290911690600401613a2c565b60806040518083038186803b158015611b1257600080fd5b505afa158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4a9190613783565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b3916004808301926020929190829003018186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be391906131e1565b6040518463ffffffff1660e01b8152600401611c0193929190613a2c565b60806040518083038186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c519190613783565b5050915050611c768d8d8685611c6791906140af565b611c7187866140af565b6127e7565b9d9c50505050505050505050505050565b6003546001600160a01b0390811691161490565b60007fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3826001600160a01b0316637730599e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf757600080fd5b505afa158015611d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2f91906133ca565b1492915050565b600060183610801590611d4d5750611d4d3361099f565b15611d7f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610514565b5033610514565b6001600160a01b0382166000908152600a60205260409020805482919060ff19166001836004811115611dc957634e487b7160e01b600052602160045260246000fd5b02179055507fa7e352d2ea99326930f137ed355adf9bf95f5a63d3cc6367c83aee21acc7f25c82826040516108c09291906138db565b6001546040517f3f6c923a0000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b0390911690633f6c923a90611e50908790879060040161394e565b60006040518083038186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ea491908101906136a5565b606001519050600b5460011415611ec657611ebf8484612ae9565b9150612179565b600b54156121795760025460035460405163e8e7e2d160e01b81526000926001600160a01b039081169263e8e7e2d192611f0892909116903090600401613a12565b60206040518083038186803b158015611f2057600080fd5b505afa158015611f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5891906135a6565b90506000611fae82600660009054906101000a90046001600160a01b03166001600160a01b031663996a81d66040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6c57600080fd5b90506000611fc0600b84900b83612797565b600254600354600554604051631cd43d1160e31b81529394506000936001600160a01b039384169363e6a1e888936120049390821692309290911690600401613a2c565b60806040518083038186803b15801561201c57600080fd5b505afa158015612030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120549190613783565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b3916004808301926020929190829003018186803b1580156120b557600080fd5b505afa1580156120c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ed91906131e1565b6040518463ffffffff1660e01b815260040161210b93929190613a2c565b60806040518083038186803b15801561212357600080fd5b505afa158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b9190613783565b505091505061217189898685611c6791906140af565b965050505050505b61218281612dea565b5092915050565b600c546001600160a01b03161561219f57600080fd5b6007546040517ff99120900000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063f9912090906121ec90859085903090600401613af7565b602060405180830381600087803b15801561220657600080fd5b505af115801561221a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223e91906131e1565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617908190556040517fbb5744448f3e46ab592cb9d22d7bce54500691e81b837c6f1ae8f1bb842eae32926108c0921690613874565b6003546040517faabd26680000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b038881169263aabd2668926122ec92909116908990600401613ac2565b60806040518083038186803b15801561230457600080fd5b505afa158015612318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233c9190613783565b50509150506009600c9054906101000a9004600b0b600b0b81600b0b12156040518060400160405280602081526020017f5375706572666c7569643a20666c6f772072617465206e6f7420656e6f756768815250906123ae5760405162461bcd60e51b81526004016105449190613962565b506001546040517f3f6c923a0000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690633f6c923a906123fb908c908c9060040161394e565b60006040518083038186803b15801561241357600080fd5b505afa158015612427573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261244f91908101906136a5565b9050600260608201516001600160a01b03166000908152600a602052604090205460ff16600481111561249257634e487b7160e01b600052602160045260246000fd5b146124af5760405162461bcd60e51b815260040161054490613ca2565b60025460035460405163e8e7e2d160e01b81526000926001600160a01b039081169263e8e7e2d1926124e992909116903090600401613a12565b60206040518083038186803b15801561250157600080fd5b505afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253991906135a6565b9050600061258f82600660009054906101000a90046001600160a01b03166001600160a01b031663996a81d66040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6c57600080fd5b905060006125a1600b84900b83612797565b9050600b54600014156125c1576125ba8c8c8484612e0e565b955061277b565b600b541561277b57600254600354600554604051631cd43d1160e31b81526000936001600160a01b039081169363e6a1e8889361260993918316923092911690600401613a2c565b60806040518083038186803b15801561262157600080fd5b505afa158015612635573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126599190613783565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b3916004808301926020929190829003018186803b1580156126ba57600080fd5b505afa1580156126ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f291906131e1565b6040518463ffffffff1660e01b815260040161271093929190613a2c565b60806040518083038186803b15801561272857600080fd5b505afa15801561273c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127609190613783565b50509150506127768e8e8685611c6791906140af565b975050505b6127888460600151612fd6565b50505050509695505050505050565b6000806127a48385614209565b9050600083600b0b121580156127c0575083600b0b81600b0b13155b806127de5750600083600b0b1280156127de575083600b0b81600b0b135b61050757600080fd5b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937f50209a6200000000000000000000000000000000000000000000000000000000936128549392831692909116908a9060448101613a8d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b90931690526128d792918a8a60248301613975565b600060405180830381600087803b1580156128f157600080fd5b505af1158015612905573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261292d91908101906133e2565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947f50209a62000000000000000000000000000000000000000000000000000000009481169316916361d027b3916004808301926020929190829003018186803b1580156129af57600080fd5b505afa1580156129c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e791906131e1565b604080516000815260208101909152612a07929190899060448101613a8d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b9093169052612a89929186602482016139ca565b600060405180830381600087803b158015612aa357600080fd5b505af1158015612ab7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612adf91908101906133e2565b5095945050505050565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937fb4b333c60000000000000000000000000000000000000000000000000000000093612b5493928316923092169060448101613a4f565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b9093169052612bd79291888860248301613975565b600060405180830381600087803b158015612bf157600080fd5b505af1158015612c05573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c2d91908101906133e2565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947fb4b333c6000000000000000000000000000000000000000000000000000000009481169330939116916361d027b391600480820192602092909190829003018186803b158015612cb357600080fd5b505afa158015612cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ceb91906131e1565b604080516000815260208101909152612d0a9392919060448101613a4f565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b9093169052612d8c929186602482016139ca565b600060405180830381600087803b158015612da657600080fd5b505af1158015612dba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612de291908101906133e2565b509392505050565b6001600b6000828254612dfd9190614262565b90915550610bc59050816000611d86565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937f62fc305e0000000000000000000000000000000000000000000000000000000093612e7b9392831692909116908a9060448101613a8d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b9093169052612efe92918a8a60248301613975565b600060405180830381600087803b158015612f1857600080fd5b505af1158015612f2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f5491908101906133e2565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947f62fc305e000000000000000000000000000000000000000000000000000000009481169316916361d027b3916004808301926020929190829003018186803b1580156129af57600080fd5b6001600b6000828254612fe99190614107565b90915550610c859050816004611d86565b828054613006906142a9565b90600052602060002090601f016020900481019282613028576000855561306e565b82601f1061304157805160ff191683800117855561306e565b8280016001018555821561306e579182015b8281111561306e578251825591602001919060010190613053565b5061307a92915061307e565b5090565b5b8082111561307a576000815560010161307f565b80356109b781614341565b80516109b781614341565b80517fffffffff00000000000000000000000000000000000000000000000000000000811681146109b757600080fd5b60008083601f8401126130ea578182fd5b50813567ffffffffffffffff811115613101578182fd5b60208301915083602082850101111561311957600080fd5b9250929050565b600082601f830112613130578081fd5b815161314361313e82614087565b61405d565b818152846020838601011115613157578283fd5b61186e826020830160208701614279565b600082601f830112613178578081fd5b813561318661313e82614087565b81815284602083860101111561319a578283fd5b816020850160208301379081016020019190915292915050565b805160ff811681146109b757600080fd5b6000602082840312156131d6578081fd5b813561050781614341565b6000602082840312156131f2578081fd5b815161050781614341565b60008060008060008060008060006101208a8c03121561321b578485fd5b6132248a613093565b985061323260208b01613093565b975061324060408b01613093565b965061324e60608b01613093565b955060808a013567ffffffffffffffff8082111561326a578687fd5b6132768d838e01613168565b965060a08c0135955061328b60c08d01613093565b945060e08c01359150808211156132a0578384fd5b6132ac8d838e01613168565b93506101008c01359150808211156132c2578283fd5b506132cf8c828d01613168565b9150509295985092959850929598565b600060208083850312156132f1578182fd5b823567ffffffffffffffff80821115613308578384fd5b818501915085601f83011261331b578384fd5b81358181111561332d5761332d61432b565b838102915061333d84830161405d565b8181528481019084860184860187018a1015613357578788fd5b8795505b83861015613385578035945061337085614341565b8483526001959095019491860191860161335b565b5098975050505050505050565b6000602082840312156133a3578081fd5b813561050781614356565b6000602082840312156133bf578081fd5b815161050781614356565b6000602082840312156133db578081fd5b5051919050565b600080604083850312156133f4578182fd5b825167ffffffffffffffff8082111561340b578384fd5b61341786838701613120565b9350602085015191508082111561342c578283fd5b5061343985828601613120565b9150509250929050565b600080600080600080600060a0888a03121561345d578081fd5b873561346881614341565b9650602088013561347881614341565b955060408801359450606088013567ffffffffffffffff8082111561349b578283fd5b6134a78b838c016130d9565b909650945060808a01359150808211156134bf578283fd5b506134cc8a828b016130d9565b989b979a50959850939692959293505050565b600080600080600080600080600060c08a8c0312156134fc578283fd5b893561350781614341565b985060208a013561351781614341565b975060408a0135965060608a013567ffffffffffffffff8082111561353a578485fd5b6135468d838e016130d9565b909850965060808c013591508082111561355e578485fd5b61356a8d838e016130d9565b909650945060a08c0135915080821115613582578384fd5b5061358f8c828d016130d9565b915080935050809150509295985092959850929598565b6000602082840312156135b7578081fd5b815161050781614364565b600080604083850312156135d4578182fd5b82356135df81614364565b915060208301356135ef81614364565b809150509250929050565b60006020828403121561360b578081fd5b813567ffffffffffffffff811115613621578182fd5b61186e84828501613168565b600080600060608486031215613641578081fd5b833567ffffffffffffffff80821115613658578283fd5b61366487838801613168565b94506020860135915080821115613679578283fd5b5061368686828701613168565b92505060408401356002811061369a578182fd5b809150509250925092565b6000602082840312156136b6578081fd5b815167ffffffffffffffff808211156136cd578283fd5b81840191506101208083870312156136e3578384fd5b6136ec8161405d565b90506136f7836131b4565b8152613705602084016131b4565b6020820152604083015160408201526137206060840161309e565b6060820152613731608084016130a9565b608082015260a083015182811115613747578485fd5b61375387828601613120565b60a08301525060c0838101519082015260e080840151908201526101009283015192810192909252509392505050565b60008060008060808587031215613798578182fd5b8451935060208501516137aa81614364565b6040860151606090960151949790965092505050565b600080604083850312156137d2578182fd5b50508035926020909101359150565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452613823816020860160208601614279565b601f01601f19169290920160200192915050565b6005811061384757613847614315565b9052565b7f4e6f742061646d696e0000000000000000000000000000000000000000000000815260090190565b6001600160a01b0391909116815260200190565b60006001600160a01b03841682526040602083015261186e604083018461380b565b60006001600160a01b0385168252606060208301526138cc606083018561380b565b905061186e6040830184613837565b6001600160a01b0383168152606060208201819052600090820152608081016139076040830184613837565b9392505050565b6001600160a01b038416815260208101839052606081016003831061393557613935614315565b826040830152949350505050565b901515815260200190565b60006020825261186e6020830184866137e1565b600060208252610507602083018461380b565b60006001600160a01b038716825260806020830152613997608083018761380b565b82810360408401526139a9818761380b565b905082810360608401526139be8185876137e1565b98975050505050505050565b60006001600160a01b0386168252608060208301526139ec608083018661380b565b82810360408401526139fe818661380b565b90508281036060840152610a6a818561380b565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b60006001600160a01b038087168352808616602084015280851660408401525060806060830152613a83608083018461380b565b9695505050505050565b60006001600160a01b03808716835280861660208401525083600b0b604083015260806060830152613a83608083018461380b565b6001600160a01b03929092168252602082015260400190565b6020810161050a8284613837565b600b9190910b815260200190565b600060808252613b0a608083018661380b565b8281036020840152613b1c818661380b565b8381036040850152918252506001600160a01b039290921660609091015260200192915050565b6020808252600f908201527f4e6f74207468652063726561746f720000000000000000000000000000000000604082015260600190565b60208082526019908201527f4e6f20537562736372697074696f6e2052657175657374656400000000000000604082015260600190565b60208082526028908201527f596f75206e65656420746f207369676e7570206265666f7265206c696b696e6760408201527f20636f6e74656e74000000000000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f4e6f2062616c616e636500000000000000000000000000000000000000000000604082015260600190565b60208082526021908201527f4e6f20537562736372697074696f6e205265717565737420746f205265766f6b60408201527f6500000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f537562736372697074696f6e206e6f74204772616e7465640000000000000000604082015260600190565b60208082526015908201527f496e76616c696420617070726f76616c20656e756d0000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526019908201527f4e6f20737562736372697074696f6e2072657175657374656400000000000000604082015260600190565b6020808252601e908201527f43616e277420426c6f636b20556e737562736372696265642055736572730000604082015260600190565b6020808252601f908201527f496e743936536166654d6174683a206469766973696f6e206279207a65726f00604082015260600190565b60208082526026908201527f4c6f747465727953757065724170703a20737570706f7274206f6e6c79206f6e60408201527f6520686f73740000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f4c6f747465727953757065724170703a206f6e6c79204346417631207375707060408201527f6f72746564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f596f75206e65656420746f207369676e757020696e2043726561746f6e20666960408201527f7273740000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f4e6f742073756273637269626564000000000000000000000000000000000000604082015260600190565b6020808252818101527f496e743936536166654d6174683a206469766973696f6e206f766572666c6f77604082015260600190565b6020808252601e908201527f537562736372697074696f6e20416c7265616479205265717565737465640000604082015260600190565b60208082526023908201527f4c6f747465727953757065724170703a206e6f7420616363657074656420746f60408201527f6b656e0000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60008482526060602083015261404b606083018561380b565b90506002831061393557613935614315565b60405181810167ffffffffffffffff8111828210171561407f5761407f61432b565b604052919050565b600067ffffffffffffffff8211156140a1576140a161432b565b50601f01601f191660200190565b600081600b0b83600b0b828212826b7fffffffffffffffffffffff038213811516156140dd576140dd6142ff565b826b7fffffffffffffffffffffff190382128116156140fe576140fe6142ff565b50019392505050565b6000821982111561411a5761411a6142ff565b500190565b600081600b0b83600b0b8061414257634e487b7160e01b83526012600452602483fd5b60001981146b7fffffffffffffffffffffff1983141615614165576141656142ff565b90059392505050565b600081600b0b83600b0b6b7fffffffffffffffffffffff838213848413838304851182821616156141a1576141a16142ff565b6b7fffffffffffffffffffffff19868512868205861281841616156141c8576141c86142ff565b8787129250858205871284841616156141e3576141e36142ff565b858505871281841616156141f9576141f96142ff565b5050509290910295945050505050565b600081600b0b83600b0b828112816b7fffffffffffffffffffffff1901831281151615614238576142386142ff565b816b7fffffffffffffffffffffff018313811615614258576142586142ff565b5090039392505050565b600082821015614274576142746142ff565b500390565b60005b8381101561429457818101518382015260200161427c565b838111156142a3576000848401525b50505050565b6002810460018216806142bd57607f821691505b602082108114156142de57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156142f8576142f86142ff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c8557600080fd5b8015158114610c8557600080fd5b80600b0b8114610c8557600080fdfea26469706673582212205cb6c2d9c7f3dd7f3d9c5095bba14292c04f93b1fb862510188a0b453e612eca64736f6c63430008000033",
    "deployedBytecode": "0x6080604052600436106101b05760003560e01c80637da0a877116100ec578063b73410d11161008a578063cbd5497c11610064578063cbd5497c14610470578063d86ed3e514610490578063f851a440146104b0578063f9680f82146104c5576101b7565b8063b73410d114610428578063bdc8e54c14610448578063ca518ab01461045d576101b7565b80639e87ad21116100c65780639e87ad21146103b3578063a0d2aea3146103d3578063a0ef91df146103f3578063b234545814610408576101b7565b80637da0a87714610389578063884d1f401461026357806388f9c9461461039e576101b7565b80633d3acb1f11610159578063572b6c0511610133578063572b6c05146102fa5780635745ae28146103275780635f9e7d77146103545780637284e41614610374576101b7565b80633d3acb1f146102a5578063486ff0cd146102c557806353c11f99146102da576101b7565b8063230dbd291161018a578063230dbd291461023657806330d9c9151461026357806332725c8914610283576101b7565b806302d05d3f146101bc578063123ff984146101e757806317e703ab14610214576101b7565b366101b757005b600080fd5b3480156101c857600080fd5b506101d16104da565b6040516101de9190613874565b60405180910390f35b3480156101f357600080fd5b506102076102023660046135c2565b6104e9565b6040516101de9190613ae9565b34801561022057600080fd5b50610229610510565b6040516101de9190614029565b34801561024257600080fd5b506102566102513660046134df565b610517565b6040516101de9190613962565b34801561026f57600080fd5b5061025661027e366004613443565b61056b565b34801561028f57600080fd5b506102a361029e3660046132df565b610601565b005b3480156102b157600080fd5b506102a36102c03660046135fa565b610718565b3480156102d157600080fd5b506102566108cc565b3480156102e657600080fd5b506102566102f53660046134df565b610903565b34801561030657600080fd5b5061031a6103153660046131c5565b61099f565b6040516101de9190613943565b34801561033357600080fd5b506103476103423660046131c5565b6109bc565b6040516101de9190613adb565b34801561036057600080fd5b5061025661036f366004613443565b6109d1565b34801561038057600080fd5b50610256610a75565b34801561039557600080fd5b506101d1610b03565b3480156103aa57600080fd5b506101d1610b18565b3480156103bf57600080fd5b506102a36103ce3660046131c5565b610b27565b3480156103df57600080fd5b506102a36103ee3660046131c5565b610be6565b3480156103ff57600080fd5b506102a3610c88565b34801561041457600080fd5b506102a36104233660046137c0565b610d04565b34801561043457600080fd5b506102a36104433660046132df565b610f9d565b34801561045457600080fd5b50610207611100565b6102a361046b3660046131fd565b611109565b34801561047c57600080fd5b506102a361048b36600461362d565b6114dc565b34801561049c57600080fd5b506102566104ab3660046134df565b611698565b3480156104bc57600080fd5b506101d16116d3565b3480156104d157600080fd5b506102a36116e2565b6005546001600160a01b031681565b600061050760646104fe600b86900b8561178d565b600b0b906117fb565b90505b92915050565b600b545b90565b6001546060906001600160a01b0316331461054d5760405162461bcd60e51b815260040161054490613e12565b60405180910390fd5b61055b83838b8b8989611876565b90505b9998505050505050505050565b6001546060906001600160a01b031633146105985760405162461bcd60e51b815260040161054490613e12565b87876105a382611c87565b6105bf5760405162461bcd60e51b815260040161054490613fcc565b6105c881611c9b565b6105e45760405162461bcd60e51b815260040161054490613e6f565b505060408051600081526020810190915298975050505050505050565b6005546001600160a01b0316610615611d36565b6001600160a01b03161461063b5760405162461bcd60e51b815260040161054490613b43565b60005b8151811015610714576001600a600084848151811061066d57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1660048111156106b357634e487b7160e01b600052602160045260246000fd5b146106d05760405162461bcd60e51b815260040161054490613b7a565b6107028282815181106106f357634e487b7160e01b600052603260045260246000fd5b60200260200101516002611d86565b8061070c816142e4565b91505061063e565b5050565b6000610722611d36565b6006546040517f770031ab0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063770031ab9061076c908490600401613874565b60206040518083038186803b15801561078457600080fd5b505afa158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc91906133ae565b6107d85760405162461bcd60e51b815260040161054490613ecc565b6001600160a01b0381166000908152600a602052604081205460ff16600481111561081357634e487b7160e01b600052602160045260246000fd5b146108305760405162461bcd60e51b815260040161054490613f95565b604080516020810190915280600190526001600160a01b0382166000908152600a6020526040902081518154829060ff1916600183600481111561088457634e487b7160e01b600052602160045260246000fd5b02179055509050507fa7e352d2ea99326930f137ed355adf9bf95f5a63d3cc6367c83aee21acc7f25c818360016040516108c0939291906138aa565b60405180910390a15050565b60408051808201909152600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290565b6001546060906001600160a01b031633146109305760405162461bcd60e51b815260040161054490613e12565b600061093e85870187613392565b905080156109865783838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092945061055e9350505050565b6109908484611dff565b9b9a5050505050505050505050565b6000546001600160a01b038281166201000090920416145b919050565b600a6020526000908152604090205460ff1681565b6001546060906001600160a01b031633146109fe5760405162461bcd60e51b815260040161054490613e12565b610a0788611c87565b1580610a195750610a1787611c9b565b155b15610a46576001604051602001610a309190613943565b6040516020818303038152906040529050610a6a565b6000604051602001610a589190613943565b60405160208183030381529060405290505b979650505050505050565b60088054610a82906142a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610aae906142a9565b8015610afb5780601f10610ad057610100808354040283529160200191610afb565b820191906000526020600020905b815481529060010190602001808311610ade57829003601f168201915b505050505081565b6000546201000090046001600160a01b031681565b600c546001600160a01b031681565b6005546001600160a01b0316610b3b611d36565b6001600160a01b031614610b615760405162461bcd60e51b815260040161054490613b43565b6001600160a01b0381166000908152600a602052604081205460ff166004811115610b9c57634e487b7160e01b600052602160045260246000fd5b1415610bba5760405162461bcd60e51b815260040161054490613da4565b610bc5816000611d86565b6001600160a01b03166000908152600a60205260409020805460ff19169055565b6005546001600160a01b0316610bfa611d36565b6001600160a01b031614610c205760405162461bcd60e51b815260040161054490613b43565b60016001600160a01b0382166000908152600a602052604090205460ff166004811115610c5d57634e487b7160e01b600052602160045260246000fd5b14610c7a5760405162461bcd60e51b815260040161054490613d6d565b610c85816002611d86565b50565b6000336001600160a01b031647604051610ca19061384b565b60006040518083038185875af1925050503d8060008114610cde576040519150601f19603f3d011682016040523d82523d6000602084013e610ce3565b606091505b5050905080610c855760405162461bcd60e51b815260040161054490613c0e565b600c546001600160a01b0316610d1957600080fd5b600c546040517f4f558e790000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634f558e7990610d62908590600401614029565b60206040518083038186803b158015610d7a57600080fd5b505afa158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db291906133ae565b610dbb57600080fd5b6000610dc5611d36565b6006546040517f770031ab0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063770031ab90610e0f908490600401613874565b60206040518083038186803b158015610e2757600080fd5b505afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f91906133ae565b610e7b5760405162461bcd60e51b815260040161054490613bb1565b60016000848152600d602052604090205460ff166001811115610eae57634e487b7160e01b600052602160045260246000fd5b1415610f0e5760046001600160a01b0382166000908152600a602052604090205460ff166004811115610ef157634e487b7160e01b600052602160045260246000fd5b14610f0e5760405162461bcd60e51b815260040161054490613f29565b600382108015610f1c575060015b610f385760405162461bcd60e51b815260040161054490613cd9565b6000826002811115610f5a57634e487b7160e01b600052602160045260246000fd5b90507f594c74d47bf317d4fc72fc016e89d227fb8c8d601c730b9c5aed1733d5afcf67828583604051610f8f9392919061390e565b60405180910390a150505050565b6005546001600160a01b0316610fb1611d36565b6001600160a01b031614610fd75760405162461bcd60e51b815260040161054490613b43565b60005b8151811015610714576000600a600084848151811061100957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16600481111561104f57634e487b7160e01b600052602160045260246000fd5b141561106d5760405162461bcd60e51b815260040161054490613da4565b61109f82828151811061109057634e487b7160e01b600052603260045260246000fd5b60200260200101516000611d86565b600a60008383815181106110c357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169055806110f8816142e4565b915050610fda565b600954600b0b81565b600054610100900460ff1680611122575060005460ff16155b61113e5760405162461bcd60e51b815260040161054490613d10565b600054610100900460ff16158015611169576000805460ff1961ff0019909116610100171660011790555b6004805473ffffffffffffffffffffffffffffffffffffffff1916331790556001600160a01b038a166111ac57634e487b7160e01b600052600160045260246000fd5b6001600160a01b0389166111d057634e487b7160e01b600052600160045260246000fd5b6001600160a01b0388166111f457634e487b7160e01b600052600160045260246000fd5b600180546001600160a01b03808d1673ffffffffffffffffffffffffffffffffffffffff1992831617808455600280548e8416908516179055600380548d84169416939093179092556040517fad3915c800000000000000000000000000000000000000000000000000000000815291169063ad3915c89061127a908490600401614029565b600060405180830381600087803b15801561129457600080fd5b505af11580156112a8573d6000803e3d6000fd5b50506005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038c16179055505086516112e79060089060208a0190612ffa565b5060098054600b88810b6bffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffff000000000000000000000000909216919091179182905561134a9162278d00916104fe91810b900b670de0b6b3a764000061178d565b60098054600b9290920b6bffffffffffffffffffffffff166c01000000000000000000000000027fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff909216919091179055600480546006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790819055604080517fd63843cd0000000000000000000000000000000000000000000000000000000081529051919092169263d63843cd92808201926020929091829003018186803b15801561141b57600080fd5b505afa15801561142f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145391906131e1565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff1662010000928816929092029190911790556114bd8484612189565b5080156114d0576000805461ff00191690555b50505050505050505050565b6005546001600160a01b03166114f0611d36565b6001600160a01b0316146115165760405162461bcd60e51b815260040161054490613b43565b600c546001600160a01b031661152b57600080fd5b600081600181111561154d57634e487b7160e01b600052602160045260246000fd5b14806115785750600181600181111561157657634e487b7160e01b600052602160045260246000fd5b145b61158157600080fd5b600c546005546040517fd0def5210000000000000000000000000000000000000000000000000000000081526000926001600160a01b039081169263d0def521926115d492909116908890600401613888565b602060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162691906133ca565b6000818152600d602052604090208054919250839160ff19166001838181111561166057634e487b7160e01b600052602160045260246000fd5b02179055507f56e18d3f05fcdacbb5f30945553714915803451f602499a7a4d9d278428490ed818484604051610f8f93929190614032565b6001546060906001600160a01b031633146116c55760405162461bcd60e51b815260040161054490613e12565b61055b83838b8b8989612299565b6004546001600160a01b031681565b60006116ec611d36565b905060016001600160a01b0382166000908152600a602052604090205460ff16600481111561172b57634e487b7160e01b600052602160045260246000fd5b1480611771575060026001600160a01b0382166000908152600a602052604090205460ff16600481111561176f57634e487b7160e01b600052602160045260246000fd5b145b610bba5760405162461bcd60e51b815260040161054490613c45565b600082600b0b600014156117a35750600061050a565b82600b0b6000191480156117c75750600b82900b6b7fffffffffffffffffffffff19145b156117d157600080fd5b60006117dd838561416e565b9050600b83900b6117ee858361411f565b600b0b1461050757600080fd5b600081600b0b600014156118215760405162461bcd60e51b815260040161054490613ddb565b81600b0b6000191480156118455750600b83900b6b7fffffffffffffffffffffff19145b156118625760405162461bcd60e51b815260040161054490613f60565b600061186e838561411f565b949350505050565b6003546040517faabd26680000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b038881169263aabd2668926118c992909116908990600401613ac2565b60806040518083038186803b1580156118e157600080fd5b505afa1580156118f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119199190613783565b50509150506009600c9054906101000a9004600b0b600b0b81600b0b12156040518060400160405280602081526020017f5375706572666c7569643a20666c6f772072617465206e6f7420656e6f7567688152509061198b5760405162461bcd60e51b81526004016105449190613962565b5060025460035460405163e8e7e2d160e01b81526000926001600160a01b039081169263e8e7e2d1926119c692909116903090600401613a12565b60206040518083038186803b1580156119de57600080fd5b505afa1580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1691906135a6565b90506000611aa482600660009054906101000a90046001600160a01b03166001600160a01b031663996a81d66040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6c57600080fd5b505afa158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020291906135a6565b90506000611ab6600b84900b83612797565b600254600354600554604051631cd43d1160e31b81529394506000936001600160a01b039384169363e6a1e88893611afa9390821692309290911690600401613a2c565b60806040518083038186803b158015611b1257600080fd5b505afa158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4a9190613783565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b3916004808301926020929190829003018186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be391906131e1565b6040518463ffffffff1660e01b8152600401611c0193929190613a2c565b60806040518083038186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c519190613783565b5050915050611c768d8d8685611c6791906140af565b611c7187866140af565b6127e7565b9d9c50505050505050505050505050565b6003546001600160a01b0390811691161490565b60007fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3826001600160a01b0316637730599e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cf757600080fd5b505afa158015611d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2f91906133ca565b1492915050565b600060183610801590611d4d5750611d4d3361099f565b15611d7f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610514565b5033610514565b6001600160a01b0382166000908152600a60205260409020805482919060ff19166001836004811115611dc957634e487b7160e01b600052602160045260246000fd5b02179055507fa7e352d2ea99326930f137ed355adf9bf95f5a63d3cc6367c83aee21acc7f25c82826040516108c09291906138db565b6001546040517f3f6c923a0000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b0390911690633f6c923a90611e50908790879060040161394e565b60006040518083038186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ea491908101906136a5565b606001519050600b5460011415611ec657611ebf8484612ae9565b9150612179565b600b54156121795760025460035460405163e8e7e2d160e01b81526000926001600160a01b039081169263e8e7e2d192611f0892909116903090600401613a12565b60206040518083038186803b158015611f2057600080fd5b505afa158015611f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5891906135a6565b90506000611fae82600660009054906101000a90046001600160a01b03166001600160a01b031663996a81d66040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6c57600080fd5b90506000611fc0600b84900b83612797565b600254600354600554604051631cd43d1160e31b81529394506000936001600160a01b039384169363e6a1e888936120049390821692309290911690600401613a2c565b60806040518083038186803b15801561201c57600080fd5b505afa158015612030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120549190613783565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b3916004808301926020929190829003018186803b1580156120b557600080fd5b505afa1580156120c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ed91906131e1565b6040518463ffffffff1660e01b815260040161210b93929190613a2c565b60806040518083038186803b15801561212357600080fd5b505afa158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b9190613783565b505091505061217189898685611c6791906140af565b965050505050505b61218281612dea565b5092915050565b600c546001600160a01b03161561219f57600080fd5b6007546040517ff99120900000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063f9912090906121ec90859085903090600401613af7565b602060405180830381600087803b15801561220657600080fd5b505af115801561221a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223e91906131e1565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617908190556040517fbb5744448f3e46ab592cb9d22d7bce54500691e81b837c6f1ae8f1bb842eae32926108c0921690613874565b6003546040517faabd26680000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b038881169263aabd2668926122ec92909116908990600401613ac2565b60806040518083038186803b15801561230457600080fd5b505afa158015612318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233c9190613783565b50509150506009600c9054906101000a9004600b0b600b0b81600b0b12156040518060400160405280602081526020017f5375706572666c7569643a20666c6f772072617465206e6f7420656e6f756768815250906123ae5760405162461bcd60e51b81526004016105449190613962565b506001546040517f3f6c923a0000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690633f6c923a906123fb908c908c9060040161394e565b60006040518083038186803b15801561241357600080fd5b505afa158015612427573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261244f91908101906136a5565b9050600260608201516001600160a01b03166000908152600a602052604090205460ff16600481111561249257634e487b7160e01b600052602160045260246000fd5b146124af5760405162461bcd60e51b815260040161054490613ca2565b60025460035460405163e8e7e2d160e01b81526000926001600160a01b039081169263e8e7e2d1926124e992909116903090600401613a12565b60206040518083038186803b15801561250157600080fd5b505afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253991906135a6565b9050600061258f82600660009054906101000a90046001600160a01b03166001600160a01b031663996a81d66040518163ffffffff1660e01b815260040160206040518083038186803b158015611a6c57600080fd5b905060006125a1600b84900b83612797565b9050600b54600014156125c1576125ba8c8c8484612e0e565b955061277b565b600b541561277b57600254600354600554604051631cd43d1160e31b81526000936001600160a01b039081169363e6a1e8889361260993918316923092911690600401613a2c565b60806040518083038186803b15801561262157600080fd5b505afa158015612635573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126599190613783565b5050600254600354600654604080516361d027b360e01b81529051949650600095506001600160a01b039384169463e6a1e8889493841693309316916361d027b3916004808301926020929190829003018186803b1580156126ba57600080fd5b505afa1580156126ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f291906131e1565b6040518463ffffffff1660e01b815260040161271093929190613a2c565b60806040518083038186803b15801561272857600080fd5b505afa15801561273c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127609190613783565b50509150506127768e8e8685611c6791906140af565b975050505b6127888460600151612fd6565b50505050509695505050505050565b6000806127a48385614209565b9050600083600b0b121580156127c0575083600b0b81600b0b13155b806127de5750600083600b0b1280156127de575083600b0b81600b0b135b61050757600080fd5b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937f50209a6200000000000000000000000000000000000000000000000000000000936128549392831692909116908a9060448101613a8d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b90931690526128d792918a8a60248301613975565b600060405180830381600087803b1580156128f157600080fd5b505af1158015612905573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261292d91908101906133e2565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947f50209a62000000000000000000000000000000000000000000000000000000009481169316916361d027b3916004808301926020929190829003018186803b1580156129af57600080fd5b505afa1580156129c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e791906131e1565b604080516000815260208101909152612a07929190899060448101613a8d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b9093169052612a89929186602482016139ca565b600060405180830381600087803b158015612aa357600080fd5b505af1158015612ab7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612adf91908101906133e2565b5095945050505050565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937fb4b333c60000000000000000000000000000000000000000000000000000000093612b5493928316923092169060448101613a4f565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b9093169052612bd79291888860248301613975565b600060405180830381600087803b158015612bf157600080fd5b505af1158015612c05573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c2d91908101906133e2565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947fb4b333c6000000000000000000000000000000000000000000000000000000009481169330939116916361d027b391600480820192602092909190829003018186803b158015612cb357600080fd5b505afa158015612cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ceb91906131e1565b604080516000815260208101909152612d0a9392919060448101613a4f565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b9093169052612d8c929186602482016139ca565b600060405180830381600087803b158015612da657600080fd5b505af1158015612dba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612de291908101906133e2565b509392505050565b6001600b6000828254612dfd9190614262565b90915550610bc59050816000611d86565b6001546002546003546005546040805160008152602081019091526060946001600160a01b0390811694634329d29394908216937f62fc305e0000000000000000000000000000000000000000000000000000000093612e7b9392831692909116908a9060448101613a8d565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009586161790528151600081529081019182905260e086901b9093169052612efe92918a8a60248301613975565b600060405180830381600087803b158015612f1857600080fd5b505af1158015612f2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f5491908101906133e2565b50600154600254600354600654604080516361d027b360e01b815290519596506001600160a01b0394851695634329d29395948516947f62fc305e000000000000000000000000000000000000000000000000000000009481169316916361d027b3916004808301926020929190829003018186803b1580156129af57600080fd5b6001600b6000828254612fe99190614107565b90915550610c859050816004611d86565b828054613006906142a9565b90600052602060002090601f016020900481019282613028576000855561306e565b82601f1061304157805160ff191683800117855561306e565b8280016001018555821561306e579182015b8281111561306e578251825591602001919060010190613053565b5061307a92915061307e565b5090565b5b8082111561307a576000815560010161307f565b80356109b781614341565b80516109b781614341565b80517fffffffff00000000000000000000000000000000000000000000000000000000811681146109b757600080fd5b60008083601f8401126130ea578182fd5b50813567ffffffffffffffff811115613101578182fd5b60208301915083602082850101111561311957600080fd5b9250929050565b600082601f830112613130578081fd5b815161314361313e82614087565b61405d565b818152846020838601011115613157578283fd5b61186e826020830160208701614279565b600082601f830112613178578081fd5b813561318661313e82614087565b81815284602083860101111561319a578283fd5b816020850160208301379081016020019190915292915050565b805160ff811681146109b757600080fd5b6000602082840312156131d6578081fd5b813561050781614341565b6000602082840312156131f2578081fd5b815161050781614341565b60008060008060008060008060006101208a8c03121561321b578485fd5b6132248a613093565b985061323260208b01613093565b975061324060408b01613093565b965061324e60608b01613093565b955060808a013567ffffffffffffffff8082111561326a578687fd5b6132768d838e01613168565b965060a08c0135955061328b60c08d01613093565b945060e08c01359150808211156132a0578384fd5b6132ac8d838e01613168565b93506101008c01359150808211156132c2578283fd5b506132cf8c828d01613168565b9150509295985092959850929598565b600060208083850312156132f1578182fd5b823567ffffffffffffffff80821115613308578384fd5b818501915085601f83011261331b578384fd5b81358181111561332d5761332d61432b565b838102915061333d84830161405d565b8181528481019084860184860187018a1015613357578788fd5b8795505b83861015613385578035945061337085614341565b8483526001959095019491860191860161335b565b5098975050505050505050565b6000602082840312156133a3578081fd5b813561050781614356565b6000602082840312156133bf578081fd5b815161050781614356565b6000602082840312156133db578081fd5b5051919050565b600080604083850312156133f4578182fd5b825167ffffffffffffffff8082111561340b578384fd5b61341786838701613120565b9350602085015191508082111561342c578283fd5b5061343985828601613120565b9150509250929050565b600080600080600080600060a0888a03121561345d578081fd5b873561346881614341565b9650602088013561347881614341565b955060408801359450606088013567ffffffffffffffff8082111561349b578283fd5b6134a78b838c016130d9565b909650945060808a01359150808211156134bf578283fd5b506134cc8a828b016130d9565b989b979a50959850939692959293505050565b600080600080600080600080600060c08a8c0312156134fc578283fd5b893561350781614341565b985060208a013561351781614341565b975060408a0135965060608a013567ffffffffffffffff8082111561353a578485fd5b6135468d838e016130d9565b909850965060808c013591508082111561355e578485fd5b61356a8d838e016130d9565b909650945060a08c0135915080821115613582578384fd5b5061358f8c828d016130d9565b915080935050809150509295985092959850929598565b6000602082840312156135b7578081fd5b815161050781614364565b600080604083850312156135d4578182fd5b82356135df81614364565b915060208301356135ef81614364565b809150509250929050565b60006020828403121561360b578081fd5b813567ffffffffffffffff811115613621578182fd5b61186e84828501613168565b600080600060608486031215613641578081fd5b833567ffffffffffffffff80821115613658578283fd5b61366487838801613168565b94506020860135915080821115613679578283fd5b5061368686828701613168565b92505060408401356002811061369a578182fd5b809150509250925092565b6000602082840312156136b6578081fd5b815167ffffffffffffffff808211156136cd578283fd5b81840191506101208083870312156136e3578384fd5b6136ec8161405d565b90506136f7836131b4565b8152613705602084016131b4565b6020820152604083015160408201526137206060840161309e565b6060820152613731608084016130a9565b608082015260a083015182811115613747578485fd5b61375387828601613120565b60a08301525060c0838101519082015260e080840151908201526101009283015192810192909252509392505050565b60008060008060808587031215613798578182fd5b8451935060208501516137aa81614364565b6040860151606090960151949790965092505050565b600080604083850312156137d2578182fd5b50508035926020909101359150565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452613823816020860160208601614279565b601f01601f19169290920160200192915050565b6005811061384757613847614315565b9052565b7f4e6f742061646d696e0000000000000000000000000000000000000000000000815260090190565b6001600160a01b0391909116815260200190565b60006001600160a01b03841682526040602083015261186e604083018461380b565b60006001600160a01b0385168252606060208301526138cc606083018561380b565b905061186e6040830184613837565b6001600160a01b0383168152606060208201819052600090820152608081016139076040830184613837565b9392505050565b6001600160a01b038416815260208101839052606081016003831061393557613935614315565b826040830152949350505050565b901515815260200190565b60006020825261186e6020830184866137e1565b600060208252610507602083018461380b565b60006001600160a01b038716825260806020830152613997608083018761380b565b82810360408401526139a9818761380b565b905082810360608401526139be8185876137e1565b98975050505050505050565b60006001600160a01b0386168252608060208301526139ec608083018661380b565b82810360408401526139fe818661380b565b90508281036060840152610a6a818561380b565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b60006001600160a01b038087168352808616602084015280851660408401525060806060830152613a83608083018461380b565b9695505050505050565b60006001600160a01b03808716835280861660208401525083600b0b604083015260806060830152613a83608083018461380b565b6001600160a01b03929092168252602082015260400190565b6020810161050a8284613837565b600b9190910b815260200190565b600060808252613b0a608083018661380b565b8281036020840152613b1c818661380b565b8381036040850152918252506001600160a01b039290921660609091015260200192915050565b6020808252600f908201527f4e6f74207468652063726561746f720000000000000000000000000000000000604082015260600190565b60208082526019908201527f4e6f20537562736372697074696f6e2052657175657374656400000000000000604082015260600190565b60208082526028908201527f596f75206e65656420746f207369676e7570206265666f7265206c696b696e6760408201527f20636f6e74656e74000000000000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f4e6f2062616c616e636500000000000000000000000000000000000000000000604082015260600190565b60208082526021908201527f4e6f20537562736372697074696f6e205265717565737420746f205265766f6b60408201527f6500000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526018908201527f537562736372697074696f6e206e6f74204772616e7465640000000000000000604082015260600190565b60208082526015908201527f496e76616c696420617070726f76616c20656e756d0000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526019908201527f4e6f20737562736372697074696f6e2072657175657374656400000000000000604082015260600190565b6020808252601e908201527f43616e277420426c6f636b20556e737562736372696265642055736572730000604082015260600190565b6020808252601f908201527f496e743936536166654d6174683a206469766973696f6e206279207a65726f00604082015260600190565b60208082526026908201527f4c6f747465727953757065724170703a20737570706f7274206f6e6c79206f6e60408201527f6520686f73740000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f4c6f747465727953757065724170703a206f6e6c79204346417631207375707060408201527f6f72746564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f596f75206e65656420746f207369676e757020696e2043726561746f6e20666960408201527f7273740000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f4e6f742073756273637269626564000000000000000000000000000000000000604082015260600190565b6020808252818101527f496e743936536166654d6174683a206469766973696f6e206f766572666c6f77604082015260600190565b6020808252601e908201527f537562736372697074696f6e20416c7265616479205265717565737465640000604082015260600190565b60208082526023908201527f4c6f747465727953757065724170703a206e6f7420616363657074656420746f60408201527f6b656e0000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60008482526060602083015261404b606083018561380b565b90506002831061393557613935614315565b60405181810167ffffffffffffffff8111828210171561407f5761407f61432b565b604052919050565b600067ffffffffffffffff8211156140a1576140a161432b565b50601f01601f191660200190565b600081600b0b83600b0b828212826b7fffffffffffffffffffffff038213811516156140dd576140dd6142ff565b826b7fffffffffffffffffffffff190382128116156140fe576140fe6142ff565b50019392505050565b6000821982111561411a5761411a6142ff565b500190565b600081600b0b83600b0b8061414257634e487b7160e01b83526012600452602483fd5b60001981146b7fffffffffffffffffffffff1983141615614165576141656142ff565b90059392505050565b600081600b0b83600b0b6b7fffffffffffffffffffffff838213848413838304851182821616156141a1576141a16142ff565b6b7fffffffffffffffffffffff19868512868205861281841616156141c8576141c86142ff565b8787129250858205871284841616156141e3576141e36142ff565b858505871281841616156141f9576141f96142ff565b5050509290910295945050505050565b600081600b0b83600b0b828112816b7fffffffffffffffffffffff1901831281151615614238576142386142ff565b816b7fffffffffffffffffffffff018313811615614258576142586142ff565b5090039392505050565b600082821015614274576142746142ff565b500390565b60005b8381101561429457818101518382015260200161427c565b838111156142a3576000848401525b50505050565b6002810460018216806142bd57607f821691505b602082108114156142de57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156142f8576142f86142ff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c8557600080fd5b8015158114610c8557600080fd5b80600b0b8114610c8557600080fdfea26469706673582212205cb6c2d9c7f3dd7f3d9c5095bba14292c04f93b1fb862510188a0b453e612eca64736f6c63430008000033",
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "isTrustedForwarder(address)": {
          "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
        }
      },
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 885,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "_initialized",
          "offset": 0,
          "slot": "0",
          "type": "t_bool"
        },
        {
          "astId": 888,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "_initializing",
          "offset": 1,
          "slot": "0",
          "type": "t_bool"
        },
        {
          "astId": 9669,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "trustedForwarder",
          "offset": 2,
          "slot": "0",
          "type": "t_address"
        },
        {
          "astId": 7692,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "_host",
          "offset": 0,
          "slot": "1",
          "type": "t_contract(ISuperfluid)6943"
        },
        {
          "astId": 7695,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "_cfa",
          "offset": 0,
          "slot": "2",
          "type": "t_contract(IConstantFlowAgreementV1)5708"
        },
        {
          "astId": 7698,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "_acceptedToken",
          "offset": 0,
          "slot": "3",
          "type": "t_contract(ISuperToken)6474"
        },
        {
          "astId": 7700,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "admin",
          "offset": 0,
          "slot": "4",
          "type": "t_address"
        },
        {
          "astId": 7702,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "creator",
          "offset": 0,
          "slot": "5",
          "type": "t_address"
        },
        {
          "astId": 7705,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "adminContract",
          "offset": 0,
          "slot": "6",
          "type": "t_contract(CreatonAdmin)7577"
        },
        {
          "astId": 7708,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "nftFactory",
          "offset": 0,
          "slot": "7",
          "type": "t_contract(NFTFactory)9264"
        },
        {
          "astId": 7710,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "description",
          "offset": 0,
          "slot": "8",
          "type": "t_string_storage"
        },
        {
          "astId": 7712,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "subscriptionPrice",
          "offset": 0,
          "slot": "9",
          "type": "t_int96"
        },
        {
          "astId": 7714,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "_MINIMUM_FLOW_RATE",
          "offset": 12,
          "slot": "9",
          "type": "t_int96"
        },
        {
          "astId": 7719,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "subscribers",
          "offset": 0,
          "slot": "10",
          "type": "t_mapping(t_address,t_struct(Subscriber)7689_storage)"
        },
        {
          "astId": 7721,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "subscriberCount",
          "offset": 0,
          "slot": "11",
          "type": "t_uint256"
        },
        {
          "astId": 7723,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "postNFT",
          "offset": 0,
          "slot": "12",
          "type": "t_address"
        },
        {
          "astId": 7728,
          "contract": "src/creaton/CreatorV1.sol:CreatorV1",
          "label": "post2tier",
          "offset": 0,
          "slot": "13",
          "type": "t_mapping(t_uint256,t_enum(Type)7654)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_contract(CreatonAdmin)7577": {
          "encoding": "inplace",
          "label": "contract CreatonAdmin",
          "numberOfBytes": "20"
        },
        "t_contract(IConstantFlowAgreementV1)5708": {
          "encoding": "inplace",
          "label": "contract IConstantFlowAgreementV1",
          "numberOfBytes": "20"
        },
        "t_contract(ISuperToken)6474": {
          "encoding": "inplace",
          "label": "contract ISuperToken",
          "numberOfBytes": "20"
        },
        "t_contract(ISuperfluid)6943": {
          "encoding": "inplace",
          "label": "contract ISuperfluid",
          "numberOfBytes": "20"
        },
        "t_contract(NFTFactory)9264": {
          "encoding": "inplace",
          "label": "contract NFTFactory",
          "numberOfBytes": "20"
        },
        "t_enum(Status)7647": {
          "encoding": "inplace",
          "label": "enum CreatorV1.Status",
          "numberOfBytes": "1"
        },
        "t_enum(Type)7654": {
          "encoding": "inplace",
          "label": "enum CreatorV1.Type",
          "numberOfBytes": "1"
        },
        "t_int96": {
          "encoding": "inplace",
          "label": "int96",
          "numberOfBytes": "12"
        },
        "t_mapping(t_address,t_struct(Subscriber)7689_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => struct CreatorV1.Subscriber)",
          "numberOfBytes": "32",
          "value": "t_struct(Subscriber)7689_storage"
        },
        "t_mapping(t_uint256,t_enum(Type)7654)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => enum CreatorV1.Type)",
          "numberOfBytes": "32",
          "value": "t_enum(Type)7654"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_struct(Subscriber)7689_storage": {
          "encoding": "inplace",
          "label": "struct CreatorV1.Subscriber",
          "members": [
            {
              "astId": 7688,
              "contract": "src/creaton/CreatorV1.sol:CreatorV1",
              "label": "status",
              "offset": 0,
              "slot": "0",
              "type": "t_enum(Status)7647"
            }
          ],
          "numberOfBytes": "32"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  },
  "TwitterVerification": {
    "address": "0xd68aE6dcA5c7d05F56CFAcff52289Fad2cFaa05c",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "link",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "oracle",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "jobId",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_trustedForwarder",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "admin",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "id",
            "type": "bytes32"
          }
        ],
        "name": "ChainlinkCancelled",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "id",
            "type": "bytes32"
          }
        ],
        "name": "ChainlinkFulfilled",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "id",
            "type": "bytes32"
          }
        ],
        "name": "ChainlinkRequested",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "requestId",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "username",
            "type": "bytes32"
          }
        ],
        "name": "RequestTwitterVerificationFulfilled",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "userAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "username",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "result",
            "type": "bool"
          }
        ],
        "name": "UserSignUpResult",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_requestId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "_payment",
            "type": "uint256"
          },
          {
            "internalType": "bytes4",
            "name": "_callbackFunctionId",
            "type": "bytes4"
          },
          {
            "internalType": "uint256",
            "name": "_expiration",
            "type": "uint256"
          }
        ],
        "name": "cancelRequest",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_requestId",
            "type": "bytes32"
          },
          {
            "internalType": "bool",
            "name": "result",
            "type": "bool"
          }
        ],
        "name": "fulfillVerification",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "forwarder",
            "type": "address"
          }
        ],
        "name": "isTrustedForwarder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "hash",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "username",
            "type": "string"
          }
        ],
        "name": "requestTwitterVerification",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "source",
            "type": "string"
          }
        ],
        "name": "stringToBytes32",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "result",
            "type": "bytes32"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "trustedForwarder",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          },
          {
            "internalType": "address",
            "name": "userAddress",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "username",
            "type": "string"
          }
        ],
        "name": "verifySignature",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "versionRecipient",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawLink",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0x09e2c1d027c85b6bdcad6d53d79604ac6f2c3320a8e3faf1efb3f9d9561fa783",
    "receipt": {
      "to": null,
      "from": "0xC7AF24dc120b0a74b73E360378867d0c9541094c",
      "contractAddress": "0xd68aE6dcA5c7d05F56CFAcff52289Fad2cFaa05c",
      "transactionIndex": 20,
      "gasUsed": "1870983",
      "logsBloom": "0x
      "blockHash": "0x0d095b3961df88469360bb91cba29571b52651c8e7a9a782cc5721a9d5104d05",
      "transactionHash": "0x09e2c1d027c85b6bdcad6d53d79604ac6f2c3320a8e3faf1efb3f9d9561fa783",
      "logs": [
        {
          "transactionIndex": 20,
          "blockNumber": 4651512,
          "transactionHash": "0x09e2c1d027c85b6bdcad6d53d79604ac6f2c3320a8e3faf1efb3f9d9561fa783",
          "address": "0xd68aE6dcA5c7d05F56CFAcff52289Fad2cFaa05c",
          "topics": [
            "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000c7af24dc120b0a74b73e360378867d0c9541094c"
          ],
          "data": "0x",
          "logIndex": 25,
          "blockHash": "0x0d095b3961df88469360bb91cba29571b52651c8e7a9a782cc5721a9d5104d05"
        }
      ],
      "blockNumber": 4651512,
      "cumulativeGasUsed": "3416495",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0x7aD5EFFeC378Ad63d9D4E47d68B9aCC4A6406bFF",
      "0x7Ca145cd520C88aB829A4da5cd4A8403Ad6A7Eb0",
      "735df7cd5c394410b1e52758621268df",
      "0xd9c1a99e9263B98F3f633a9f1A201FA0AFC2A1c2",
      "0x30a3379302cB2c0Efbc98DC18eec3b9DaD16AC0C"
    ],
    "solcInputHash": "349ca7de9994ebbe811a99bc179fb479",
    "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"jobId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"RequestTwitterVerificationFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"UserSignUpResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"fulfillVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"requestTwitterVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/verification/TwitterVerification.sol\":\"TwitterVerification\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { CBORChainlink } from \\\"./vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param _id The Job Specification ID\\n   * @param _callbackAddress The callback address\\n   * @param _callbackFunction The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 _id,\\n    address _callbackAddress,\\n    bytes4 _callbackFunction\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = _id;\\n    self.callbackAddress = _callbackAddress;\\n    self.callbackFunctionId = _callbackFunction;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param _data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory _data)\\n    internal pure\\n  {\\n    BufferChainlink.init(self.buf, _data.length);\\n    BufferChainlink.append(self.buf, _data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The string value to add\\n   */\\n  function add(Request memory self, string memory _key, string memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeString(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The bytes value to add\\n   */\\n  function addBytes(Request memory self, string memory _key, bytes memory _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeBytes(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The int256 value to add\\n   */\\n  function addInt(Request memory self, string memory _key, int256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _value The uint256 value to add\\n   */\\n  function addUint(Request memory self, string memory _key, uint256 _value)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.encodeUInt(_value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param _key The name of the key\\n   * @param _values The array of string values to add\\n   */\\n  function addStringArray(Request memory self, string memory _key, string[] memory _values)\\n    internal pure\\n  {\\n    self.buf.encodeString(_key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < _values.length; i++) {\\n      self.buf.encodeString(_values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x7bef34fd97f611103c6113025e3d6af755f326069767e72266698f64258e62b6\"},\"@chainlink/contracts/src/v0.6/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport { ENSResolver as ENSResolver_Chainlink } from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\ncontract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 constant internal LINK = 10**18;\\n  uint256 constant private AMOUNT_OVERRIDE = 0;\\n  address constant private SENDER_OVERRIDE = address(0);\\n  uint256 constant private ARGS_VERSION = 1;\\n  bytes32 constant private ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 constant private ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address constant private LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private ens;\\n  bytes32 private ensNode;\\n  LinkTokenInterface private link;\\n  ChainlinkRequestInterface private oracle;\\n  uint256 private requestCount = 1;\\n  mapping(bytes32 => address) private pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param _specId The Job Specification ID that the request will be created for\\n   * @param _callbackAddress The callback address that the response will be sent to\\n   * @param _callbackFunctionSignature The callback function signature to use for the callback address\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 _specId,\\n    address _callbackAddress,\\n    bytes4 _callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(_specId, _callbackAddress, _callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32)\\n  {\\n    return sendChainlinkRequestTo(address(oracle), _req, _payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param _oracle The address of the oracle for the request\\n   * @param _req The initialized Chainlink Request\\n   * @param _payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(address _oracle, Chainlink.Request memory _req, uint256 _payment)\\n    internal\\n    returns (bytes32 requestId)\\n  {\\n    requestId = keccak256(abi.encodePacked(this, requestCount));\\n    _req.nonce = requestCount;\\n    pendingRequests[requestId] = _oracle;\\n    emit ChainlinkRequested(requestId);\\n    require(link.transferAndCall(_oracle, _payment, encodeRequest(_req)), \\\"unable to transferAndCall to oracle\\\");\\n    requestCount += 1;\\n\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param _requestId The request ID\\n   * @param _payment The amount of LINK sent for the request\\n   * @param _callbackFunc The callback function specified for the request\\n   * @param _expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 _requestId,\\n    uint256 _payment,\\n    bytes4 _callbackFunc,\\n    uint256 _expiration\\n  )\\n    internal\\n  {\\n    ChainlinkRequestInterface requested = ChainlinkRequestInterface(pendingRequests[_requestId]);\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkCancelled(_requestId);\\n    requested.cancelOracleRequest(_requestId, _payment, _callbackFunc, _expiration);\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param _oracle The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address _oracle) internal {\\n    oracle = ChainlinkRequestInterface(_oracle);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param _link The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address _link) internal {\\n    link = LinkTokenInterface(_link);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return address(oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param _oracle The address of the oracle contract that will fulfill the request\\n   * @param _requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address _oracle, bytes32 _requestId)\\n    internal\\n    notPendingRequest(_requestId)\\n  {\\n    pendingRequests[_requestId] = _oracle;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param _ens The address of the ENS contract\\n   * @param _node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address _ens, bytes32 _node)\\n    internal\\n  {\\n    ens = ENSInterface(_ens);\\n    ensNode = _node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS()\\n    internal\\n  {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Encodes the request to be sent to the oracle contract\\n   * @dev The Chainlink node expects values to be in order for the request to be picked up. Order of types\\n   * will be validated in the oracle contract.\\n   * @param _req The initialized Chainlink Request\\n   * @return The bytes payload for the `transferAndCall` method\\n   */\\n  function encodeRequest(Chainlink.Request memory _req)\\n    private\\n    view\\n    returns (bytes memory)\\n  {\\n    return abi.encodeWithSelector(\\n      oracle.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      _req.id,\\n      _req.callbackAddress,\\n      _req.callbackFunctionId,\\n      _req.nonce,\\n      ARGS_VERSION,\\n      _req.buf.buf);\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 _requestId)\\n    internal\\n    recordChainlinkFulfillment(_requestId)\\n    // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 _requestId) {\\n    require(msg.sender == pendingRequests[_requestId],\\n            \\\"Source must be the oracle of the request\\\");\\n    delete pendingRequests[_requestId];\\n    emit ChainlinkFulfilled(_requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param _requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 _requestId) {\\n    require(pendingRequests[_requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x9f8883b8b5b76bba151e5f30d4c353b8a3f15ee3d97117deee4cccd91fe8640f\"},\"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe513c0f60edf13da7d82625489cf2008c7b66170f3b1ed1606b84c73f95b17ad\"},\"@chainlink/contracts/src/v0.6/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface ENSInterface {\\n\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address _owner) external;\\n  function setResolver(bytes32 node, address _resolver) external;\\n  function setOwner(bytes32 node, address _owner) external;\\n  function setTTL(bytes32 node, uint64 _ttl) external;\\n  function owner(bytes32 node) external view returns (address);\\n  function resolver(bytes32 node) external view returns (address);\\n  function ttl(bytes32 node) external view returns (uint64);\\n\\n}\\n\",\"keccak256\":\"0xdef864af6e516477773ea246b73531b1836de5bea4ac1cfd8be6e7f4b3f3c3fd\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\"},\"@chainlink/contracts/src/v0.6/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x08aed19c3bef1ae2d90fc0d9d28a497fd7f312991ed08fedfe545de6b9a476e4\"},\"@chainlink/contracts/src/v0.6/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for writing to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary BufferChainlink {\\n  /**\\n  * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n  *      a capacity. The capacity may be longer than the current value, in\\n  *      which case it can be extended without the need to allocate more memory.\\n  */\\n  struct buffer {\\n    bytes buf;\\n    uint capacity;\\n  }\\n\\n  /**\\n  * @dev Initializes a buffer with an initial capacity.\\n  * @param buf The buffer to initialize.\\n  * @param capacity The number of bytes of space to allocate the buffer.\\n  * @return The buffer, for chaining.\\n  */\\n  function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Initializes a new buffer from an existing bytes object.\\n  *      Changes to the buffer may mutate the original value.\\n  * @param b The bytes object to initialize the buffer with.\\n  * @return A new buffer.\\n  */\\n  function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint a, uint b) private pure returns(uint) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n  * @dev Sets buffer length to 0.\\n  * @param buf The buffer to truncate.\\n  * @return The original buffer, for chaining..\\n  */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The start offset to write to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes memory data, uint len) internal pure returns(buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint dest;\\n    uint src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint mask = 256 ** (32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @param len The number of bytes to copy.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data, uint len) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n  * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n  * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write the byte at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeUint8(buffer memory buf, uint off, uint8 data) internal pure returns(buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n  * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n  *      exceed the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (left-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function write(buffer memory buf, uint off, bytes32 data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n  * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n  *      capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeBytes20(buffer memory buf, uint off, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chhaining.\\n  */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n  * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param data The data to append.\\n  * @return The original buffer, for chaining.\\n  */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n  * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n  *      the capacity of the buffer.\\n  * @param buf The buffer to append to.\\n  * @param off The offset to write at.\\n  * @param data The data to append.\\n  * @param len The number of bytes to write (right-aligned).\\n  * @return The original buffer, for chaining.\\n  */\\n  function writeInt(buffer memory buf, uint off, uint data, uint len) private pure returns(buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint mask = 256 ** len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n    * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n    * exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer.\\n    */\\n  function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x14f13139229a2fef8f705f29f91de0bc81bcd5070ec75b4bd3fd82c1536ca685\"},\"@chainlink/contracts/src/v0.6/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.19;\\n\\nimport { BufferChainlink } from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major,\\n    uint value\\n  )\\n    private\\n    pure\\n  {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if(value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if(value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if(value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else if(value <= 0xFFFFFFFFFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(\\n    BufferChainlink.buffer memory buf,\\n    uint8 major\\n  )\\n    private\\n    pure\\n  {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(\\n    BufferChainlink.buffer memory buf,\\n    uint value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function encodeInt(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else if(value >= 0) {\\n      encodeType(buf, MAJOR_TYPE_INT, uint(value));\\n    } else {\\n      encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\\n    }\\n  }\\n\\n  function encodeBytes(\\n    BufferChainlink.buffer memory buf,\\n    bytes memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_BYTES, value.length);\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int value\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(value)));\\n  }\\n\\n  function encodeSignedBigNum(\\n    BufferChainlink.buffer memory buf,\\n    int input\\n  )\\n    internal\\n    pure\\n  {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint(-1 - input)));\\n  }\\n\\n  function encodeString(\\n    BufferChainlink.buffer memory buf,\\n    string memory value\\n  )\\n    internal\\n    pure\\n  {\\n    encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(\\n    BufferChainlink.buffer memory buf\\n  )\\n    internal\\n    pure\\n  {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0xe7c6e4290ac2a41a138e6bd89d89a2779f66847a5ee6fb5a6f2a3386e5ce589d\"},\"@chainlink/contracts/src/v0.6/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0xfd992937d215ad669f69e91fefbe62cad8973ae329b4e810ca9b26a1ae0b6bb7\"},\"@opengsn/gsn/contracts/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n// solhint-disable no-inline-assembly\\npragma solidity ^0.6.2;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address payable ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal override virtual view returns (bytes memory ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // we copy the msg.data , except the last 20 bytes (and update the total length)\\n            assembly {\\n                let ptr := mload(0x40)\\n                // copy only size-20 bytes\\n                let size := sub(calldatasize(),20)\\n                // structure RLP data as <offset> <length> <bytes>\\n                mstore(ptr, 0x20)\\n                mstore(add(ptr,32), size)\\n                calldatacopy(add(ptr,64), 0, size)\\n                return(ptr, add(size,64))\\n            }\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaef2a61eaaf6cbcf4fc96e23416fc3503b61c7d9b6544c0baf8a366bde49c156\"},\"@opengsn/gsn/contracts/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.6.2;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0xbb9d970a466d0155113acc87f0ea403df413e070e0a1ddce66439f2f82ac6d01\"},\"src/gsn/contracts/OwnableBaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\nimport \\\"@opengsn/gsn/contracts/BaseRelayRecipient.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableBaseRelayRecipient is BaseRelayRecipient\\n{\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n//    function _msgSender() internal virtual view returns (address payable);\\n\\n}\\n\",\"keccak256\":\"0xe942d315d81a2f39483a6e8d88b04732d4ef5b15f99a5d8a31df89caa2a139e0\"},\"src/utils/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x60f8a02c537ce3bee1288c2db9bddbf2cbed9706aacb0e89dd1bf6b9f7a287f1\"},\"src/verification/TwitterVerification.sol\":{\"content\":\"pragma solidity ^0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/ChainlinkClient.sol\\\";\\nimport \\\"../gsn/contracts/OwnableBaseRelayRecipient.sol\\\";\\nimport { CBORChainlink } from \\\"@chainlink/contracts/src/v0.6/vendor/CBORChainlink.sol\\\";\\nimport { BufferChainlink } from \\\"@chainlink/contracts/src/v0.6/vendor/BufferChainlink.sol\\\";\\nimport {ECDSA} from \\\"../utils/ECDSA.sol\\\";\\n\\ncontract TwitterVerification is ChainlinkClient, OwnableBaseRelayRecipient {\\n    using ECDSA for bytes32;\\n    using CBORChainlink for BufferChainlink.buffer;\\n\\n    event RequestTwitterVerificationFulfilled(bytes32 indexed requestId, bytes32 indexed username);\\n    event UserSignUpResult(address userAddress, string username, bool result);\\n\\n    uint256 constant private ORACLE_PAYMENT = 0.1 * 10 ** 18;\\n    mapping(bytes32 => string) request2username;\\n    mapping(bytes32 => address) request2address;\\n    address private _oracle;\\n    address private _admin;\\n    string private _jobId;\\n    BufferChainlink.buffer private buf;\\n\\n    constructor(address link, address oracle, string memory jobId, address _trustedForwarder, address admin) public OwnableBaseRelayRecipient() {\\n        setChainlinkToken(link);\\n        _oracle = oracle;\\n        _jobId = jobId;\\n        trustedForwarder = _trustedForwarder;\\n        _admin = admin;\\n    }\\n\\n    function requestTwitterVerification(bytes memory signature, uint256 hash, string memory username) public {\\n        require(verifySignature(signature, _msgSender(), username), \\\"Incorrect Signature\\\");\\n        require(bytes32(hash) == keccak256(signature));\\n        Chainlink.Request memory req = buildChainlinkRequest(stringToBytes32(_jobId), address(this), this.fulfillVerification.selector);\\n        req.addBytes(\\\"hashtag\\\", abi.encodePacked(hash));\\n        req.add(\\\"username\\\", username);\\n        bytes32 reqId = sendChainlinkRequestTo(_oracle, req, ORACLE_PAYMENT);\\n        request2username[reqId] = username;\\n        request2address[reqId] = _msgSender();\\n    }\\n\\n    function fulfillVerification(bytes32 _requestId, bool result) public recordChainlinkFulfillment(_requestId)\\n    {\\n        emit UserSignUpResult(request2address[_requestId], request2username[_requestId], result);\\n        if (result) {\\n            _admin.call(abi.encodeWithSignature(\\\"signUp(address,string)\\\", request2address[_requestId], request2username[_requestId]));\\n        }\\n    }\\n\\n    function withdrawLink() public onlyOwner {\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n        require(link.transfer(_msgSender(), link.balanceOf(address(this))), \\\"Unable to transfer\\\");\\n    }\\n\\n    function cancelRequest(bytes32 _requestId, uint256 _payment, bytes4 _callbackFunctionId, uint256 _expiration)\\n    public onlyOwner {\\n        cancelChainlinkRequest(_requestId, _payment, _callbackFunctionId, _expiration);\\n    }\\n\\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly { // solhint-disable-line no-inline-assembly\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    function versionRecipient() external view override  returns (string memory){\\n        return \\\"2.1.0\\\";\\n    }\\n\\n    function verifySignature(bytes memory signature, address userAddress, string memory username) public view returns (bool) {\\n\\n        string memory header = \\\"\\\\x19Ethereum Signed Message:\\\\n000000\\\";\\n        string memory main = \\\"Verifying on Creaton With My Twitter Account: @\\\";\\n        string memory message = string(abi.encodePacked(main, username));\\n        uint256 lengthOffset;\\n        uint256 length;\\n        assembly {\\n            length := mload(message)\\n            lengthOffset := add(header, 57)\\n        }\\n\\n        require(length <= 999999);\\n\\n        uint256 lengthLength = 0;\\n\\n        uint256 divisor = 100000;\\n\\n        while (divisor != 0) {\\n\\n            uint256 digit = length / divisor;\\n            if (digit == 0) {\\n                if (lengthLength == 0) {\\n                    divisor /= 10;\\n                    continue;\\n                }\\n            }\\n\\n            lengthLength++;\\n\\n            length -= digit * divisor;\\n\\n            divisor /= 10;\\n\\n            digit += 0x30;\\n            lengthOffset++;\\n\\n            assembly {\\n                mstore8(lengthOffset, digit)\\n            }\\n        }\\n\\n        if (lengthLength == 0) {\\n            lengthLength = 1 + 0x19 + 1;\\n        } else {\\n            lengthLength += 1 + 0x19;\\n        }\\n\\n        assembly {\\n            mstore(header, lengthLength)\\n        }\\n\\n        bytes32 check = keccak256(abi.encodePacked(header, message));\\n        return (userAddress == check.recover(signature));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x57096960e30fde86dc2d8b067c71c07202675034a8bdd3d9489c248d17f48676\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063c203dfe011610081578063efd716341161005b578063efd716341461018c578063f2fde38b1461019f578063ff9e4276146101b2576100d4565b8063c203dfe014610146578063cfb5192814610159578063ec65d0f814610179576100d4565b80637da0a877116100b25780637da0a877146101215780638da5cb5b146101365780638dc654a21461013e576100d4565b8063486ff0cd146100d9578063572b6c05146100f7578063715018a614610117575b600080fd5b6100e16101c5565b6040516100ee91906119d3565b60405180910390f35b61010a610105366004611519565b6101fd565b6040516100ee919061196d565b61011f610214565b005b6101296102b3565b6040516100ee9190611846565b6101296102c2565b61011f6102d1565b61011f610154366004611653565b610456565b61016c6101673660046116a6565b61069d565b6040516100ee919061183d565b61011f61018736600461157f565b6106bb565b61011f61019a366004611550565b61070c565b61011f6101ad366004611519565b6108e0565b61010a6101c03660046115e1565b6109ae565b60408051808201909152600581527f322e312e3000000000000000000000000000000000000000000000000000000060208201525b90565b6006546001600160a01b038281169116145b919050565b61021c610b0c565b6001600160a01b031661022d6102c2565b6001600160a01b03161461025c5760405162461bcd60e51b815260040161025390611bff565b60405180910390fd5b6007546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36007805473ffffffffffffffffffffffffffffffffffffffff19169055565b6006546001600160a01b031681565b6007546001600160a01b031690565b6102d9610b0c565b6001600160a01b03166102ea6102c2565b6001600160a01b0316146103105760405162461bcd60e51b815260040161025390611bff565b600061031a610b5c565b9050806001600160a01b031663a9059cbb610333610b0c565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038516906370a0823190610378903090600401611846565b60206040518083038186803b15801561039057600080fd5b505afa1580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c891906116d9565b6040518363ffffffff1660e01b81526004016103e592919061185a565b602060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104379190611534565b6104535760405162461bcd60e51b815260040161025390611bc8565b50565b61046883610462610b0c565b836109ae565b6104845760405162461bcd60e51b815260040161025390611c34565b82516020840120821461049657600080fd5b61049e61139d565b600c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815261055f93610538939192909183018282801561052e5780601f106105035761010080835404028352916020019161052e565b820191906000526020600020905b81548152906001019060200180831161051157829003601f168201915b505050505061069d565b307fefd7163400000000000000000000000000000000000000000000000000000000610b6b565b90506105c96040518060400160405280600781526020017f6861736874616700000000000000000000000000000000000000000000000000815250846040516020016105ab919061183d565b60408051601f1981840301815291905283919063ffffffff610b9616565b60408051808201909152600881527f757365726e616d65000000000000000000000000000000000000000000000000602082015261060f9082908463ffffffff610bc016565b600a54600090610631906001600160a01b03168367016345785d8a0000610bea565b600081815260086020908152604090912085519293506106559290918601906113d2565b5061065e610b0c565b600091825260096020526040909120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905550505050565b805160009082906106b257506000905061020f565b50506020015190565b6106c3610b0c565b6001600160a01b03166106d46102c2565b6001600160a01b0316146106fa5760405162461bcd60e51b815260040161025390611bff565b61070684848484610d36565b50505050565b60008281526005602052604090205482906001600160a01b031633146107445760405162461bcd60e51b815260040161025390611c6b565b600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a260008381526009602090815260408083205460089092529182902091517fff83fb86664b9ba6a53499ee6ee9e9190cc1e8561465908d7f066c97f801bf12926107e8926001600160a01b0316918690611895565b60405180910390a181156108db57600b5460008481526009602090815260408083205460089092529182902091516001600160a01b03938416936108329392169190602401611873565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb531ff12000000000000000000000000000000000000000000000000000000001790525161089591906117be565b6000604051808303816000865af19150503d80600081146108d2576040519150601f19603f3d011682016040523d82523d6000602084013e6108d7565b606091505b5050505b505050565b6108e8610b0c565b6001600160a01b03166108f96102c2565b6001600160a01b03161461091f5760405162461bcd60e51b815260040161025390611bff565b6001600160a01b0381166109455760405162461bcd60e51b815260040161025390611a54565b6007546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051808201825260208082527f19457468657265756d205369676e6564204d6573736167653a0a3030303030308183015282516060818101909452602f80825260009492611d0f90830139905060608185604051602001610a1292919061180f565b60408051601f1981840301815291905280519091506039840190620f423f811115610a3c57600080fd5b6000620186a05b8015610a90576000818481610a5457fe5b04905080610a6b5782610a6b5750600a9004610a43565b80820290930392600190920191600a8260019096019504915060300180855350610a43565b81610a9e57601b9150610aa5565b601a820191505b81875260008786604051602001610abd92919061180f565b60408051601f1981840301815291905280516020909101209050610ae7818d63ffffffff610e1a16565b6001600160a01b03168b6001600160a01b031614985050505050505050509392505050565b600060183610801590610b235750610b23336101fd565b15610b5557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6101fa565b50336101fa565b6002546001600160a01b031690565b610b7361139d565b610b7b61139d565b610b8d8186868663ffffffff610e6716565b95945050505050565b6080830151610bab908363ffffffff610ebc16565b60808301516108db908263ffffffff610ed916565b6080830151610bd5908363ffffffff610ebc16565b60808301516108db908263ffffffff610ebc16565b600030600454604051602001610c019291906117da565b60408051808303601f190181529181528151602092830120600454606087015260008181526005909352818320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038916179055905190925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af991a26002546001600160a01b0316634000aea08584610c9a87610ee6565b6040518463ffffffff1660e01b8152600401610cb893929190611945565b602060405180830381600087803b158015610cd257600080fd5b505af1158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190611534565b610d265760405162461bcd60e51b815260040161025390611ab1565b6004805460010190559392505050565b600084815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff19811690915590516001600160a01b039091169186917fe1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c59190a26040517f6ee4d5530000000000000000000000000000000000000000000000000000000081526001600160a01b03821690636ee4d55390610de1908890889088908890600401611978565b600060405180830381600087803b158015610dfb57600080fd5b505af1158015610e0f573d6000803e3d6000fd5b505050505050505050565b60008151604114610e3d5760405162461bcd60e51b815260040161025390611a1d565b60208201516040830151606084015160001a610e5b86828585610f8f565b93505050505b92915050565b610e6f61139d565b610e7f856080015161010061107c565b50509183526001600160a01b031660208301527fffffffff0000000000000000000000000000000000000000000000000000000016604082015290565b610ec982600383516110b6565b6108db828263ffffffff6111c016565b610ec982600283516110b6565b6060634042994660e01b60008084600001518560200151866040015187606001516001896080015160000151604051602401610f299897969594939291906118c9565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610fd15760405162461bcd60e51b815260040161025390611b0e565b8360ff16601b1480610fe657508360ff16601c145b6110025760405162461bcd60e51b815260040161025390611b6b565b60006001868686866040516000815260200160405260405161102794939291906119b5565b6020604051602081039080840390855afa158015611049573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610b8d5760405162461bcd60e51b8152600401610253906119e6565b611084611450565b60208206156110995760208206602003820191505b506020828101829052604080518085526000815290920101905290565b601781116110dd576110d78360e0600585901b16831763ffffffff6111e116565b506108db565b60ff811161111357611100836018611fe0600586901b161763ffffffff6111e116565b506110d78382600163ffffffff6111f916565b61ffff811161114a57611137836019611fe0600586901b161763ffffffff6111e116565b506110d78382600263ffffffff6111f916565b63ffffffff81116111835761117083601a611fe0600586901b161763ffffffff6111e116565b506110d78382600463ffffffff6111f916565b67ffffffffffffffff81116108db576111ad83601b611fe0600586901b161763ffffffff6111e116565b506107068382600863ffffffff6111f916565b6111c8611450565b6111da8384600001515184855161121a565b9392505050565b6111e9611450565b6111da83846000015151846112c6565b611201611450565b611212848560000151518585611311565b949350505050565b611222611450565b825182111561123057600080fd5b8460200151828501111561125a5761125a85611252876020015187860161136f565b600202611386565b6000808651805187602083010193508088870111156112795787860182525b505050602084015b602084106112a05780518252601f199093019260209182019101611281565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6112ce611450565b836020015183106112ea576112ea848560200151600202611386565b835180516020858301018481535080851415611307576001810182525b5093949350505050565b611319611450565b846020015184830111156113365761133685858401600202611386565b60006001836101000a0390508551838682010185831982511617815250805184870111156113645783860181525b509495945050505050565b600081831115611380575081610e61565b50919050565b8151611392838361107c565b5061070683826111c0565b6040805160a0810182526000808252602082018190529181018290526060810191909152608081016113cd611450565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061141357805160ff1916838001178555611440565b82800160010185558215611440579182015b82811115611440578251825591602001919060010190611425565b5061144c92915061146a565b5090565b604051806040016040528060608152602001600081525090565b6101fa91905b8082111561144c5760008155600101611470565b80356001600160a01b0381168114610e6157600080fd5b600082601f8301126114ab578081fd5b813567ffffffffffffffff808211156114c2578283fd5b6040516020601f19601f85011682010181811083821117156114e2578485fd5b6040528281529250828483016020018610156114fd57600080fd5b8260208601602083013760006020848301015250505092915050565b60006020828403121561152a578081fd5b6111da8383611484565b600060208284031215611545578081fd5b81516111da81611d00565b60008060408385031215611562578081fd5b82359150602083013561157481611d00565b809150509250929050565b60008060008060808587031215611594578182fd5b843593506020850135925060408501357fffffffff00000000000000000000000000000000000000000000000000000000811681146115d1578283fd5b9396929550929360600135925050565b6000806000606084860312156115f5578283fd5b833567ffffffffffffffff8082111561160c578485fd5b6116188783880161149b565b94506116278760208801611484565b9350604086013591508082111561163c578283fd5b506116498682870161149b565b9150509250925092565b600080600060608486031215611667578283fd5b833567ffffffffffffffff8082111561167e578485fd5b61168a8783880161149b565b945060208601359350604086013591508082111561163c578283fd5b6000602082840312156116b7578081fd5b813567ffffffffffffffff8111156116cd578182fd5b6112128482850161149b565b6000602082840312156116ea578081fd5b5051919050565b60008151808452611709816020860160208601611cd4565b601f01601f19169290920160200192915050565b6000815460018082166000811461173b5760018114611777576117b5565b607f600284041686527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831660208701526040860193506117b5565b6002830480875261178786611cc8565b60005b828110156117ab5781546020828b010152848201915060208101905061178a565b8801602001955050505b50505092915050565b600082516117d0818460208701611cd4565b9190910192915050565b60609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252601482015260340190565b60008351611821818460208801611cd4565b8351908301611834828260208801611cd4565b01949350505050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60006001600160a01b038416825260406020830152611212604083018461171d565b60006001600160a01b0385168252606060208301526118b7606083018561171d565b90508215156040830152949350505050565b60006101006001600160a01b03808c1684528a60208501528960408501528089166060850152507fffffffff00000000000000000000000000000000000000000000000000000000871660808401528560a08401528460c08401528060e0840152611936818401856116f1565b9b9a5050505050505050505050565b60006001600160a01b038516825283602083015260606040830152610b8d60608301846116f1565b901515815260200190565b93845260208401929092527fffffffff00000000000000000000000000000000000000000000000000000000166040830152606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526111da60208301846116f1565b60208082526018908201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604082015260600190565b6020808252601f908201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160408201527f636c650000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60408201527f7565000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f556e61626c6520746f207472616e736665720000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527f496e636f7272656374205369676e617475726500000000000000000000000000604082015260600190565b60208082526028908201527f536f75726365206d75737420626520746865206f7261636c65206f662074686560408201527f2072657175657374000000000000000000000000000000000000000000000000606082015260800190565b60009081526020902090565b60005b83811015611cef578181015183820152602001611cd7565b838111156107065750506000910152565b801515811461045357600080fdfe566572696679696e67206f6e2043726561746f6e2057697468204d792054776974746572204163636f756e743a2040a26469706673582212209a336c1348c14d2919c2015d74fb55f0c5f736a7ef10e03cd685ccdf3c93945964736f6c63430006060033",
    "devdoc": {
      "methods": {
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      }
    },
    "userdoc": {
      "methods": {}
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 303,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "ens",
          "offset": 0,
          "slot": "0",
          "type": "t_contract(ENSInterface)1403"
        },
        {
          "astId": 305,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "ensNode",
          "offset": 0,
          "slot": "1",
          "type": "t_bytes32"
        },
        {
          "astId": 307,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "link",
          "offset": 0,
          "slot": "2",
          "type": "t_contract(LinkTokenInterface)1498"
        },
        {
          "astId": 309,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "oracle",
          "offset": 0,
          "slot": "3",
          "type": "t_contract(ChainlinkRequestInterface)1323"
        },
        {
          "astId": 312,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "requestCount",
          "offset": 0,
          "slot": "4",
          "type": "t_uint256"
        },
        {
          "astId": 316,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "pendingRequests",
          "offset": 0,
          "slot": "5",
          "type": "t_mapping(t_bytes32,t_address)"
        },
        {
          "astId": 2728,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "trustedForwarder",
          "offset": 0,
          "slot": "6",
          "type": "t_address"
        },
        {
          "astId": 2829,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "_owner",
          "offset": 0,
          "slot": "7",
          "type": "t_address"
        },
        {
          "astId": 3116,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "request2username",
          "offset": 0,
          "slot": "8",
          "type": "t_mapping(t_bytes32,t_string_storage)"
        },
        {
          "astId": 3120,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "request2address",
          "offset": 0,
          "slot": "9",
          "type": "t_mapping(t_bytes32,t_address)"
        },
        {
          "astId": 3122,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "_oracle",
          "offset": 0,
          "slot": "10",
          "type": "t_address"
        },
        {
          "astId": 3124,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "_admin",
          "offset": 0,
          "slot": "11",
          "type": "t_address"
        },
        {
          "astId": 3126,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "_jobId",
          "offset": 0,
          "slot": "12",
          "type": "t_string_storage"
        },
        {
          "astId": 3128,
          "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
          "label": "buf",
          "offset": 0,
          "slot": "13",
          "type": "t_struct(buffer)1577_storage"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_bytes32": {
          "encoding": "inplace",
          "label": "bytes32",
          "numberOfBytes": "32"
        },
        "t_bytes_storage": {
          "encoding": "bytes",
          "label": "bytes",
          "numberOfBytes": "32"
        },
        "t_contract(ChainlinkRequestInterface)1323": {
          "encoding": "inplace",
          "label": "contract ChainlinkRequestInterface",
          "numberOfBytes": "20"
        },
        "t_contract(ENSInterface)1403": {
          "encoding": "inplace",
          "label": "contract ENSInterface",
          "numberOfBytes": "20"
        },
        "t_contract(LinkTokenInterface)1498": {
          "encoding": "inplace",
          "label": "contract LinkTokenInterface",
          "numberOfBytes": "20"
        },
        "t_mapping(t_bytes32,t_address)": {
          "encoding": "mapping",
          "key": "t_bytes32",
          "label": "mapping(bytes32 => address)",
          "numberOfBytes": "32",
          "value": "t_address"
        },
        "t_mapping(t_bytes32,t_string_storage)": {
          "encoding": "mapping",
          "key": "t_bytes32",
          "label": "mapping(bytes32 => string)",
          "numberOfBytes": "32",
          "value": "t_string_storage"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_struct(buffer)1577_storage": {
          "encoding": "inplace",
          "label": "struct BufferChainlink.buffer",
          "members": [
            {
              "astId": 1574,
              "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
              "label": "buf",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes_storage"
            },
            {
              "astId": 1576,
              "contract": "src/verification/TwitterVerification.sol:TwitterVerification",
              "label": "capacity",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "64"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  },
  "Paymaster": {
    "address": "0xc94fB63908342C77a81e7bd008013a955dAD2825",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_stakingContract",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "FORWARDER_HUB_OVERHEAD",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "PAYMASTER_ACCEPTANCE_BUDGET",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "POST_RELAYED_CALL_GAS_LIMIT",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "PRE_RELAYED_CALL_GAS_LIMIT",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "gas",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "nonce",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                  }
                ],
                "internalType": "struct IForwarder.ForwardRequest",
                "name": "request",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "gasPrice",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "pctRelayFee",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "baseRelayFee",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "relayWorker",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "paymaster",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes",
                    "name": "paymasterData",
                    "type": "bytes"
                  },
                  {
                    "internalType": "uint256",
                    "name": "clientId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "forwarder",
                    "type": "address"
                  }
                ],
                "internalType": "struct GsnTypes.RelayData",
                "name": "relayData",
                "type": "tuple"
              }
            ],
            "internalType": "struct GsnTypes.RelayRequest",
            "name": "relayRequest",
            "type": "tuple"
          }
        ],
        "name": "_verifyForwarder",
        "outputs": [],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_contract",
            "type": "address"
          }
        ],
        "name": "addContract",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "creatorContract",
            "type": "address"
          }
        ],
        "name": "addCreatorContract",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "creatonAdmin",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getGasLimits",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "acceptanceBudget",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "preRelayedCallGasLimit",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "postRelayedCallGasLimit",
                "type": "uint256"
              }
            ],
            "internalType": "struct IPaymaster.GasLimits",
            "name": "limits",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getHubAddr",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getRelayHubDeposit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "context",
            "type": "bytes"
          },
          {
            "internalType": "bool",
            "name": "success",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "gasUseWithoutPost",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "gasPrice",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "pctRelayFee",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "baseRelayFee",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "relayWorker",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "paymaster",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "paymasterData",
                "type": "bytes"
              },
              {
                "internalType": "uint256",
                "name": "clientId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "forwarder",
                "type": "address"
              }
            ],
            "internalType": "struct GsnTypes.RelayData",
            "name": "relayData",
            "type": "tuple"
          }
        ],
        "name": "postRelayedCall",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "components": [
                  {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                  },
                  {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "gas",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "nonce",
                    "type": "uint256"
                  },
                  {
                    "internalType": "bytes",
                    "name": "data",
                    "type": "bytes"
                  }
                ],
                "internalType": "struct IForwarder.ForwardRequest",
                "name": "request",
                "type": "tuple"
              },
              {
                "components": [
                  {
                    "internalType": "uint256",
                    "name": "gasPrice",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "pctRelayFee",
                    "type": "uint256"
                  },
                  {
                    "internalType": "uint256",
                    "name": "baseRelayFee",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "relayWorker",
                    "type": "address"
                  },
                  {
                    "internalType": "address",
                    "name": "paymaster",
                    "type": "address"
                  },
                  {
                    "internalType": "bytes",
                    "name": "paymasterData",
                    "type": "bytes"
                  },
                  {
                    "internalType": "uint256",
                    "name": "clientId",
                    "type": "uint256"
                  },
                  {
                    "internalType": "address",
                    "name": "forwarder",
                    "type": "address"
                  }
                ],
                "internalType": "struct GsnTypes.RelayData",
                "name": "relayData",
                "type": "tuple"
              }
            ],
            "internalType": "struct GsnTypes.RelayRequest",
            "name": "relayRequest",
            "type": "tuple"
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "approvalData",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "maxPossibleGas",
            "type": "uint256"
          }
        ],
        "name": "preRelayedCall",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "context",
            "type": "bytes"
          },
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_admin",
            "type": "address"
          }
        ],
        "name": "setAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IRelayHub",
            "name": "hub",
            "type": "address"
          }
        ],
        "name": "setRelayHub",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IForwarder",
            "name": "forwarder",
            "type": "address"
          }
        ],
        "name": "setTrustedForwarder",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "stakingContract",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "targets",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "token",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "trustedForwarder",
        "outputs": [
          {
            "internalType": "contract IForwarder",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "versionPaymaster",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "address payable",
            "name": "target",
            "type": "address"
          }
        ],
        "name": "withdrawRelayHubDepositTo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "transactionHash": "0xf36b5d67fe726bb5d9640021062c0a06a77ea044ccd95421e45a7efdf517a4d6",
    "receipt": {
      "to": null,
      "from": "0xC7AF24dc120b0a74b73E360378867d0c9541094c",
      "contractAddress": "0xc94fB63908342C77a81e7bd008013a955dAD2825",
      "transactionIndex": 6,
      "gasUsed": "1418955",
      "logsBloom": "0x
      "blockHash": "0x0dce8790d3e9350c39e4bea1d71712b23e8dcd2b18098c9ab6526c894eb9850b",
      "transactionHash": "0xf36b5d67fe726bb5d9640021062c0a06a77ea044ccd95421e45a7efdf517a4d6",
      "logs": [
        {
          "transactionIndex": 6,
          "blockNumber": 4704308,
          "transactionHash": "0xf36b5d67fe726bb5d9640021062c0a06a77ea044ccd95421e45a7efdf517a4d6",
          "address": "0xc94fB63908342C77a81e7bd008013a955dAD2825",
          "topics": [
            "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000c7af24dc120b0a74b73e360378867d0c9541094c"
          ],
          "data": "0x",
          "logIndex": 13,
          "blockHash": "0x0dce8790d3e9350c39e4bea1d71712b23e8dcd2b18098c9ab6526c894eb9850b"
        }
      ],
      "blockNumber": 4704308,
      "cumulativeGasUsed": "3890306",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0x3E0d24f43e470D703FC664e5878aD57B23702121",
      "0x8aF4743F61166fD9f7bFd63BEc3f54b7Dcfe2D44"
    ],
    "solcInputHash": "1d2abd5f78e13e50b92a11bd1741c557",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FORWARDER_HUB_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMASTER_ACCEPTANCE_BUDGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POST_RELAYED_CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_RELAYED_CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"}],\"name\":\"_verifyForwarder\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContract\",\"type\":\"address\"}],\"name\":\"addCreatorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatonAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"acceptanceBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRelayedCallGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymaster.GasLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHubAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayHubDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUseWithoutPost\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxPossibleGas\",\"type\":\"uint256\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRelayHub\",\"name\":\"hub\",\"type\":\"address\"}],\"name\":\"setRelayHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IForwarder\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"contract IForwarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionPaymaster\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"withdrawRelayHubDepositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))\":{\"params\":{\"context\":\"- the call context, as returned by the preRelayedCall\",\"gasUseWithoutPost\":\"- the actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.\",\"relayData\":\"- the relay params of the request. can be used by relayHub.calculateCharge() Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction.\",\"success\":\"- true if the relayed call succeeded, false if it reverted\"}},\"preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)\":{\"params\":{\"approvalData\":\"- extra dapp-specific data (e.g. signature from trusted party)\",\"maxPossibleGas\":\"- based on values returned from {@link getGasLimits},         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.         In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"  return:      a context to be passed to postRelayedCall      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).\",\"relayRequest\":\"- the full relay request structure\",\"signature\":\"- user's EIP712-compatible signature of the {@link relayRequest}.              Note that in most cases the paymaster shouldn't try use it at all. It is always checked              by the forwarder immediately after preRelayedCall returns.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getGasLimits()\":{\"notice\":\"Return the GasLimits constants used by the Paymaster.\"},\"getHubAddr()\":{\"notice\":\"return the relayHub of this contract.\"},\"getRelayHubDeposit()\":{\"notice\":\"check current deposit on relay hub.\"},\"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))\":{\"notice\":\"This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. MUST be protected with relayHubOnly() in case it modifies state.\"},\"preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)\":{\"notice\":\"Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call. MUST be protected with relayHubOnly() in case it modifies state. The Paymaster rejects by the following \\\"revert\\\" operations  - preRelayedCall() method reverts  - the forwarder reverts because of nonce or signature error  - the paymaster returned \\\"rejectOnRecipientRevert\\\", and the recipient contract reverted. In any of the above cases, all paymaster calls (and recipient call) are reverted. In any other case, the paymaster agrees to pay for the gas cost of the transaction (note  that this includes also postRelayedCall revert) The rejectOnRecipientRevert flag means the Paymaster \\\"delegate\\\" the rejection to the recipient  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,  otherwise the TX is paid by the Paymaster.\"},\"withdrawRelayHubDepositTo(uint256,address)\":{\"notice\":\"withdraw deposit from relayHub\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/metatx/CreatonPaymaster.sol\":\"CreatonPaymaster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x752ac2a89da774de5c98f8ca1adcad306ce00d0ebb547ad7be8ba7e95468aa73\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/BasePaymaster.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/GsnTypes.sol\\\";\\nimport \\\"./interfaces/IPaymaster.sol\\\";\\nimport \\\"./interfaces/IRelayHub.sol\\\";\\nimport \\\"./utils/GsnEip712Library.sol\\\";\\nimport \\\"./forwarder/Forwarder.sol\\\";\\n\\n/**\\n * Abstract base class to be inherited by a concrete Paymaster\\n * A subclass must implement:\\n *  - preRelayedCall\\n *  - postRelayedCall\\n */\\nabstract contract BasePaymaster is IPaymaster, Ownable {\\n\\n    IRelayHub internal relayHub;\\n    IForwarder public override trustedForwarder;\\n\\n    function getHubAddr() public override view returns (address) {\\n        return address(relayHub);\\n    }\\n\\n    //overhead of forwarder verify+signature, plus hub overhead.\\n    uint256 constant public FORWARDER_HUB_OVERHEAD = 50000;\\n\\n    //These parameters are documented in IPaymaster.GasLimits\\n    uint256 constant public PRE_RELAYED_CALL_GAS_LIMIT = 100000;\\n    uint256 constant public POST_RELAYED_CALL_GAS_LIMIT = 110000;\\n    uint256 constant public PAYMASTER_ACCEPTANCE_BUDGET = PRE_RELAYED_CALL_GAS_LIMIT + FORWARDER_HUB_OVERHEAD;\\n\\n    function getGasLimits()\\n    public\\n    override\\n    virtual\\n    view\\n    returns (\\n        IPaymaster.GasLimits memory limits\\n    ) {\\n        return IPaymaster.GasLimits(\\n            PAYMASTER_ACCEPTANCE_BUDGET,\\n            PRE_RELAYED_CALL_GAS_LIMIT,\\n            POST_RELAYED_CALL_GAS_LIMIT\\n        );\\n    }\\n\\n    // this method must be called from preRelayedCall to validate that the forwarder\\n    // is approved by the paymaster as well as by the recipient contract.\\n    function _verifyForwarder(GsnTypes.RelayRequest calldata relayRequest)\\n    public\\n    view\\n    {\\n        require(address(trustedForwarder) == relayRequest.relayData.forwarder, \\\"Forwarder is not trusted\\\");\\n        GsnEip712Library.verifyForwarderTrusted(relayRequest);\\n    }\\n\\n    /*\\n     * modifier to be used by recipients as access control protection for preRelayedCall & postRelayedCall\\n     */\\n    modifier relayHubOnly() {\\n        require(msg.sender == getHubAddr(), \\\"Function can only be called by RelayHub\\\");\\n        _;\\n    }\\n\\n    function setRelayHub(IRelayHub hub) public onlyOwner {\\n        relayHub = hub;\\n    }\\n\\n    function setTrustedForwarder(IForwarder forwarder) public onlyOwner {\\n        trustedForwarder = forwarder;\\n    }\\n\\n    /// check current deposit on relay hub.\\n    function getRelayHubDeposit()\\n    public\\n    override\\n    view\\n    returns (uint) {\\n        return relayHub.balanceOf(address(this));\\n    }\\n\\n    // any money moved into the paymaster is transferred as a deposit.\\n    // This way, we don't need to understand the RelayHub API in order to replenish\\n    // the paymaster.\\n    receive() external virtual payable {\\n        require(address(relayHub) != address(0), \\\"relay hub address not set\\\");\\n        relayHub.depositFor{value:msg.value}(address(this));\\n    }\\n\\n    /// withdraw deposit from relayHub\\n    function withdrawRelayHubDepositTo(uint amount, address payable target) public onlyOwner {\\n        relayHub.withdraw(amount, target);\\n    }\\n}\\n\",\"keccak256\":\"0xf2d86f0ef53d74443679141c6063feb265c6ae88b1433b8dd93e1f4f97f00eb2\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/forwarder/Forwarder.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwarder.sol\\\";\\n\\ncontract Forwarder is IForwarder {\\n    using ECDSA for bytes32;\\n\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data\\\";\\n\\n    string public constant EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    mapping(bytes32 => bool) public typeHashes;\\n    mapping(bytes32 => bool) public domains;\\n\\n    // Nonces of senders, used to prevent replay attacks\\n    mapping(address => uint256) private nonces;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function getNonce(address from)\\n    public view override\\n    returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    constructor() public {\\n\\n        string memory requestType = string(abi.encodePacked(\\\"ForwardRequest(\\\", GENERIC_PARAMS, \\\")\\\"));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function verify(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    external override view {\\n\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n    }\\n\\n    function execute(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig\\n    )\\n    external payable\\n    override\\n    returns (bool success, bytes memory ret) {\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n        _updateNonce(req);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(abi.encodePacked(req.data, req.from));\\n        if ( address(this).balance>0 ) {\\n            //can't fail: req.from signed (off-chain) the request, so it must be an EOA...\\n            payable(req.from).transfer(address(this).balance);\\n        }\\n        return (success,ret);\\n    }\\n\\n\\n    function _verifyNonce(ForwardRequest memory req) internal view {\\n        require(nonces[req.from] == req.nonce, \\\"nonce mismatch\\\");\\n    }\\n\\n    function _updateNonce(ForwardRequest memory req) internal {\\n        nonces[req.from]++;\\n    }\\n\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\\n\\n        for (uint i = 0; i < bytes(typeName).length; i++) {\\n            bytes1 c = bytes(typeName)[i];\\n            require(c != \\\"(\\\" && c != \\\")\\\", \\\"invalid typename\\\");\\n        }\\n\\n        string memory requestType = string(abi.encodePacked(typeName, \\\"(\\\", GENERIC_PARAMS, \\\",\\\", typeSuffix));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\\n        uint256 chainId;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly { chainId := chainid() }\\n\\n        bytes memory domainValue = abi.encode(\\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            address(this));\\n\\n        bytes32 domainHash = keccak256(domainValue);\\n\\n        domains[domainHash] = true;\\n        emit DomainRegistered(domainHash, domainValue);\\n    }\\n\\n    function registerRequestTypeInternal(string memory requestType) internal {\\n\\n        bytes32 requestTypehash = keccak256(bytes(requestType));\\n        typeHashes[requestTypehash] = true;\\n        emit RequestTypeRegistered(requestTypehash, requestType);\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n\\n    function _verifySig(\\n        ForwardRequest memory req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData,\\n        bytes memory sig)\\n    internal\\n    view\\n    {\\n        require(domains[domainSeparator], \\\"unregistered domain separator\\\");\\n        require(typeHashes[requestTypeHash], \\\"unregistered request typehash\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", domainSeparator,\\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\\n            ));\\n        require(digest.recover(sig) == req.from, \\\"signature mismatch\\\");\\n    }\\n\\n    function _getEncoded(\\n        ForwardRequest memory req,\\n        bytes32 requestTypeHash,\\n        bytes memory suffixData\\n    )\\n    public\\n    pure\\n    returns (\\n        bytes memory\\n    ) {\\n        return abi.encodePacked(\\n            requestTypeHash,\\n            abi.encode(\\n                req.from,\\n                req.to,\\n                req.value,\\n                req.gas,\\n                req.nonce,\\n                keccak256(req.data)\\n            ),\\n            suffixData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xff43678c67e4b9bc36b36a824725ee0d4249cf5d0a6a75c468cef63504d906ae\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IForwarder {\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * verify the transaction would execute.\\n     * validate the signature and the nonce of the request.\\n     * revert if either signature or nonce are incorrect.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * execute a transaction\\n     * @param forwardRequest - all transaction parameters\\n     * @param domainSeparator - domain used when signing this request\\n     * @param requestTypeHash - request type used when signing this request.\\n     * @param suffixData - the extension data used when signing this request.\\n     * @param signature - signature to validate.\\n     *\\n     * the transaction is verified, and then executed.\\n     * the success and ret of \\\"call\\\" are returned.\\n     * This method would revert only verification errors. target errors\\n     * are reported using the returned \\\"success\\\" and ret string\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * Register a new Request typehash.\\n     * @param typeName - the name of the request type.\\n     * @param typeSuffix - anything after the generic params can be empty string (if no extra fields are needed)\\n     *        if it does contain a value, then a comma is added first.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * Register a new domain separator.\\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\\n     * This method is given the domain name and version to create and register the domain separator value.\\n     * @param name the domain's display name\\n     * @param version the domain/protocol version\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\\n\",\"keccak256\":\"0x79c00fa172e65230e836f7e9f6eb976033b9c1f464d7a907aa5d45207537fd9f\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/GsnTypes.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\ninterface GsnTypes {\\n    struct RelayData {\\n        uint256 gasPrice;\\n        uint256 pctRelayFee;\\n        uint256 baseRelayFee;\\n        address relayWorker;\\n        address paymaster;\\n        bytes paymasterData;\\n        uint256 clientId;\\n        address forwarder;\\n    }\\n\\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\\n    struct RelayRequest {\\n        IForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\\n\",\"keccak256\":\"0xeac05d78049d3238dd20025f843c1aa79f344aed0ff2cf3dea27bc410981b4f5\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GsnTypes.sol\\\";\\n\\ninterface IPaymaster {\\n\\n    /**\\n     * @param acceptanceBudget -\\n     *      Paymaster expected gas budget to accept (or reject) a request\\n     *      This a gas required by any calculations that might need to reject the\\n     *      transaction, by preRelayedCall, forwarder and recipient.\\n     *      See value in BasePaymaster.PAYMASTER_ACCEPTANCE_BUDGET\\n     *      Transaction that gets rejected above that gas usage is on the paymaster's expense.\\n     *      As long this value is above preRelayedCallGasLimit (see defaults in BasePaymaster), the\\n     *      Paymaster is guaranteed it will never pay for rejected transactions.\\n     *      If this value is below preRelayedCallGasLimt, it might might make Paymaster open to a \\\"griefing\\\" attack.\\n     *\\n     *      Specifying value too high might make the call rejected by some relayers.\\n     *\\n     *      From a Relay's point of view, this is the highest gas value a paymaster might \\\"grief\\\" the relay,\\n     *      since the paymaster will pay anything above that (regardless if the tx reverts)\\n     *\\n     * @param preRelayedCallGasLimit - the max gas usage of preRelayedCall. any revert (including OOG)\\n     *      of preRelayedCall is a reject by the paymaster.\\n     *      as long as acceptanceBudget is above preRelayedCallGasLimit, any such revert (including OOG)\\n     *      is not payed by the paymaster.\\n     * @param postRelayedCallGasLimit - the max gas usage of postRelayedCall.\\n     *      note that an OOG will revert the transaction, but the paymaster already committed to pay,\\n     *      so the relay will get compensated, at the expense of the paymaster\\n     */\\n    struct GasLimits {\\n        uint256 acceptanceBudget;\\n        uint256 preRelayedCallGasLimit;\\n        uint256 postRelayedCallGasLimit;\\n    }\\n\\n    /**\\n     * Return the GasLimits constants used by the Paymaster.\\n     */\\n    function getGasLimits()\\n    external\\n    view\\n    returns (\\n        GasLimits memory limits\\n    );\\n\\n    function trustedForwarder() external view returns (IForwarder);\\n\\n/**\\n * return the relayHub of this contract.\\n */\\n    function getHubAddr() external view returns (address);\\n\\n    /**\\n     * Can be used to determine if the contract can pay for incoming calls before making any.\\n     * @return the paymaster's deposit in the RelayHub.\\n     */\\n    function getRelayHubDeposit() external view returns (uint256);\\n\\n    /**\\n     * Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call.\\n     *\\n     * MUST be protected with relayHubOnly() in case it modifies state.\\n     *\\n     * The Paymaster rejects by the following \\\"revert\\\" operations\\n     *  - preRelayedCall() method reverts\\n     *  - the forwarder reverts because of nonce or signature error\\n     *  - the paymaster returned \\\"rejectOnRecipientRevert\\\", and the recipient contract reverted.\\n     * In any of the above cases, all paymaster calls (and recipient call) are reverted.\\n     * In any other case, the paymaster agrees to pay for the gas cost of the transaction (note\\n     *  that this includes also postRelayedCall revert)\\n     *\\n     * The rejectOnRecipientRevert flag means the Paymaster \\\"delegate\\\" the rejection to the recipient\\n     *  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,\\n     *  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,\\n     *  otherwise the TX is paid by the Paymaster.\\n     *\\n     *  @param relayRequest - the full relay request structure\\n     *  @param signature - user's EIP712-compatible signature of the {@link relayRequest}.\\n     *              Note that in most cases the paymaster shouldn't try use it at all. It is always checked\\n     *              by the forwarder immediately after preRelayedCall returns.\\n     *  @param approvalData - extra dapp-specific data (e.g. signature from trusted party)\\n     *  @param maxPossibleGas - based on values returned from {@link getGasLimits},\\n     *         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.\\n     *         In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"\\n     *  return:\\n     *      a context to be passed to postRelayedCall\\n     *      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.\\n     *          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.\\n     *          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).\\n     */\\n    function preRelayedCall(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    )\\n    external\\n    returns (bytes memory context, bool rejectOnRecipientRevert);\\n\\n    /**\\n     * This method is called after the actual relayed function call.\\n     * It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call.\\n     *\\n     * MUST be protected with relayHubOnly() in case it modifies state.\\n     *\\n     * @param context - the call context, as returned by the preRelayedCall\\n     * @param success - true if the relayed call succeeded, false if it reverted\\n     * @param gasUseWithoutPost - the actual amount of gas used by the entire transaction, EXCEPT\\n     *        the gas used by the postRelayedCall itself.\\n     * @param relayData - the relay params of the request. can be used by relayHub.calculateCharge()\\n     *\\n     * Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster\\n     * is still committed to pay the relay for the entire transaction.\\n     */\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        GsnTypes.RelayData calldata relayData\\n    ) external;\\n\\n    function versionPaymaster() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x29f01fad832cb05fb5c72141b86d77b47fd46bf70082af25dfbf1c0896fd5c11\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IRelayHub.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GsnTypes.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\n\\ninterface IRelayHub {\\n\\n    /// Emitted when a relay server registers or updates its details\\n    /// Looking at these events lets a client discover relay servers\\n    event RelayServerRegistered(\\n        address indexed relayManager,\\n        uint256 baseRelayFee,\\n        uint256 pctRelayFee,\\n        string relayUrl);\\n\\n    /// Emitted when relays are added by a relayManager\\n    event RelayWorkersAdded(\\n        address indexed relayManager,\\n        address[] newRelayWorkers,\\n        uint256 workersCount\\n    );\\n\\n    // Emitted when an account withdraws funds from RelayHub.\\n    event Withdrawn(\\n        address indexed account,\\n        address indexed dest,\\n        uint256 amount\\n    );\\n\\n    // Emitted when depositFor is called, including the amount and account that was funded.\\n    event Deposited(\\n        address indexed paymaster,\\n        address indexed from,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when an attempt to relay a call fails and Paymaster does not accept the transaction.\\n    /// The actual relayed call was not executed, and the recipient not charged.\\n    /// @param reason contains a revert reason returned from preRelayedCall or forwarder.\\n    event TransactionRejectedByPaymaster(\\n        address indexed relayManager,\\n        address indexed paymaster,\\n        address indexed from,\\n        address to,\\n        address relayWorker,\\n        bytes4 selector,\\n        uint256 innerGasUsed,\\n        bytes reason);\\n\\n    // Emitted when a transaction is relayed. Note that the actual encoded function might be reverted: this will be\\n    // indicated in the status field.\\n    // Useful when monitoring a relay's operation and relayed calls to a contract.\\n    // Charge is the ether value deducted from the recipient's balance, paid to the relay's manager.\\n    event TransactionRelayed(\\n        address indexed relayManager,\\n        address indexed relayWorker,\\n        address indexed from,\\n        address to,\\n        address paymaster,\\n        bytes4 selector,\\n        RelayCallStatus status,\\n        uint256 charge);\\n\\n    event TransactionResult(\\n        RelayCallStatus status,\\n        bytes returnValue\\n    );\\n\\n    /// Reason error codes for the TransactionRelayed event\\n    /// @param OK - the transaction was successfully relayed and execution successful - never included in the event\\n    /// @param RelayedCallFailed - the transaction was relayed, but the relayed call failed\\n    /// @param RejectedByPreRelayed - the transaction was not relayed due to preRelatedCall reverting\\n    /// @param RejectedByForwarder - the transaction was not relayed due to forwarder check (signature,nonce)\\n    /// @param PostRelayedFailed - the transaction was relayed and reverted due to postRelatedCall reverting\\n    /// @param PaymasterBalanceChanged - the transaction was relayed and reverted due to the paymaster balance change\\n    enum RelayCallStatus {\\n        OK,\\n        RelayedCallFailed,\\n        RejectedByPreRelayed,\\n        RejectedByForwarder,\\n        RejectedByRecipientRevert,\\n        PostRelayedFailed,\\n        PaymasterBalanceChanged\\n    }\\n\\n    /// Add new worker addresses controlled by sender who must be a staked Relay Manager address.\\n    /// Emits a RelayWorkersAdded event.\\n    /// This function can be called multiple times, emitting new events\\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\\n\\n    function registerRelayServer(uint256 baseRelayFee, uint256 pctRelayFee, string calldata url) external;\\n\\n    // Balance management\\n\\n    // Deposits ether for a contract, so that it can receive (and pay for) relayed transactions. Unused balance can only\\n    // be withdrawn by the contract itself, by calling withdraw.\\n    // Emits a Deposited event.\\n    function depositFor(address target) external payable;\\n\\n    // Withdraws from an account's balance, sending it back to it. Relay managers call this to retrieve their revenue, and\\n    // contracts can also use it to reduce their funding.\\n    // Emits a Withdrawn event.\\n    function withdraw(uint256 amount, address payable dest) external;\\n\\n    // Relaying\\n\\n\\n    /// Relays a transaction. For this to succeed, multiple conditions must be met:\\n    ///  - Paymaster's \\\"acceptRelayCall\\\" method must succeed and not revert\\n    ///  - the sender must be a registered Relay Worker that the user signed\\n    ///  - the transaction's gas price must be equal or larger than the one that was signed by the sender\\n    ///  - the transaction must have enough gas to run all internal transactions if they use all gas available to them\\n    ///  - the Paymaster must have enough balance to pay the Relay Worker for the scenario when all gas is spent\\n    ///\\n    /// If all conditions are met, the call will be relayed and the recipient charged.\\n    ///\\n    /// Arguments:\\n    /// @param relayRequest - all details of the requested relayed call\\n    /// @param signature - client's EIP-712 signature over the relayRequest struct\\n    /// @param approvalData: dapp-specific data forwarded to preRelayedCall.\\n    ///        This value is *not* verified by the Hub. For example, it can be used to pass a signature to the Paymaster\\n    /// @param externalGasLimit - the value passed as gasLimit to the transaction.\\n    ///\\n    /// Emits a TransactionRelayed event.\\n    function relayCall(\\n        uint paymasterMaxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint externalGasLimit\\n    )\\n    external\\n    returns (bool paymasterAccepted, bytes memory returnValue);\\n\\n    function penalize(address relayWorker, address payable beneficiary) external;\\n\\n    /// The fee is expressed as a base fee in wei plus percentage on actual charge.\\n    /// E.g. a value of 40 stands for a 40% fee, so the recipient will be\\n    /// charged for 1.4 times the spent amount.\\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\\n\\n    /* getters */\\n\\n    /// Returns the stake manager of this RelayHub.\\n    function stakeManager() external view returns(IStakeManager);\\n    function penalizer() external view returns(address);\\n\\n    /// Returns an account's deposits. It can be either a deposit of a paymaster, or a revenue of a relay manager.\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    // Minimum stake a relay can have. An attack to the network will never cost less than half this value.\\n    function minimumStake() external view returns (uint256);\\n\\n    // Minimum unstake delay blocks of a relay manager's stake on the StakeManager\\n    function minimumUnstakeDelay() external view returns (uint256);\\n\\n    // Maximum funds that can be deposited at once. Prevents user error by disallowing large deposits.\\n    function maximumRecipientDeposit() external view returns (uint256);\\n\\n    //gas overhead to calculate gasUseWithoutPost\\n    function postOverhead() external view returns (uint256);\\n\\n    // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\\n    function gasReserve() external view returns (uint256);\\n\\n    // maximum number of worker account allowed per manager\\n    function maxWorkerCount() external view returns (uint256);\\n\\n    function workerToManager(address worker) external view returns(address);\\n\\n    function workerCount(address manager) external view returns(uint256);\\n\\n    function isRelayManagerStaked(address relayManager) external view returns(bool);\\n\\n    /**\\n    * @dev the total gas overhead of relayCall(), before the first gasleft() and after the last gasleft().\\n    * Assume that relay has non-zero balance (costs 15'000 more otherwise).\\n    */\\n\\n    // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\\n    function gasOverhead() external view returns (uint256);\\n\\n    function versionHub() external view returns (string memory);\\n}\\n\\n\",\"keccak256\":\"0xecde689e0b6e313670d3e3ef181981b5aaae85d6c24ae26481a819cc27639d4d\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0xba3e7ee1cdc9567795ea096fad1e464dd16612c638744fb8b0ca1f8aa9ad7e27\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IStakeManager {\\n\\n    /// Emitted when a stake or unstakeDelay are initialized or increased\\n    event StakeAdded(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 stake,\\n        uint256 unstakeDelay\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 withdrawBlock\\n    );\\n\\n    /// Emitted when owner withdraws relayManager funds\\n    event StakeWithdrawn(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when an authorized Relay Hub penalizes a relayManager\\n    event StakePenalized(\\n        address indexed relayManager,\\n        address indexed beneficiary,\\n        uint256 reward\\n    );\\n\\n    event HubAuthorized(\\n        address indexed relayManager,\\n        address indexed relayHub\\n    );\\n\\n    event HubUnauthorized(\\n        address indexed relayManager,\\n        address indexed relayHub,\\n        uint256 removalBlock\\n    );\\n\\n    /// @param stake - amount of ether staked for this relay\\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\\n    /// @param withdrawBlock - first block number 'withdraw' will be callable, or zero if the unlock has not been called\\n    /// @param owner - address that receives revenue and manages relayManager's stake\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelay;\\n        uint256 withdrawBlock;\\n        address payable owner;\\n    }\\n\\n    struct RelayHubInfo {\\n        uint256 removalBlock;\\n    }\\n\\n    /// Put a stake for a relayManager and set its unstake delay.\\n    /// If the entry does not exist, it is created, and the caller of this function becomes its owner.\\n    /// If the entry already exists, only the owner can call this function.\\n    /// @param relayManager - address that represents a stake entry and controls relay registrations on relay hubs\\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\\n    function stakeForAddress(address relayManager, uint256 unstakeDelay) external payable;\\n\\n    function unlockStake(address relayManager) external;\\n\\n    function withdrawStake(address relayManager) external;\\n\\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    function authorizeHubByManager(address relayHub) external;\\n\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    function unauthorizeHubByManager(address relayHub) external;\\n\\n    function isRelayManagerStaked(address relayManager, address relayHub, uint256 minAmount, uint256 minUnstakeDelay)\\n    external\\n    view\\n    returns (bool);\\n\\n    /// Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns half of stake on the way.\\n    /// @param relayManager - entry to penalize\\n    /// @param beneficiary - address that receives half of the penalty amount\\n    /// @param amount - amount to withdraw from stake\\n    function penalizeRelayManager(address relayManager, address payable beneficiary, uint256 amount) external;\\n\\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo);\\n\\n    function versionSM() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8f3475fc1af48468ffa443e2e008f01687437c59668c9b5dbfbf1bfe54510d9\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/GsnEip712Library.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/GsnTypes.sol\\\";\\nimport \\\"../interfaces/IRelayRecipient.sol\\\";\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\nimport \\\"./GsnUtils.sol\\\";\\n\\n/**\\n * Bridge Library to map GSN RelayRequest into a call of a Forwarder\\n */\\nlibrary GsnEip712Library {\\n    // maximum length of return value/revert reason for 'execute' method. Will truncate result if exceeded.\\n    uint256 private constant MAX_RETURN_SIZE = 1024;\\n\\n    //copied from Forwarder (can't reference string constants even from another library)\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data\\\";\\n\\n    bytes public constant RELAYDATA_TYPE = \\\"RelayData(uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\\\";\\n\\n    string public constant RELAY_REQUEST_NAME = \\\"RelayRequest\\\";\\n    string public constant RELAY_REQUEST_SUFFIX = string(abi.encodePacked(\\\"RelayData relayData)\\\", RELAYDATA_TYPE));\\n\\n    bytes public constant RELAY_REQUEST_TYPE = abi.encodePacked(\\n        RELAY_REQUEST_NAME,\\\"(\\\",GENERIC_PARAMS,\\\",\\\", RELAY_REQUEST_SUFFIX);\\n\\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(RELAYDATA_TYPE);\\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(RELAY_REQUEST_TYPE);\\n\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n    function splitRequest(\\n        GsnTypes.RelayRequest calldata req\\n    )\\n    internal\\n    pure\\n    returns (\\n        IForwarder.ForwardRequest memory forwardRequest,\\n        bytes memory suffixData\\n    ) {\\n        forwardRequest = IForwarder.ForwardRequest(\\n            req.request.from,\\n            req.request.to,\\n            req.request.value,\\n            req.request.gas,\\n            req.request.nonce,\\n            req.request.data\\n        );\\n        suffixData = abi.encode(\\n            hashRelayData(req.relayData));\\n    }\\n\\n    //verify that the recipient trusts the given forwarder\\n    // MUST be called by paymaster\\n    function verifyForwarderTrusted(GsnTypes.RelayRequest calldata relayRequest) internal view {\\n        (bool success, bytes memory ret) = relayRequest.request.to.staticcall(\\n            abi.encodeWithSelector(\\n                IRelayRecipient.isTrustedForwarder.selector, relayRequest.relayData.forwarder\\n            )\\n        );\\n        require(success, \\\"isTrustedForwarder reverted\\\");\\n        require(ret.length == 32, \\\"isTrustedForwarder returned invalid response\\\");\\n        require(abi.decode(ret, (bool)), \\\"invalid forwarder for recipient\\\");\\n    }\\n\\n    function verifySignature(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\\n        (IForwarder.ForwardRequest memory forwardRequest, bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\\n        IForwarder forwarder = IForwarder(payable(relayRequest.relayData.forwarder));\\n        forwarder.verify(forwardRequest, domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature);\\n    }\\n\\n    function verify(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\\n        verifyForwarderTrusted(relayRequest);\\n        verifySignature(relayRequest, signature);\\n    }\\n\\n    function execute(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal returns (bool forwarderSuccess, bool callSuccess, bytes memory ret) {\\n        (IForwarder.ForwardRequest memory forwardRequest, bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\\n        /* solhint-disable-next-line avoid-low-level-calls */\\n        (forwarderSuccess, ret) = relayRequest.relayData.forwarder.call(\\n            abi.encodeWithSelector(IForwarder.execute.selector,\\n            forwardRequest, domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature\\n        ));\\n        if ( forwarderSuccess ) {\\n\\n          //decode return value of execute:\\n          (callSuccess, ret) = abi.decode(ret, (bool, bytes));\\n        }\\n        truncateInPlace(ret);\\n    }\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data) internal pure {\\n        MinLibBytes.truncateInPlace(data, MAX_RETURN_SIZE);\\n    }\\n\\n    function domainSeparator(address forwarder) internal view returns (bytes32) {\\n        return hashDomain(EIP712Domain({\\n            name : \\\"GSN Relayed Transaction\\\",\\n            version : \\\"2\\\",\\n            chainId : getChainID(),\\n            verifyingContract : forwarder\\n            }));\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function hashDomain(EIP712Domain memory req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                EIP712DOMAIN_TYPEHASH,\\n                keccak256(bytes(req.name)),\\n                keccak256(bytes(req.version)),\\n                req.chainId,\\n                req.verifyingContract));\\n    }\\n\\n    function hashRelayData(GsnTypes.RelayData calldata req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                RELAYDATA_TYPEHASH,\\n                req.gasPrice,\\n                req.pctRelayFee,\\n                req.baseRelayFee,\\n                req.relayWorker,\\n                req.paymaster,\\n                req.forwarder,\\n                keccak256(req.paymasterData),\\n                req.clientId\\n            ));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xa1db7951f8b4eb65773301b556b7c92b01a42ca79f2048673a8fd144dcbf54c6\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/GsnUtils.sol\":{\"content\":\"/* solhint-disable no-inline-assembly */\\n// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../utils/MinLibBytes.sol\\\";\\n\\nlibrary GsnUtils {\\n\\n    /**\\n     * extract method sig from encoded function call\\n     */\\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\\n        return MinLibBytes.readBytes4(msgData, 0);\\n    }\\n\\n    /**\\n     * extract parameter from encoded-function block.\\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\\n     * the return value should be casted to the right type (uintXXX/bytesXXX/address/bool/enum)\\n     */\\n    function getParam(bytes memory msgData, uint index) internal pure returns (uint) {\\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\\n    }\\n\\n    //re-throw revert with the same revert data.\\n    function revertWithData(bytes memory data) internal pure {\\n        assembly {\\n            revert(add(data,32), mload(data))\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfce546e18c85ff3e7f0c2f01b14f0c3e846239ce1038ea130c037bb6e8b543ce\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/utils/MinLibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// minimal bytes manipulation required by GSN\\n// a minimal subset from 0x/LibBytes\\n/* solhint-disable no-inline-assembly */\\npragma solidity 0.8.0;\\n\\nlibrary MinLibBytes {\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\\n        if (data.length > maxlen) {\\n            assembly { mstore(data, maxlen) }\\n        }\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        require (b.length >= index + 20, \\\"readAddress: data too short\\\");\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        require(b.length >= index + 32, \\\"readBytes32: data too short\\\" );\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        require(b.length >= index + 4, \\\"readBytes4: data too short\\\");\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x74f6a37844ff7aca8002f3e38a5dd7a1c79784c5e51980fd8df373fd82f241fa\",\"license\":\"MIT\"},\"src/metatx/CreatonPaymaster.sol\":{\"content\":\"pragma solidity 0.8.0;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\nimport \\\"../dependency/gsn/contracts/forwarder/IForwarder.sol\\\";\\nimport \\\"../dependency/gsn/contracts/BasePaymaster.sol\\\";\\n\\ncontract CreatonPaymaster is BasePaymaster {\\n\\n    address public creatonAdmin;\\n    address public token;\\n    address public stakingContract;\\n\\tmapping(address=>bool) public targets ;   // The target contracts we are willing to pay for\\n\\n    function addCreatorContract(address creatorContract) public onlyAdmin {\\n        targets[creatorContract] = true;\\n    }\\n\\n    function addContract(address _contract) public onlyOwner {\\n        targets[_contract] = true;\\n    }\\n\\n    function setAdmin(address _admin) public onlyOwner {\\n        creatonAdmin = _admin;\\n        targets[creatonAdmin] = true;\\n    }\\n\\n    constructor (\\n        address _token,\\n        address _stakingContract\\n    ) public  {\\n        token = _token;\\n        stakingContract = _stakingContract;\\n    }\\n\\n\\tfunction preRelayedCall(\\n\\t\\tGsnTypes.RelayRequest calldata relayRequest,\\n\\t\\tbytes calldata signature,\\n\\t\\tbytes calldata approvalData,\\n\\t\\tuint256 maxPossibleGas\\n\\t) external override virtual\\n\\treturns (bytes memory context, bool) {\\n\\t\\t_verifyForwarder(relayRequest);\\n\\t\\t(signature, approvalData, maxPossibleGas);\\n\\n        if (relayRequest.request.to == token){\\n            bytes4 sig = abi.decode(relayRequest.request.data[:4], (bytes4));\\n            require( sig == bytes4(keccak256(\\\"send(address,uint256,bytes)\\\")));\\n            address recipient;\\n            (recipient, ,) = abi.decode(msg.data[4:], (address,uint256,bytes));\\n            require(recipient == stakingContract, \\\"Creaton Paymaster: Only free staking is supported\\\");\\n            return (new bytes(0), false);\\n        }\\n\\n\\t\\trequire(targets[relayRequest.request.to], \\\"Creaton Paymaster: Destination contract not supported\\\");\\n        return (new bytes(0), false);\\n\\t}\\n\\n\\tfunction postRelayedCall(\\n\\t\\tbytes calldata context,\\n\\t\\tbool success,\\n\\t\\tuint256 gasUseWithoutPost,\\n\\t\\tGsnTypes.RelayData calldata relayData\\n\\t) external override virtual {\\n        (context, success, gasUseWithoutPost, relayData);\\n\\t}\\n\\n    function versionPaymaster() external virtual view override returns (string memory) {\\n        return \\\"2.1.0\\\";\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == creatonAdmin, \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5c4c012682ac8dba4baa8e501fcbf5e209f30bf9d8295150929dd953122d5b62\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
    "bytecode": "0x60806040523480156200001157600080fd5b506040516200189c3803806200189c8339810160408190526200003491620000dd565b600062000040620000bc565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600480546001600160a01b039384166001600160a01b0319918216179091556005805492909316911617905562000114565b3390565b80516001600160a01b0381168114620000d857600080fd5b919050565b60008060408385031215620000f0578182fd5b620000fb83620000c0565b91506200010b60208401620000c0565b90509250929050565b61177880620001246000396000f3fe60806040526004361061019a5760003560e01c80638da5cb5b116100e1578063da7422281161008a578063ee99205c11610064578063ee99205c146104d5578063f2fde38b146104ea578063f9c002f71461050a578063fc0c546a1461051f5761024f565b8063da74222814610472578063df463a6614610492578063e5c12446146104a75761024f565b80639ea09211116100bb5780639ea0921114610428578063b90b41cf14610448578063bbdaa3c91461045d5761024f565b80638da5cb5b146103d15780638e9483b0146103e6578063921276ea146104065761024f565b80636789720a1161014357806374e861d61161011d57806374e861d6146103875780637bb052641461039c5780637da0a877146103bc5761024f565b80636789720a14610330578063704b6c0214610352578063715018a6146103725761024f565b8063562c478411610174578063562c4784146102c15780635ea54eee146102ee5780635f539d69146103105761024f565b80632afe31c1146102545780632d14c4b71461027f5780633f218d8f146102a15761024f565b3661024f576001546001600160a01b03166101d05760405162461bcd60e51b81526004016101c790611386565b60405180910390fd5b6001546040517faa67c9190000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063aa67c91990349061021b90309060040161123f565b6000604051808303818588803b15801561023457600080fd5b505af1158015610248573d6000803e3d6000fd5b5050505050005b600080fd5b34801561026057600080fd5b50610269610534565b6040516102769190611572565b60405180910390f35b34801561028b57600080fd5b5061029f61029a3660046111c8565b6105d3565b005b3480156102ad57600080fd5b5061029f6102bc366004610f12565b610691565b3480156102cd57600080fd5b506102e16102dc366004610f12565b6106df565b6040516102769190611253565b3480156102fa57600080fd5b506103036106f4565b6040516102769190611551565b34801561031c57600080fd5b5061029f61032b366004610f12565b610732565b34801561033c57600080fd5b50610345610771565b604051610276919061123f565b34801561035e57600080fd5b5061029f61036d366004610f12565b610780565b34801561037e57600080fd5b5061029f610806565b34801561039357600080fd5b5061034561089c565b3480156103a857600080fd5b5061029f6103b7366004610f12565b6108ab565b3480156103c857600080fd5b50610345610919565b3480156103dd57600080fd5b50610345610928565b3480156103f257600080fd5b5061029f610401366004611050565b610937565b34801561041257600080fd5b5061041b61093e565b6040516102769190611282565b34801561043457600080fd5b5061029f6104433660046110dc565b610975565b34801561045457600080fd5b506102696109cd565b34801561046957600080fd5b506102696109d3565b34801561047e57600080fd5b5061029f61048d366004610f12565b6109da565b34801561049e57600080fd5b50610269610a48565b3480156104b357600080fd5b506104c76104c2366004611117565b610a5a565b60405161027692919061125e565b3480156104e157600080fd5b50610345610c03565b3480156104f657600080fd5b5061029f610505366004610f12565b610c12565b34801561051657600080fd5b50610269610cdf565b34801561052b57600080fd5b50610345610ce6565b6001546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a082319061057e90309060040161123f565b60206040518083038186803b15801561059657600080fd5b505afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce91906111b0565b905090565b6105db610cf5565b6001600160a01b03166105ec610928565b6001600160a01b0316146106125760405162461bcd60e51b81526004016101c7906114bf565b6001546040517ef714ce0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169062f714ce9061065b908590859060040161157b565b600060405180830381600087803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b505050505050565b6003546001600160a01b031633146106bb5760405162461bcd60e51b81526004016101c7906113f4565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b60066020526000908152604090205460ff1681565b6106fc610e93565b604051806060016040528061c350620186a06107189190611683565b8152602001620186a081526020016201adb0815250905090565b61073a610cf5565b6001600160a01b031661074b610928565b6001600160a01b0316146106bb5760405162461bcd60e51b81526004016101c7906114bf565b6003546001600160a01b031681565b610788610cf5565b6001600160a01b0316610799610928565b6001600160a01b0316146107bf5760405162461bcd60e51b81526004016101c7906114bf565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790819055166000908152600660205260409020805460ff19166001179055565b61080e610cf5565b6001600160a01b031661081f610928565b6001600160a01b0316146108455760405162461bcd60e51b81526004016101c7906114bf565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001546001600160a01b031690565b6108b3610cf5565b6001600160a01b03166108c4610928565b6001600160a01b0316146108ea5760405162461bcd60e51b81526004016101c7906114bf565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6000546001600160a01b031690565b5050505050565b60408051808201909152600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290565b6109826020820182611628565b6109949061010081019060e001610f12565b6002546001600160a01b039081169116146109c15760405162461bcd60e51b81526004016101c7906113bd565b6109ca81610cf9565b50565b61c35081565b6201adb081565b6109e2610cf5565b6001600160a01b03166109f3610928565b6001600160a01b031614610a195760405162461bcd60e51b81526004016101c7906114bf565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610a5761c350620186a0611683565b81565b60606000610a6788610975565b6004546001600160a01b0316610a7d89806115f5565b610a8e906040810190602001610f12565b6001600160a01b03161415610b8c576000610aa989806115f5565b610ab79060a0810190611592565b610ac69160049160009161165b565b810190610ad39190611010565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167f9bd9bbc60000000000000000000000000000000000000000000000000000000014610b2357600080fd5b6000610b32366004818461165b565b810190610b3f9190610f35565b50506005549091506001600160a01b03808316911614610b715760405162461bcd60e51b81526004016101c7906114f4565b50506040805160008082526020820190925292509050610bf8565b60066000610b9a8a806115f5565b610bab906040810190602001610f12565b6001600160a01b0316815260208101919091526040016000205460ff16610be45760405162461bcd60e51b81526004016101c790611295565b505060408051600080825260208201909252905b965096945050505050565b6005546001600160a01b031681565b610c1a610cf5565b6001600160a01b0316610c2b610928565b6001600160a01b031614610c515760405162461bcd60e51b81526004016101c7906114bf565b6001600160a01b038116610c775760405162461bcd60e51b81526004016101c790611329565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b620186a081565b6004546001600160a01b031681565b3390565b600080610d0683806115f5565b610d17906040810190602001610f12565b6001600160a01b03167f572b6c0500000000000000000000000000000000000000000000000000000000610d4e6020860186611628565b610d609061010081019060e001610f12565b604051602401610d70919061123f565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610ddb9190611223565b600060405180830381855afa9150503d8060008114610e16576040519150601f19603f3d011682016040523d82523d6000602084013e610e1b565b606091505b509150915081610e3d5760405162461bcd60e51b81526004016101c790611488565b8051602014610e5e5760405162461bcd60e51b81526004016101c79061142b565b80806020019051810190610e729190610ff4565b610e8e5760405162461bcd60e51b81526004016101c7906112f2565b505050565b60405180606001604052806000815260200160008152602001600081525090565b60008083601f840112610ec5578182fd5b50813567ffffffffffffffff811115610edc578182fd5b602083019150836020828501011115610ef457600080fd5b9250929050565b600060408284031215610f0c578081fd5b50919050565b600060208284031215610f23578081fd5b8135610f2e8161171f565b9392505050565b600080600060608486031215610f49578182fd5b8335610f548161171f565b92506020848101359250604085013567ffffffffffffffff80821115610f78578384fd5b818701915087601f830112610f8b578384fd5b813581811115610f9d57610f9d6116f0565b60405184601f19601f8401168201018181108482111715610fc057610fc06116f0565b60405281815283820185018a1015610fd6578586fd5b81858501868301378585838301015280955050505050509250925092565b600060208284031215611005578081fd5b8151610f2e81611734565b600060208284031215611021578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610f2e578182fd5b600080600080600060808688031215611067578081fd5b853567ffffffffffffffff8082111561107e578283fd5b61108a89838a01610eb4565b90975095506020880135915061109f82611734565b90935060408701359250606087013590808211156110bb578283fd5b50860161010081890312156110ce578182fd5b809150509295509295909350565b6000602082840312156110ed578081fd5b813567ffffffffffffffff811115611103578182fd5b61110f84828501610efb565b949350505050565b6000806000806000806080878903121561112f578081fd5b863567ffffffffffffffff80821115611146578283fd5b6111528a838b01610efb565b97506020890135915080821115611167578283fd5b6111738a838b01610eb4565b9097509550604089013591508082111561118b578283fd5b5061119889828a01610eb4565b979a9699509497949695606090950135949350505050565b6000602082840312156111c1578081fd5b5051919050565b600080604083850312156111da578182fd5b8235915060208301356111ec8161171f565b809150509250929050565b6000815180845261120f8160208601602086016116c0565b601f01601f19169290920160200192915050565b600082516112358184602087016116c0565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b60006040825261127160408301856111f7565b905082151560208301529392505050565b600060208252610f2e60208301846111f7565b60208082526035908201527f43726561746f6e205061796d61737465723a2044657374696e6174696f6e206360408201527f6f6e7472616374206e6f7420737570706f727465640000000000000000000000606082015260800190565b6020808252601f908201527f696e76616c696420666f7277617264657220666f7220726563697069656e7400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f72656c6179206875622061646472657373206e6f742073657400000000000000604082015260600190565b60208082526018908201527f466f72776172646572206973206e6f7420747275737465640000000000000000604082015260600190565b60208082526009908201527f4e6f742041646d696e0000000000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f697354727573746564466f727761726465722072657475726e656420696e766160408201527f6c696420726573706f6e73650000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f697354727573746564466f727761726465722072657665727465640000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f43726561746f6e205061796d61737465723a204f6e6c7920667265652073746160408201527f6b696e6720697320737570706f72746564000000000000000000000000000000606082015260800190565b81518152602080830151908201526040918201519181019190915260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126115c6578283fd5b83018035915067ffffffffffffffff8211156115e0578283fd5b602001915036819003821315610ef457600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112611235578182fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01833603018112611235578182fd5b6000808585111561166a578182fd5b83861115611676578182fd5b5050820193919092039150565b600082198211156116bb577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b500190565b60005b838110156116db5781810151838201526020016116c3565b838111156116ea576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b03811681146109ca57600080fd5b80151581146109ca57600080fdfea2646970667358221220b73b23ec051098413c2ab06d6ed3872331e7089a14bdedd6f8c413bc97790f8064736f6c63430008000033",
    "deployedBytecode": "0x60806040526004361061019a5760003560e01c80638da5cb5b116100e1578063da7422281161008a578063ee99205c11610064578063ee99205c146104d5578063f2fde38b146104ea578063f9c002f71461050a578063fc0c546a1461051f5761024f565b8063da74222814610472578063df463a6614610492578063e5c12446146104a75761024f565b80639ea09211116100bb5780639ea0921114610428578063b90b41cf14610448578063bbdaa3c91461045d5761024f565b80638da5cb5b146103d15780638e9483b0146103e6578063921276ea146104065761024f565b80636789720a1161014357806374e861d61161011d57806374e861d6146103875780637bb052641461039c5780637da0a877146103bc5761024f565b80636789720a14610330578063704b6c0214610352578063715018a6146103725761024f565b8063562c478411610174578063562c4784146102c15780635ea54eee146102ee5780635f539d69146103105761024f565b80632afe31c1146102545780632d14c4b71461027f5780633f218d8f146102a15761024f565b3661024f576001546001600160a01b03166101d05760405162461bcd60e51b81526004016101c790611386565b60405180910390fd5b6001546040517faa67c9190000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063aa67c91990349061021b90309060040161123f565b6000604051808303818588803b15801561023457600080fd5b505af1158015610248573d6000803e3d6000fd5b5050505050005b600080fd5b34801561026057600080fd5b50610269610534565b6040516102769190611572565b60405180910390f35b34801561028b57600080fd5b5061029f61029a3660046111c8565b6105d3565b005b3480156102ad57600080fd5b5061029f6102bc366004610f12565b610691565b3480156102cd57600080fd5b506102e16102dc366004610f12565b6106df565b6040516102769190611253565b3480156102fa57600080fd5b506103036106f4565b6040516102769190611551565b34801561031c57600080fd5b5061029f61032b366004610f12565b610732565b34801561033c57600080fd5b50610345610771565b604051610276919061123f565b34801561035e57600080fd5b5061029f61036d366004610f12565b610780565b34801561037e57600080fd5b5061029f610806565b34801561039357600080fd5b5061034561089c565b3480156103a857600080fd5b5061029f6103b7366004610f12565b6108ab565b3480156103c857600080fd5b50610345610919565b3480156103dd57600080fd5b50610345610928565b3480156103f257600080fd5b5061029f610401366004611050565b610937565b34801561041257600080fd5b5061041b61093e565b6040516102769190611282565b34801561043457600080fd5b5061029f6104433660046110dc565b610975565b34801561045457600080fd5b506102696109cd565b34801561046957600080fd5b506102696109d3565b34801561047e57600080fd5b5061029f61048d366004610f12565b6109da565b34801561049e57600080fd5b50610269610a48565b3480156104b357600080fd5b506104c76104c2366004611117565b610a5a565b60405161027692919061125e565b3480156104e157600080fd5b50610345610c03565b3480156104f657600080fd5b5061029f610505366004610f12565b610c12565b34801561051657600080fd5b50610269610cdf565b34801561052b57600080fd5b50610345610ce6565b6001546040517f70a082310000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906370a082319061057e90309060040161123f565b60206040518083038186803b15801561059657600080fd5b505afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce91906111b0565b905090565b6105db610cf5565b6001600160a01b03166105ec610928565b6001600160a01b0316146106125760405162461bcd60e51b81526004016101c7906114bf565b6001546040517ef714ce0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169062f714ce9061065b908590859060040161157b565b600060405180830381600087803b15801561067557600080fd5b505af1158015610689573d6000803e3d6000fd5b505050505050565b6003546001600160a01b031633146106bb5760405162461bcd60e51b81526004016101c7906113f4565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b60066020526000908152604090205460ff1681565b6106fc610e93565b604051806060016040528061c350620186a06107189190611683565b8152602001620186a081526020016201adb0815250905090565b61073a610cf5565b6001600160a01b031661074b610928565b6001600160a01b0316146106bb5760405162461bcd60e51b81526004016101c7906114bf565b6003546001600160a01b031681565b610788610cf5565b6001600160a01b0316610799610928565b6001600160a01b0316146107bf5760405162461bcd60e51b81526004016101c7906114bf565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790819055166000908152600660205260409020805460ff19166001179055565b61080e610cf5565b6001600160a01b031661081f610928565b6001600160a01b0316146108455760405162461bcd60e51b81526004016101c7906114bf565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001546001600160a01b031690565b6108b3610cf5565b6001600160a01b03166108c4610928565b6001600160a01b0316146108ea5760405162461bcd60e51b81526004016101c7906114bf565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6000546001600160a01b031690565b5050505050565b60408051808201909152600581527f322e312e30000000000000000000000000000000000000000000000000000000602082015290565b6109826020820182611628565b6109949061010081019060e001610f12565b6002546001600160a01b039081169116146109c15760405162461bcd60e51b81526004016101c7906113bd565b6109ca81610cf9565b50565b61c35081565b6201adb081565b6109e2610cf5565b6001600160a01b03166109f3610928565b6001600160a01b031614610a195760405162461bcd60e51b81526004016101c7906114bf565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610a5761c350620186a0611683565b81565b60606000610a6788610975565b6004546001600160a01b0316610a7d89806115f5565b610a8e906040810190602001610f12565b6001600160a01b03161415610b8c576000610aa989806115f5565b610ab79060a0810190611592565b610ac69160049160009161165b565b810190610ad39190611010565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167f9bd9bbc60000000000000000000000000000000000000000000000000000000014610b2357600080fd5b6000610b32366004818461165b565b810190610b3f9190610f35565b50506005549091506001600160a01b03808316911614610b715760405162461bcd60e51b81526004016101c7906114f4565b50506040805160008082526020820190925292509050610bf8565b60066000610b9a8a806115f5565b610bab906040810190602001610f12565b6001600160a01b0316815260208101919091526040016000205460ff16610be45760405162461bcd60e51b81526004016101c790611295565b505060408051600080825260208201909252905b965096945050505050565b6005546001600160a01b031681565b610c1a610cf5565b6001600160a01b0316610c2b610928565b6001600160a01b031614610c515760405162461bcd60e51b81526004016101c7906114bf565b6001600160a01b038116610c775760405162461bcd60e51b81526004016101c790611329565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b620186a081565b6004546001600160a01b031681565b3390565b600080610d0683806115f5565b610d17906040810190602001610f12565b6001600160a01b03167f572b6c0500000000000000000000000000000000000000000000000000000000610d4e6020860186611628565b610d609061010081019060e001610f12565b604051602401610d70919061123f565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610ddb9190611223565b600060405180830381855afa9150503d8060008114610e16576040519150601f19603f3d011682016040523d82523d6000602084013e610e1b565b606091505b509150915081610e3d5760405162461bcd60e51b81526004016101c790611488565b8051602014610e5e5760405162461bcd60e51b81526004016101c79061142b565b80806020019051810190610e729190610ff4565b610e8e5760405162461bcd60e51b81526004016101c7906112f2565b505050565b60405180606001604052806000815260200160008152602001600081525090565b60008083601f840112610ec5578182fd5b50813567ffffffffffffffff811115610edc578182fd5b602083019150836020828501011115610ef457600080fd5b9250929050565b600060408284031215610f0c578081fd5b50919050565b600060208284031215610f23578081fd5b8135610f2e8161171f565b9392505050565b600080600060608486031215610f49578182fd5b8335610f548161171f565b92506020848101359250604085013567ffffffffffffffff80821115610f78578384fd5b818701915087601f830112610f8b578384fd5b813581811115610f9d57610f9d6116f0565b60405184601f19601f8401168201018181108482111715610fc057610fc06116f0565b60405281815283820185018a1015610fd6578586fd5b81858501868301378585838301015280955050505050509250925092565b600060208284031215611005578081fd5b8151610f2e81611734565b600060208284031215611021578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610f2e578182fd5b600080600080600060808688031215611067578081fd5b853567ffffffffffffffff8082111561107e578283fd5b61108a89838a01610eb4565b90975095506020880135915061109f82611734565b90935060408701359250606087013590808211156110bb578283fd5b50860161010081890312156110ce578182fd5b809150509295509295909350565b6000602082840312156110ed578081fd5b813567ffffffffffffffff811115611103578182fd5b61110f84828501610efb565b949350505050565b6000806000806000806080878903121561112f578081fd5b863567ffffffffffffffff80821115611146578283fd5b6111528a838b01610efb565b97506020890135915080821115611167578283fd5b6111738a838b01610eb4565b9097509550604089013591508082111561118b578283fd5b5061119889828a01610eb4565b979a9699509497949695606090950135949350505050565b6000602082840312156111c1578081fd5b5051919050565b600080604083850312156111da578182fd5b8235915060208301356111ec8161171f565b809150509250929050565b6000815180845261120f8160208601602086016116c0565b601f01601f19169290920160200192915050565b600082516112358184602087016116c0565b9190910192915050565b6001600160a01b0391909116815260200190565b901515815260200190565b60006040825261127160408301856111f7565b905082151560208301529392505050565b600060208252610f2e60208301846111f7565b60208082526035908201527f43726561746f6e205061796d61737465723a2044657374696e6174696f6e206360408201527f6f6e7472616374206e6f7420737570706f727465640000000000000000000000606082015260800190565b6020808252601f908201527f696e76616c696420666f7277617264657220666f7220726563697069656e7400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f72656c6179206875622061646472657373206e6f742073657400000000000000604082015260600190565b60208082526018908201527f466f72776172646572206973206e6f7420747275737465640000000000000000604082015260600190565b60208082526009908201527f4e6f742041646d696e0000000000000000000000000000000000000000000000604082015260600190565b6020808252602c908201527f697354727573746564466f727761726465722072657475726e656420696e766160408201527f6c696420726573706f6e73650000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f697354727573746564466f727761726465722072657665727465640000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f43726561746f6e205061796d61737465723a204f6e6c7920667265652073746160408201527f6b696e6720697320737570706f72746564000000000000000000000000000000606082015260800190565b81518152602080830151908201526040918201519181019190915260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126115c6578283fd5b83018035915067ffffffffffffffff8211156115e0578283fd5b602001915036819003821315610ef457600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112611235578182fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01833603018112611235578182fd5b6000808585111561166a578182fd5b83861115611676578182fd5b5050820193919092039150565b600082198211156116bb577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b500190565b60005b838110156116db5781810151838201526020016116c3565b838111156116ea576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6001600160a01b03811681146109ca57600080fd5b80151581146109ca57600080fdfea2646970667358221220b73b23ec051098413c2ab06d6ed3872331e7089a14bdedd6f8c413bc97790f8064736f6c63430008000033",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))": {
          "params": {
            "context": "- the call context, as returned by the preRelayedCall",
            "gasUseWithoutPost": "- the actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.",
            "relayData": "- the relay params of the request. can be used by relayHub.calculateCharge() Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction.",
            "success": "- true if the relayed call succeeded, false if it reverted"
          }
        },
        "preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)": {
          "params": {
            "approvalData": "- extra dapp-specific data (e.g. signature from trusted party)",
            "maxPossibleGas": "- based on values returned from {@link getGasLimits},         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.         In order to convert this value to wei, the Paymaster has to call \"relayHub.calculateCharge()\"  return:      a context to be passed to postRelayedCall      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).",
            "relayRequest": "- the full relay request structure",
            "signature": "- user's EIP712-compatible signature of the {@link relayRequest}.              Note that in most cases the paymaster shouldn't try use it at all. It is always checked              by the forwarder immediately after preRelayedCall returns."
          }
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "getGasLimits()": {
          "notice": "Return the GasLimits constants used by the Paymaster."
        },
        "getHubAddr()": {
          "notice": "return the relayHub of this contract."
        },
        "getRelayHubDeposit()": {
          "notice": "check current deposit on relay hub."
        },
        "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,bytes,uint256,address))": {
          "notice": "This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. MUST be protected with relayHubOnly() in case it modifies state."
        },
        "preRelayedCall(((address,address,uint256,uint256,uint256,bytes),(uint256,uint256,uint256,address,address,bytes,uint256,address)),bytes,bytes,uint256)": {
          "notice": "Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call. MUST be protected with relayHubOnly() in case it modifies state. The Paymaster rejects by the following \"revert\" operations  - preRelayedCall() method reverts  - the forwarder reverts because of nonce or signature error  - the paymaster returned \"rejectOnRecipientRevert\", and the recipient contract reverted. In any of the above cases, all paymaster calls (and recipient call) are reverted. In any other case, the paymaster agrees to pay for the gas cost of the transaction (note  that this includes also postRelayedCall revert) The rejectOnRecipientRevert flag means the Paymaster \"delegate\" the rejection to the recipient  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,  otherwise the TX is paid by the Paymaster."
        },
        "withdrawRelayHubDepositTo(uint256,address)": {
          "notice": "withdraw deposit from relayHub"
        }
      },
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 520,
          "contract": "src/metatx/CreatonPaymaster.sol:CreatonPaymaster",
          "label": "_owner",
          "offset": 0,
          "slot": "0",
          "type": "t_address"
        },
        {
          "astId": 9453,
          "contract": "src/metatx/CreatonPaymaster.sol:CreatonPaymaster",
          "label": "relayHub",
          "offset": 0,
          "slot": "1",
          "type": "t_contract(IRelayHub)10715"
        },
        {
          "astId": 9457,
          "contract": "src/metatx/CreatonPaymaster.sol:CreatonPaymaster",
          "label": "trustedForwarder",
          "offset": 0,
          "slot": "2",
          "type": "t_contract(IForwarder)10326"
        },
        {
          "astId": 16951,
          "contract": "src/metatx/CreatonPaymaster.sol:CreatonPaymaster",
          "label": "creatonAdmin",
          "offset": 0,
          "slot": "3",
          "type": "t_address"
        },
        {
          "astId": 16953,
          "contract": "src/metatx/CreatonPaymaster.sol:CreatonPaymaster",
          "label": "token",
          "offset": 0,
          "slot": "4",
          "type": "t_address"
        },
        {
          "astId": 16955,
          "contract": "src/metatx/CreatonPaymaster.sol:CreatonPaymaster",
          "label": "stakingContract",
          "offset": 0,
          "slot": "5",
          "type": "t_address"
        },
        {
          "astId": 16959,
          "contract": "src/metatx/CreatonPaymaster.sol:CreatonPaymaster",
          "label": "targets",
          "offset": 0,
          "slot": "6",
          "type": "t_mapping(t_address,t_bool)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_contract(IForwarder)10326": {
          "encoding": "inplace",
          "label": "contract IForwarder",
          "numberOfBytes": "20"
        },
        "t_contract(IRelayHub)10715": {
          "encoding": "inplace",
          "label": "contract IRelayHub",
          "numberOfBytes": "20"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        }
      }
    }
  },
  "CreatonStaking": {
    "address": "0x8aF4743F61166fD9f7bFd63BEc3f54b7Dcfe2D44",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_token",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_trustedForwarder",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "minStake",
            "type": "uint256"
          }
        ],
        "name": "MinStakeUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "oldOwner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnerChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnerNominated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Paused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "token",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Recovered",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "periodFinish",
            "type": "uint256"
          }
        ],
        "name": "RewardHalved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "reward",
            "type": "uint256"
          }
        ],
        "name": "RewardPaid",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "rewardRate",
            "type": "uint256"
          }
        ],
        "name": "RewardStarted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newDuration",
            "type": "uint256"
          }
        ],
        "name": "RewardsDurationUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Staked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "Unpaused",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "user",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "Withdrawn",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "acceptOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "earned",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "exit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getReward",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getRewardForDuration",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "halvingRewards",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "forwarder",
            "type": "address"
          }
        ],
        "name": "isTrustedForwarder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lastPeriod",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lastTimeRewardApplicable",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lastUpdateTime",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "minStake",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "nominateNewOwner",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "nominatedOwner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "oldRewardsDuration",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "pause",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "paused",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "periodFinish",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "tokenAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenAmount",
            "type": "uint256"
          }
        ],
        "name": "recoverERC20",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "rewardEscrow",
        "outputs": [
          {
            "internalType": "contract IERC20",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "rewardPerToken",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "rewardPerTokenStored",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "rewardRate",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "rewards",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "rewardsDuration",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_rewardEscrow",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_rewardRate",
            "type": "uint256"
          }
        ],
        "name": "setInitialReward",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_minStake",
            "type": "uint256"
          }
        ],
        "name": "setMinimumStake",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_rewardsDuration",
            "type": "uint256"
          }
        ],
        "name": "setRewardsDuration",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "token",
        "outputs": [
          {
            "internalType": "contract IERC20",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "userData",
            "type": "bytes"
          },
          {
            "internalType": "bytes",
            "name": "operatorData",
            "type": "bytes"
          }
        ],
        "name": "tokensReceived",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "trustedForwarder",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "unpause",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "userRewardPerTokenPaid",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0xacb33e3495912c94bce2a335f9d80f2c2dfdaeb95a96dc2a0905d284c8ee11ce",
    "receipt": {
      "to": null,
      "from": "0xC7AF24dc120b0a74b73E360378867d0c9541094c",
      "contractAddress": "0x8aF4743F61166fD9f7bFd63BEc3f54b7Dcfe2D44",
      "transactionIndex": 5,
      "gasUsed": "1763002",
      "logsBloom": "0x
      "blockHash": "0x78ac7445d1d6e031749d03389c2538943417c594d55b84bc8c3463823d357abd",
      "transactionHash": "0xacb33e3495912c94bce2a335f9d80f2c2dfdaeb95a96dc2a0905d284c8ee11ce",
      "logs": [
        {
          "transactionIndex": 5,
          "blockNumber": 4704304,
          "transactionHash": "0xacb33e3495912c94bce2a335f9d80f2c2dfdaeb95a96dc2a0905d284c8ee11ce",
          "address": "0x8aF4743F61166fD9f7bFd63BEc3f54b7Dcfe2D44",
          "topics": [
            "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c"
          ],
          "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c7af24dc120b0a74b73e360378867d0c9541094c",
          "logIndex": 16,
          "blockHash": "0x78ac7445d1d6e031749d03389c2538943417c594d55b84bc8c3463823d357abd"
        },
        {
          "transactionIndex": 5,
          "blockNumber": 4704304,
          "transactionHash": "0xacb33e3495912c94bce2a335f9d80f2c2dfdaeb95a96dc2a0905d284c8ee11ce",
          "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
          "topics": [
            "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
            "0x0000000000000000000000008af4743f61166fd9f7bfd63bec3f54b7dcfe2d44",
            "0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b",
            "0x0000000000000000000000008af4743f61166fd9f7bfd63bec3f54b7dcfe2d44"
          ],
          "data": "0x",
          "logIndex": 17,
          "blockHash": "0x78ac7445d1d6e031749d03389c2538943417c594d55b84bc8c3463823d357abd"
        }
      ],
      "blockNumber": 4704304,
      "cumulativeGasUsed": "4633787",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0xC7AF24dc120b0a74b73E360378867d0c9541094c",
      "0x3E0d24f43e470D703FC664e5878aD57B23702121",
      "0xd9c1a99e9263B98F3f633a9f1A201FA0AFC2A1c2"
    ],
    "solcInputHash": "1d2abd5f78e13e50b92a11bd1741c557",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"}],\"name\":\"MinStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"}],\"name\":\"RewardHalved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"RewardStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldRewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEscrow\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardEscrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setInitialReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/metatx/MetatxStaking.sol\":\"MetatxStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x49f0bb79f8a5c60b2a8779d0b501f16bd3110814b9e72498caad3bc339e33def\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n// solhint-disable no-inline-assembly\\npragma solidity 0.8.0;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address payable ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return payable(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal override virtual view returns (bytes memory ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // we copy the msg.data , except the last 20 bytes (and update the total length)\\n            assembly {\\n                let ptr := mload(0x40)\\n                // copy only size-20 bytes\\n                let size := sub(calldatasize(),20)\\n                // structure RLP data as <offset> <length> <bytes>\\n                mstore(ptr, 0x20)\\n                mstore(add(ptr,32), size)\\n                calldatacopy(add(ptr,64), 0, size)\\n                return(ptr, add(size,64))\\n            }\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf9c23638eb2c587f9adcab66a270efcdcc3da306b12399df484b7290ce6c7cd\",\"license\":\"MIT\"},\"src/dependency/gsn/contracts/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0xba3e7ee1cdc9567795ea096fad1e464dd16612c638744fb8b0ca1f8aa9ad7e27\",\"license\":\"MIT\"},\"src/metatx/IMetatxStaking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n\\ninterface IMetatxStaking {\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Mutative\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n\\n    function halvingRewards() external;\\n}\\n\",\"keccak256\":\"0x5ad88ed0b4510006e3ddbab3e113b29c379b5fc580ce8c8603078d0c77ed83cc\"},\"src/metatx/MetatxStaking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"../dependency/gsn/contracts/BaseRelayRecipient.sol\\\";\\nimport \\\"../utils/Owned.sol\\\";\\n\\n// Inheritance\\nimport \\\"./IMetatxStaking.sol\\\";\\n\\ncontract MetatxStaking is IMetatxStaking, IERC777Recipient, ReentrancyGuard, Pausable, Owned {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== ERC1820 RECIPIENT REGISTRY ========== */\\n\\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public token;\\n    IERC20 public rewardEscrow;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public oldRewardsDuration = 30 days;\\n    uint256 public rewardsDuration = 30 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public minStake = 5 * 1e18;\\n    bool public lastPeriod = false;\\n    address public trustedForwarder;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _owner,\\n        address _token,\\n        address _trustedForwarder\\n    ) public Owned(_owner) {\\n        token = IERC20(_token);\\n        _erc1820.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\\n        trustedForwarder = _trustedForwarder;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view override returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view override returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\\n            );\\n    }\\n\\n    function earned(address account) public view override returns (uint256) {\\n        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view override returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function _stake(address staker, uint256 amount) internal nonReentrant whenNotPaused updateReward(staker) {\\n        require(amount >= minStake, \\\"Creaton Staking: Can't stake less than required minimum\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[staker] = _balances[staker].add(amount);\\n        emit Staked(staker, amount);\\n    }\\n\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external override {\\n        require(msg.sender == address(token), \\\"Creaton Staking: Invalid token\\\");\\n        _stake(from, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public override nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        token.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public override nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            token.safeTransferFrom(address(rewardEscrow), msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external override {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    function halvingRewards() external override updateReward(address(0)) whenNotPaused whenNotLastPeriod {\\n        if (block.timestamp > periodFinish) {\\n            token.safeTransferFrom(address(rewardEscrow), msg.sender, minStake);\\n            if (rewardsDuration == oldRewardsDuration){\\n                rewardRate = rewardRate.div(2);\\n            } else {\\n                rewardRate = rewardRate.mul(oldRewardsDuration).div(rewardsDuration).div(2);\\n                oldRewardsDuration = rewardsDuration;\\n            }\\n            uint balance = token.balanceOf(address(rewardEscrow));\\n            if (rewardRate >= balance.div(rewardsDuration)) {\\n                rewardRate = balance.div(rewardsDuration);\\n                lastPeriod = true;\\n            }\\n            lastUpdateTime = block.timestamp;\\n            periodFinish = block.timestamp.add(rewardsDuration);\\n            emit RewardHalved(periodFinish);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setInitialReward(address _rewardEscrow, uint256 _rewardRate) external onlyOwner {\\n        rewardEscrow = IERC20(_rewardEscrow);\\n        rewardRate = _rewardRate;\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardStarted(rewardRate);\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAddress != address(token), \\\"Cannot withdraw the staking token\\\");\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    function setMinimumStake(uint256 _minStake) external onlyOwner {\\n        minStake = _minStake;\\n        emit MinStakeUpdated(minStake);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier whenNotLastPeriod() {\\n        require(!lastPeriod, \\\"Last period is in\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardHalved(uint256 periodFinish);\\n    event RewardStarted (uint256 rewardRate);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n    event MinStakeUpdated(uint256 minStake);\\n}\\n\",\"keccak256\":\"0x27c01d6234430c8a09345d918db9833688ad8cd4b8ca4d1c64c69f476fa035f8\"},\"src/utils/Owned.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\",\"keccak256\":\"0x992f0df073c751cc24f7fb87eab8f5ca3e59b61b0dc5b104cacd69758acf2b84\"}},\"version\":1}",
    "bytecode": "0x6080604052600380546001600160a01b031916731820a4b7618bde71dce8cdc73aab6c95905fad241790556000600681905560075562278d006008819055600955674563918244f40000600c55600d805460ff191690553480156200006357600080fd5b5060405162001dc338038062001dc3833981016040819052620000869162000211565b60016000819055805460ff19169055826001600160a01b038116620000c85760405162461bcd60e51b8152600401620000bf9062000297565b60405180910390fd5b60018054610100600160a81b0319166101006001600160a01b038416021790556040517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c906200011d9060009084906200025a565b60405180910390a150600480546001600160a01b0319166001600160a01b038481169190911782556003546040516329965a1d60e01b81529116916329965a1d91620001909130917fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b9183910162000274565b600060405180830381600087803b158015620001ab57600080fd5b505af1158015620001c0573d6000803e3d6000fd5b5050600d80546001600160a01b0390941661010002610100600160a81b03199094169390931790925550620002ce92505050565b80516001600160a01b03811681146200020c57600080fd5b919050565b60008060006060848603121562000226578283fd5b6200023184620001f4565b92506200024160208501620001f4565b91506200025160408501620001f4565b90509250925092565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b60208082526019908201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604082015260600190565b611ae580620002de6000396000f3fe608060405234801561001057600080fd5b506004361061025a5760003560e01c80637b0a47ee11610145578063c8f33c91116100bd578063df136d651161008c578063ebe2b12b11610071578063ebe2b12b14610412578063f0ba2b751461041a578063fc0c546a1461042d5761025a565b8063df136d6514610402578063e9fad8ee1461040a5761025a565b8063c8f33c91146103d7578063cc1a378f146103df578063cd3daf9d146103f2578063d340ef8a146103fa5761025a565b80638980f11f116101145780638da5cb5b116100f95780638da5cb5b146103bf578063a430be6c146103c7578063b2e8c5e5146103cf5761025a565b80638980f11f146103995780638b876347146103ac5761025a565b80637b0a47ee146103795780637da0a8771461038157806380faa57d146103895780638456cb59146103915761025a565b8063386a9525116101d857806353a47bb7116101a75780635c975abb1161018c5780635c975abb1461035657806370a082311461035e57806379ba5097146103715761025a565b806353a47bb714610321578063572b6c05146103365761025a565b8063386a9525146103015780633a936206146103095780633d18b912146103115780633f4ba83a146103195761025a565b806318160ddd1161022f578063233e990311610214578063233e9903146102d35780632e1a7d4d146102e6578063375b3c0a146102f95761025a565b806318160ddd146102c35780631c1f78eb146102cb5761025a565b806223de291461025f5780628cc262146102745780630700037d1461029d5780631627540c146102b0575b600080fd5b61027261026d36600461138e565b610435565b005b610287610282366004611374565b61047c565b60405161029491906119a6565b60405180910390f35b6102876102ab366004611374565b6104fc565b6102726102be366004611374565b61050e565b610287610579565b610287610580565b6102726102e136600461147f565b61059e565b6102726102f436600461147f565b6105db565b61028761071e565b610287610724565b61027261072a565b610272610979565b610272610a84565b610329610a96565b60405161029491906114cb565b610349610344366004611374565b610aa5565b6040516102949190611536565b610349610abe565b61028761036c366004611374565b610ac7565b610272610ae2565b610287610bb2565b610329610bb8565b610287610bcc565b610272610bda565b6102726103a7366004611436565b610bea565b6102876103ba366004611374565b610c70565b610329610c82565b610329610c96565b610287610ca5565b610287610cab565b6102726103ed36600461147f565b610cb1565b610287610d0f565b610349610d5d565b610287610d66565b610272610d6c565b610287610d8d565b610272610428366004611436565b610d93565b610329610e0f565b6004546001600160a01b031633146104685760405162461bcd60e51b815260040161045f90611574565b60405180910390fd5b6104728786610e1e565b5050505050505050565b6001600160a01b0381166000908152600f6020908152604080832054600e9092528220546104f491906104ee90670de0b6b3a7640000906104e8906104c9906104c3610d0f565b90610f7a565b6001600160a01b03881660009081526011602052604090205490610f8d565b90610f99565b90610fa5565b90505b919050565b600f6020526000908152604090205481565b610516610fb1565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229061056e9083906114cb565b60405180910390a150565b6010545b90565b6000610599600954600754610f8d90919063ffffffff16565b905090565b6105a6610fb1565b600c8190556040517f47ab46f2c8d4258304a2f5551c1cbdb6981be49631365d1ba7191288a73f39ef9061056e9083906119a6565b600260005414156105fe5760405162461bcd60e51b815260040161045f90611912565b60026000553361060c610d0f565b600b55610617610bcc565b600a556001600160a01b0381161561065e576106328161047c565b6001600160a01b0382166000908152600f6020908152604080832093909355600b54600e909152919020555b6000821161067e5760405162461bcd60e51b815260040161045f906117ea565b60105461068b9083610f7a565b601055336000908152601160205260409020546106a89083610f7a565b336000818152601160205260409020919091556004546106d4916001600160a01b039091169084610fe0565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161070d91906119a6565b60405180910390a250506001600055565b600c5481565b60095481565b6000610734610d0f565b600b5561073f610bcc565b600a556001600160a01b038116156107865761075a8161047c565b6001600160a01b0382166000908152600f6020908152604080832093909355600b54600e909152919020555b61078e610abe565b156107ab5760405162461bcd60e51b815260040161045f90611756565b600d5460ff16156107ce5760405162461bcd60e51b815260040161045f906116c2565b60065442111561097657600554600c546004546107fb926001600160a01b03918216929116903390611068565b600854600954141561081d57600754610815906002610f99565b600755610849565b61083f60026104e86009546104e8600854600754610f8d90919063ffffffff16565b6007556009546008555b600480546005546040517f70a082310000000000000000000000000000000000000000000000000000000081526000936001600160a01b03938416936370a082319361089893911691016114cb565b60206040518083038186803b1580156108b057600080fd5b505afa1580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190611497565b90506108ff60095482610f9990919063ffffffff16565b6007541061092657600954610915908290610f99565b600755600d805460ff191660011790555b42600a8190556009546109399190610fa5565b60068190556040517ff92b4d3a8d8ba77170dd5cf6b65260191092093f924263a88c3c60dd8495f0919161096c916119a6565b60405180910390a1505b50565b6002600054141561099c5760405162461bcd60e51b815260040161045f90611912565b6002600055336109aa610d0f565b600b556109b5610bcc565b600a556001600160a01b038116156109fc576109d08161047c565b6001600160a01b0382166000908152600f6020908152604080832093909355600b54600e909152919020555b336000908152600f60205260409020548015610a7b57336000818152600f6020526040812055600554600454610a42926001600160a01b03918216929091169084611068565b336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04868260405161070d91906119a6565b50506001600055565b610a8c610fb1565b610a9461108f565b565b6002546001600160a01b031681565b600d5461010090046001600160a01b0390811691161490565b60015460ff1690565b6001600160a01b031660009081526011602052604090205490565b6002546001600160a01b03163314610b0c5760405162461bcd60e51b815260040161045f90611665565b6001546002546040517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c92610b54926001600160a01b036101009092048216929116906114df565b60405180910390a160028054600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0384160217905573ffffffffffffffffffffffffffffffffffffffff19169055565b60075481565b600d5461010090046001600160a01b031681565b6000610599426006546110fd565b610be2610fb1565b610a94611113565b610bf2610fb1565b6004546001600160a01b0383811691161415610c205760405162461bcd60e51b815260040161045f90611949565b600154610c3f906001600160a01b038481169161010090041683610fe0565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161096c92919061151d565b600e6020526000908152604090205481565b60015461010090046001600160a01b031681565b6005546001600160a01b031681565b60085481565b600a5481565b610cb9610fb1565b6006544211610cda5760405162461bcd60e51b815260040161045f906115ab565b60098190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39061056e9083906119a6565b600060105460001415610d255750600b5461057d565b610599610d546010546104e8670de0b6b3a7640000610d4e600754610d4e600a546104c3610bcc565b90610f8d565b600b5490610fa5565b600d5460ff1681565b600b5481565b33600090815260116020526040902054610d85906105db565b610a94610979565b60065481565b610d9b610fb1565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055600781905542600a819055600954610ddb9190610fa5565b6006556007546040517fbf417aae63cb5d7ff1c46e8ab048b96c82cf55edfd3533424b043a47529d96fe9161096c916119a6565b6004546001600160a01b031681565b60026000541415610e415760405162461bcd60e51b815260040161045f90611912565b6002600055610e4e610abe565b15610e6b5760405162461bcd60e51b815260040161045f90611756565b81610e74610d0f565b600b55610e7f610bcc565b600a556001600160a01b03811615610ec657610e9a8161047c565b6001600160a01b0382166000908152600f6020908152604080832093909355600b54600e909152919020555b600c54821015610ee85760405162461bcd60e51b815260040161045f90611821565b601054610ef59083610fa5565b6010556001600160a01b038316600090815260116020526040902054610f1b9083610fa5565b6001600160a01b038416600081815260116020526040908190209290925590517f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90610f689085906119a6565b60405180910390a25050600160005550565b6000610f868284611a3d565b9392505050565b6000610f868284611a00565b6000610f8682846119c7565b6000610f8682846119af565b60015461010090046001600160a01b03163314610a945760405162461bcd60e51b815260040161045f9061178d565b6110638363a9059cbb60e01b8484604051602401610fff92919061151d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261116d565b505050565b611089846323b872dd60e01b858585604051602401610fff939291906114f9565b50505050565b611097610abe565b6110b35760405162461bcd60e51b815260040161045f9061162e565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6110e66111fc565b6040516110f391906114cb565b60405180910390a1565b600081831061110c5781610f86565b5090919050565b61111b610abe565b156111385760405162461bcd60e51b815260040161045f90611756565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110e66111fc565b60006111c2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112009092919063ffffffff16565b80519091501561106357808060200190518101906111e0919061145f565b6110635760405162461bcd60e51b815260040161045f906118b5565b3390565b606061120f8484600085611217565b949350505050565b6060824710156112395760405162461bcd60e51b815260040161045f906116f9565b611242856112d7565b61125e5760405162461bcd60e51b815260040161045f9061187e565b600080866001600160a01b0316858760405161127a91906114af565b60006040518083038185875af1925050503d80600081146112b7576040519150601f19603f3d011682016040523d82523d6000602084013e6112bc565b606091505b50915091506112cc8282866112dd565b979650505050505050565b3b151590565b606083156112ec575081610f86565b8251156112fc5782518084602001fd5b8160405162461bcd60e51b815260040161045f9190611541565b80356001600160a01b03811681146104f757600080fd5b60008083601f84011261133e578182fd5b50813567ffffffffffffffff811115611355578182fd5b60208301915083602082850101111561136d57600080fd5b9250929050565b600060208284031215611385578081fd5b610f8682611316565b60008060008060008060008060c0898b0312156113a9578384fd5b6113b289611316565b97506113c060208a01611316565b96506113ce60408a01611316565b955060608901359450608089013567ffffffffffffffff808211156113f1578586fd5b6113fd8c838d0161132d565b909650945060a08b0135915080821115611415578384fd5b506114228b828c0161132d565b999c989b5096995094979396929594505050565b60008060408385031215611448578182fd5b61145183611316565b946020939093013593505050565b600060208284031215611470578081fd5b81518015158114610f86578182fd5b600060208284031215611490578081fd5b5035919050565b6000602082840312156114a8578081fd5b5051919050565b600082516114c1818460208701611a54565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611560816040850160208701611a54565b601f01601f19169190910160400192915050565b6020808252601e908201527f43726561746f6e205374616b696e673a20496e76616c696420746f6b656e0000604082015260600190565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526035908201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560408201527f2063616e20616363657074206f776e6572736869700000000000000000000000606082015260800190565b60208082526011908201527f4c61737420706572696f6420697320696e000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602f908201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660408201527f6f726d207468697320616374696f6e0000000000000000000000000000000000606082015260800190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b60208082526037908201527f43726561746f6e205374616b696e673a2043616e2774207374616b65206c657360408201527f73207468616e207265717569726564206d696e696d756d000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600082198211156119c2576119c2611a80565b500190565b6000826119fb577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a3857611a38611a80565b500290565b600082821015611a4f57611a4f611a80565b500390565b60005b83811015611a6f578181015183820152602001611a57565b838111156110895750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220322464d54b5581e5333e4238c8bf4368dd515f18f22cdab34705d927cf2ce09e64736f6c63430008000033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025a5760003560e01c80637b0a47ee11610145578063c8f33c91116100bd578063df136d651161008c578063ebe2b12b11610071578063ebe2b12b14610412578063f0ba2b751461041a578063fc0c546a1461042d5761025a565b8063df136d6514610402578063e9fad8ee1461040a5761025a565b8063c8f33c91146103d7578063cc1a378f146103df578063cd3daf9d146103f2578063d340ef8a146103fa5761025a565b80638980f11f116101145780638da5cb5b116100f95780638da5cb5b146103bf578063a430be6c146103c7578063b2e8c5e5146103cf5761025a565b80638980f11f146103995780638b876347146103ac5761025a565b80637b0a47ee146103795780637da0a8771461038157806380faa57d146103895780638456cb59146103915761025a565b8063386a9525116101d857806353a47bb7116101a75780635c975abb1161018c5780635c975abb1461035657806370a082311461035e57806379ba5097146103715761025a565b806353a47bb714610321578063572b6c05146103365761025a565b8063386a9525146103015780633a936206146103095780633d18b912146103115780633f4ba83a146103195761025a565b806318160ddd1161022f578063233e990311610214578063233e9903146102d35780632e1a7d4d146102e6578063375b3c0a146102f95761025a565b806318160ddd146102c35780631c1f78eb146102cb5761025a565b806223de291461025f5780628cc262146102745780630700037d1461029d5780631627540c146102b0575b600080fd5b61027261026d36600461138e565b610435565b005b610287610282366004611374565b61047c565b60405161029491906119a6565b60405180910390f35b6102876102ab366004611374565b6104fc565b6102726102be366004611374565b61050e565b610287610579565b610287610580565b6102726102e136600461147f565b61059e565b6102726102f436600461147f565b6105db565b61028761071e565b610287610724565b61027261072a565b610272610979565b610272610a84565b610329610a96565b60405161029491906114cb565b610349610344366004611374565b610aa5565b6040516102949190611536565b610349610abe565b61028761036c366004611374565b610ac7565b610272610ae2565b610287610bb2565b610329610bb8565b610287610bcc565b610272610bda565b6102726103a7366004611436565b610bea565b6102876103ba366004611374565b610c70565b610329610c82565b610329610c96565b610287610ca5565b610287610cab565b6102726103ed36600461147f565b610cb1565b610287610d0f565b610349610d5d565b610287610d66565b610272610d6c565b610287610d8d565b610272610428366004611436565b610d93565b610329610e0f565b6004546001600160a01b031633146104685760405162461bcd60e51b815260040161045f90611574565b60405180910390fd5b6104728786610e1e565b5050505050505050565b6001600160a01b0381166000908152600f6020908152604080832054600e9092528220546104f491906104ee90670de0b6b3a7640000906104e8906104c9906104c3610d0f565b90610f7a565b6001600160a01b03881660009081526011602052604090205490610f8d565b90610f99565b90610fa5565b90505b919050565b600f6020526000908152604090205481565b610516610fb1565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229061056e9083906114cb565b60405180910390a150565b6010545b90565b6000610599600954600754610f8d90919063ffffffff16565b905090565b6105a6610fb1565b600c8190556040517f47ab46f2c8d4258304a2f5551c1cbdb6981be49631365d1ba7191288a73f39ef9061056e9083906119a6565b600260005414156105fe5760405162461bcd60e51b815260040161045f90611912565b60026000553361060c610d0f565b600b55610617610bcc565b600a556001600160a01b0381161561065e576106328161047c565b6001600160a01b0382166000908152600f6020908152604080832093909355600b54600e909152919020555b6000821161067e5760405162461bcd60e51b815260040161045f906117ea565b60105461068b9083610f7a565b601055336000908152601160205260409020546106a89083610f7a565b336000818152601160205260409020919091556004546106d4916001600160a01b039091169084610fe0565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161070d91906119a6565b60405180910390a250506001600055565b600c5481565b60095481565b6000610734610d0f565b600b5561073f610bcc565b600a556001600160a01b038116156107865761075a8161047c565b6001600160a01b0382166000908152600f6020908152604080832093909355600b54600e909152919020555b61078e610abe565b156107ab5760405162461bcd60e51b815260040161045f90611756565b600d5460ff16156107ce5760405162461bcd60e51b815260040161045f906116c2565b60065442111561097657600554600c546004546107fb926001600160a01b03918216929116903390611068565b600854600954141561081d57600754610815906002610f99565b600755610849565b61083f60026104e86009546104e8600854600754610f8d90919063ffffffff16565b6007556009546008555b600480546005546040517f70a082310000000000000000000000000000000000000000000000000000000081526000936001600160a01b03938416936370a082319361089893911691016114cb565b60206040518083038186803b1580156108b057600080fd5b505afa1580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190611497565b90506108ff60095482610f9990919063ffffffff16565b6007541061092657600954610915908290610f99565b600755600d805460ff191660011790555b42600a8190556009546109399190610fa5565b60068190556040517ff92b4d3a8d8ba77170dd5cf6b65260191092093f924263a88c3c60dd8495f0919161096c916119a6565b60405180910390a1505b50565b6002600054141561099c5760405162461bcd60e51b815260040161045f90611912565b6002600055336109aa610d0f565b600b556109b5610bcc565b600a556001600160a01b038116156109fc576109d08161047c565b6001600160a01b0382166000908152600f6020908152604080832093909355600b54600e909152919020555b336000908152600f60205260409020548015610a7b57336000818152600f6020526040812055600554600454610a42926001600160a01b03918216929091169084611068565b336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04868260405161070d91906119a6565b50506001600055565b610a8c610fb1565b610a9461108f565b565b6002546001600160a01b031681565b600d5461010090046001600160a01b0390811691161490565b60015460ff1690565b6001600160a01b031660009081526011602052604090205490565b6002546001600160a01b03163314610b0c5760405162461bcd60e51b815260040161045f90611665565b6001546002546040517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c92610b54926001600160a01b036101009092048216929116906114df565b60405180910390a160028054600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b0384160217905573ffffffffffffffffffffffffffffffffffffffff19169055565b60075481565b600d5461010090046001600160a01b031681565b6000610599426006546110fd565b610be2610fb1565b610a94611113565b610bf2610fb1565b6004546001600160a01b0383811691161415610c205760405162461bcd60e51b815260040161045f90611949565b600154610c3f906001600160a01b038481169161010090041683610fe0565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161096c92919061151d565b600e6020526000908152604090205481565b60015461010090046001600160a01b031681565b6005546001600160a01b031681565b60085481565b600a5481565b610cb9610fb1565b6006544211610cda5760405162461bcd60e51b815260040161045f906115ab565b60098190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39061056e9083906119a6565b600060105460001415610d255750600b5461057d565b610599610d546010546104e8670de0b6b3a7640000610d4e600754610d4e600a546104c3610bcc565b90610f8d565b600b5490610fa5565b600d5460ff1681565b600b5481565b33600090815260116020526040902054610d85906105db565b610a94610979565b60065481565b610d9b610fb1565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416179055600781905542600a819055600954610ddb9190610fa5565b6006556007546040517fbf417aae63cb5d7ff1c46e8ab048b96c82cf55edfd3533424b043a47529d96fe9161096c916119a6565b6004546001600160a01b031681565b60026000541415610e415760405162461bcd60e51b815260040161045f90611912565b6002600055610e4e610abe565b15610e6b5760405162461bcd60e51b815260040161045f90611756565b81610e74610d0f565b600b55610e7f610bcc565b600a556001600160a01b03811615610ec657610e9a8161047c565b6001600160a01b0382166000908152600f6020908152604080832093909355600b54600e909152919020555b600c54821015610ee85760405162461bcd60e51b815260040161045f90611821565b601054610ef59083610fa5565b6010556001600160a01b038316600090815260116020526040902054610f1b9083610fa5565b6001600160a01b038416600081815260116020526040908190209290925590517f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90610f689085906119a6565b60405180910390a25050600160005550565b6000610f868284611a3d565b9392505050565b6000610f868284611a00565b6000610f8682846119c7565b6000610f8682846119af565b60015461010090046001600160a01b03163314610a945760405162461bcd60e51b815260040161045f9061178d565b6110638363a9059cbb60e01b8484604051602401610fff92919061151d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261116d565b505050565b611089846323b872dd60e01b858585604051602401610fff939291906114f9565b50505050565b611097610abe565b6110b35760405162461bcd60e51b815260040161045f9061162e565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6110e66111fc565b6040516110f391906114cb565b60405180910390a1565b600081831061110c5781610f86565b5090919050565b61111b610abe565b156111385760405162461bcd60e51b815260040161045f90611756565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110e66111fc565b60006111c2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112009092919063ffffffff16565b80519091501561106357808060200190518101906111e0919061145f565b6110635760405162461bcd60e51b815260040161045f906118b5565b3390565b606061120f8484600085611217565b949350505050565b6060824710156112395760405162461bcd60e51b815260040161045f906116f9565b611242856112d7565b61125e5760405162461bcd60e51b815260040161045f9061187e565b600080866001600160a01b0316858760405161127a91906114af565b60006040518083038185875af1925050503d80600081146112b7576040519150601f19603f3d011682016040523d82523d6000602084013e6112bc565b606091505b50915091506112cc8282866112dd565b979650505050505050565b3b151590565b606083156112ec575081610f86565b8251156112fc5782518084602001fd5b8160405162461bcd60e51b815260040161045f9190611541565b80356001600160a01b03811681146104f757600080fd5b60008083601f84011261133e578182fd5b50813567ffffffffffffffff811115611355578182fd5b60208301915083602082850101111561136d57600080fd5b9250929050565b600060208284031215611385578081fd5b610f8682611316565b60008060008060008060008060c0898b0312156113a9578384fd5b6113b289611316565b97506113c060208a01611316565b96506113ce60408a01611316565b955060608901359450608089013567ffffffffffffffff808211156113f1578586fd5b6113fd8c838d0161132d565b909650945060a08b0135915080821115611415578384fd5b506114228b828c0161132d565b999c989b5096995094979396929594505050565b60008060408385031215611448578182fd5b61145183611316565b946020939093013593505050565b600060208284031215611470578081fd5b81518015158114610f86578182fd5b600060208284031215611490578081fd5b5035919050565b6000602082840312156114a8578081fd5b5051919050565b600082516114c1818460208701611a54565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611560816040850160208701611a54565b601f01601f19169190910160400192915050565b6020808252601e908201527f43726561746f6e205374616b696e673a20496e76616c696420746f6b656e0000604082015260600190565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526035908201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560408201527f2063616e20616363657074206f776e6572736869700000000000000000000000606082015260800190565b60208082526011908201527f4c61737420706572696f6420697320696e000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602f908201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660408201527f6f726d207468697320616374696f6e0000000000000000000000000000000000606082015260800190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b60208082526037908201527f43726561746f6e205374616b696e673a2043616e2774207374616b65206c657360408201527f73207468616e207265717569726564206d696e696d756d000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600082198211156119c2576119c2611a80565b500190565b6000826119fb577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a3857611a38611a80565b500290565b600082821015611a4f57611a4f611a80565b500390565b60005b83811015611a6f578181015183820152602001611a57565b838111156110895750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220322464d54b5581e5333e4238c8bf4368dd515f18f22cdab34705d927cf2ce09e64736f6c63430008000033",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "paused()": {
          "details": "Returns true if the contract is paused, and false otherwise."
        },
        "tokensReceived(address,address,address,uint256,bytes,bytes)": {
          "details": "Called by an {IERC777} token contract whenever tokens are being moved or created into a registered account (`to`). The type of operation is conveyed by `from` being the zero address or not. This call occurs _after_ the token contract's state is updated, so {IERC777-balanceOf}, etc., can be used to query the post-operation state. This function may revert to prevent the operation from being executed."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 1028,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "_status",
          "offset": 0,
          "slot": "0",
          "type": "t_uint256"
        },
        {
          "astId": 943,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "_paused",
          "offset": 0,
          "slot": "1",
          "type": "t_bool"
        },
        {
          "astId": 18595,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "owner",
          "offset": 1,
          "slot": "1",
          "type": "t_address"
        },
        {
          "astId": 18597,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "nominatedOwner",
          "offset": 0,
          "slot": "2",
          "type": "t_address"
        },
        {
          "astId": 17259,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "_erc1820",
          "offset": 0,
          "slot": "3",
          "type": "t_contract(IERC1820Registry)4112"
        },
        {
          "astId": 17267,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "token",
          "offset": 0,
          "slot": "4",
          "type": "t_contract(IERC20)1636"
        },
        {
          "astId": 17270,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "rewardEscrow",
          "offset": 0,
          "slot": "5",
          "type": "t_contract(IERC20)1636"
        },
        {
          "astId": 17273,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "periodFinish",
          "offset": 0,
          "slot": "6",
          "type": "t_uint256"
        },
        {
          "astId": 17276,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "rewardRate",
          "offset": 0,
          "slot": "7",
          "type": "t_uint256"
        },
        {
          "astId": 17279,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "oldRewardsDuration",
          "offset": 0,
          "slot": "8",
          "type": "t_uint256"
        },
        {
          "astId": 17282,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "rewardsDuration",
          "offset": 0,
          "slot": "9",
          "type": "t_uint256"
        },
        {
          "astId": 17284,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "lastUpdateTime",
          "offset": 0,
          "slot": "10",
          "type": "t_uint256"
        },
        {
          "astId": 17286,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "rewardPerTokenStored",
          "offset": 0,
          "slot": "11",
          "type": "t_uint256"
        },
        {
          "astId": 17291,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "minStake",
          "offset": 0,
          "slot": "12",
          "type": "t_uint256"
        },
        {
          "astId": 17294,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "lastPeriod",
          "offset": 0,
          "slot": "13",
          "type": "t_bool"
        },
        {
          "astId": 17296,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "trustedForwarder",
          "offset": 1,
          "slot": "13",
          "type": "t_address"
        },
        {
          "astId": 17300,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "userRewardPerTokenPaid",
          "offset": 0,
          "slot": "14",
          "type": "t_mapping(t_address,t_uint256)"
        },
        {
          "astId": 17304,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "rewards",
          "offset": 0,
          "slot": "15",
          "type": "t_mapping(t_address,t_uint256)"
        },
        {
          "astId": 17306,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "_totalSupply",
          "offset": 0,
          "slot": "16",
          "type": "t_uint256"
        },
        {
          "astId": 17310,
          "contract": "src/metatx/MetatxStaking.sol:MetatxStaking",
          "label": "_balances",
          "offset": 0,
          "slot": "17",
          "type": "t_mapping(t_address,t_uint256)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_contract(IERC1820Registry)4112": {
          "encoding": "inplace",
          "label": "contract IERC1820Registry",
          "numberOfBytes": "20"
        },
        "t_contract(IERC20)1636": {
          "encoding": "inplace",
          "label": "contract IERC20",
          "numberOfBytes": "20"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  },
  "CreatonToken": {
    "address": "0x3E0d24f43e470D703FC664e5878aD57B23702121",
    "abi": [
      {
        "stateMutability": "payable",
        "type": "fallback"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "initialSupply",
            "type": "uint256"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "initialAddress",
            "type": "address"
          }
        ],
        "name": "initializeProxy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "transactionHash": "0xd13ee56ead761ed75c179e5291e44bde7efc91306c9a0be8c3c7a4354dbd4d8f",
    "receipt": {
      "to": null,
      "from": "0xC7AF24dc120b0a74b73E360378867d0c9541094c",
      "contractAddress": "0x3E0d24f43e470D703FC664e5878aD57B23702121",
      "transactionIndex": 9,
      "gasUsed": "349870",
      "logsBloom": "0x
      "blockHash": "0xb4771fc4a8173c22c12e3254f59544ba65cb6345e73d6fd05a00a51f6f9d4268",
      "transactionHash": "0xd13ee56ead761ed75c179e5291e44bde7efc91306c9a0be8c3c7a4354dbd4d8f",
      "logs": [],
      "blockNumber": 4704297,
      "cumulativeGasUsed": "3076593",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "solcInputHash": "1d2abd5f78e13e50b92a11bd1741c557",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAddress\",\"type\":\"address\"}],\"name\":\"initializeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeProxy(address)\":{\"details\":\"Proxy initialization function.      This should only be called once and it is permission-less.\",\"params\":{\"initialAddress\":\"Initial logic contract code address to be used.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/token/create/CreatonToken.sol\":\"CreatonToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0xc706395df88dc1d459f21e51c57ab8820af80d1e8c3c14933a651794d78a429f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x180af7df8832ffcba53dae0c5450b062d2c571a8eaec22619fcaef5758503d7d\",\"license\":\"MIT\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/CustomSuperTokenProxyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport {\\n    ISuperToken\\n} from \\\"../../interfaces/superfluid/ISuperToken.sol\\\";\\nimport { UUPSProxy } from \\\"../../upgradability/UUPSProxy.sol\\\";\\n\\n\\n/**\\n * @dev Custom super token proxy base contract\\n *\\n * NOTE:\\n * - Because of how solidity is layouting its storages variables and custom\\n *   super token inherits the Super Token standard implementation, so it is\\n *   required that the custom token proxy would need to pad its implementation\\n *   with reserved storages used by the Super Token implementation.\\n * - Refer to SETH.sol for an example how it is used.\\n */\\nabstract contract CustomSuperTokenProxyBase is UUPSProxy {\\n    // This is the hard-coded number of storage slots used by the super token\\n    uint256[32] internal _storagePaddings;\\n}\\n\",\"keccak256\":\"0xbddd10d69b20155a1dbd84d19a558e90e3a6e5f1e4275ac52074462e059e4dc3\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\n/**\\n * @dev Super app definitions library\\n */\\nlibrary SuperAppDefinitions {\\n\\n    /**************************************************************************\\n    / App manifest config word\\n    /**************************************************************************/\\n\\n    /*\\n     * App level is a way to allow the app to whitelist what other app it can\\n     * interact with (aka. composite app feature).\\n     *\\n     * For more details, refer to the technical paper of superfluid protocol.\\n     */\\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\\n\\n    // The app is at the final level, hence it doesn't want to interact with any other app\\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\\n\\n    // The app is at the second level, it may interact with other final level apps if whitelisted\\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\\n\\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\\n        return uint8(configWord & APP_LEVEL_MASK);\\n    }\\n\\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\\n    }\\n\\n    /**************************************************************************\\n    / Callback implementation bit masks\\n    /**************************************************************************/\\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\\n\\n    /**************************************************************************\\n    / App Jail Reasons\\n    /**************************************************************************/\\n\\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\\n}\\n\\n/**\\n * @dev Context definitions library\\n */\\nlibrary ContextDefinitions {\\n\\n    /**************************************************************************\\n    / Call info\\n    /**************************************************************************/\\n\\n    // app level\\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\\n\\n    // call type\\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\\n\\n    function decodeCallInfo(uint256 callInfo)\\n        internal pure\\n        returns (uint8 appLevel, uint8 callType)\\n    {\\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\\n        internal pure\\n        returns (uint256 callInfo)\\n    {\\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n}\\n\\n/**\\n * @dev Batch operation library\\n */\\nlibrary BatchOperation {\\n    /**\\n     * @dev ERC20.approve batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationApprove(\\n     *     abi.decode(data, (address spender, uint256 amount))\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\\n    /**\\n     * @dev ERC20.transferFrom batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationTransferFrom(\\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\\n    /**\\n     * @dev SuperToken.upgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationUpgrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\\n    /**\\n     * @dev SuperToken.downgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationDowngrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\\n    /**\\n     * @dev ERC20 Approve batch operation type\\n     *\\n     * Call spec:\\n     * callAgreement(\\n     *     ISuperAgreement(target)),\\n     *     abi.decode(data, (bytes calldata, bytes userdata)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\\n    /**\\n     * @dev ERC20 Approve batch operation type\\n     *\\n     * Call spec:\\n     * callAppAction(\\n     *     ISuperApp(target)),\\n     *     data\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\\n}\\n\\nlibrary SuperfluidGovernanceConfigs {\\n\\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.rewardAddress\\\");\\n\\n    bytes32 constant internal CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\\\");\\n\\n    bytes32 constant internal BICONOMY_FORWARDER_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.biconomyForwarderAddress\\\");\\n\\n}\\n\",\"keccak256\":\"0x9064326a1d8b682294b48a11589525ffa2c33dd99389db0cc900d688b112795a\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\n\\n/**\\n * @title Superfluid's agreement interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperAgreement {\\n\\n    /**\\n     * @dev Initialize the agreement contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the type of the agreement class.\\n     */\\n    function agreementType() external view returns (bytes32);\\n\\n    /**\\n     * @dev Calculate the real-time balance for the account of this agreement class.\\n     * @param account Account the state belongs to\\n     * @param time Future time used for the calculation.\\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement.\\n     * @return deposit Account deposit amount of this agreement.\\n     * @return owedDeposit Account owed deposit amount of this agreement.\\n     */\\n    function realtimeBalanceOf(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 time\\n    )\\n        external\\n        view\\n        returns (\\n            int256 dynamicBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n}\\n\",\"keccak256\":\"0xcf8a33fadd5db47562156a11098623246efd1b46a2c3d28269767bcbb324fd66\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's app interface.\\n *\\n * NOTE:\\n * - Be fearful of the app jail, when the word permitted is used.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperApp {\\n\\n    /**\\n     * @dev Callback before a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n     * @dev Callback after a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param cbdata The data returned from the before-hook callback.\\n     * @param ctx The context data.\\n     * @return newCtx The current context of the transaction.\\n     *\\n     * NOTE:\\n     * - State changes is permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function afterAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n     * @dev Callback before a new agreement is updated.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n\\n    /**\\n    * @dev Callback after a new agreement is updated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Only revert with a \\\"reason\\\" is permitted.\\n    */\\n    function afterAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n    * @dev Callback before a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param ctx The context data.\\n    * @return cbdata A free format in memory data the app can use to pass\\n    *          arbitary information to the after-hook callback.\\n    *\\n    * NOTE:\\n    * - It will be invoked with `staticcall`, no state changes are permitted.\\n    * - Revert is not permitted.\\n    */\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n    * @dev Callback after a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Revert is not permitted.\\n    */\\n    function afterAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n}\\n\",\"keccak256\":\"0xca93702505ec3c8244227e372687d9bdbc9d368fa07723d310ab9550501abb2a\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\\n\\n    /// @dev Initialize the contract\\n    function initialize(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        string calldata n,\\n        string calldata s\\n    ) external;\\n\\n    /**************************************************************************\\n    * TokenInfo & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: SuperToken always uses 18 decimals.\\n     *\\n     * Note: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override(TokenInfo) returns (uint8);\\n\\n    /**************************************************************************\\n    * ERC20 & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\\n\\n    /**************************************************************************\\n    * ERC20\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**************************************************************************\\n    * ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For super token contracts, this value is 1 always\\n     */\\n    function granularity() external view override(IERC777) returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**************************************************************************\\n     * SuperToken custom token functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Mint new tokens for the account\\n     *\\n     * Modifiers:\\n     *  - onlySelf\\n     */\\n    function selfMint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData\\n    ) external;\\n\\n   /**\\n    * @dev Burn existing tokens for the account\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfBurn(\\n       address account,\\n       uint256 amount,\\n       bytes memory userData\\n   ) external;\\n\\n    /**************************************************************************\\n     * SuperToken extra functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\\n     */\\n    function transferAll(address recipient) external;\\n\\n    /**************************************************************************\\n     * ERC20 wrapping\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Return the underlaying token contract\\n     * @return tokenAddr Underlying token address\\n     */\\n    function getUnderlyingToken() external view returns(address tokenAddr);\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken.\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\\n     * @param to The account to received upgraded tokens\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     * @param data User data for the TokensRecipient callback\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Token upgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens upgraded (in 18 decimals)\\n     */\\n    event TokenUpgraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Downgrade SuperToken to ERC20.\\n     * @dev It will call transfer to send tokens\\n     * @param amount Number of tokens to be downgraded\\n     */\\n    function downgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Token downgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens downgraded\\n     */\\n    event TokenDowngraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**************************************************************************\\n    * Batch Operations\\n    *************************************************************************/\\n\\n    /**\\n    * @dev Perform ERC20 approve by host contract.\\n    * @param account The account owner to be approved.\\n    * @param spender The spender of account owner's funds.\\n    * @param amount Number of tokens to be approved.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationApprove(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Perform ERC20 transfer from by host contract.\\n    * @param account The account to spend sender's funds.\\n    * @param spender  The account where the funds is sent from.\\n    * @param recipient The recipient of thefunds.\\n    * @param amount Number of tokens to be transferred.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationTransferFrom(\\n        address account,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Upgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationUpgrade(address account, uint256 amount) external;\\n\\n    /**\\n    * @dev Downgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationDowngrade(address account, uint256 amount) external;\\n\\n\\n    /**************************************************************************\\n    * Function modifiers for access control and parameter validations\\n    *\\n    * While they cannot be explicitly stated in function definitions, they are\\n    * listed in function definition comments instead for clarity.\\n    *\\n    * NOTE: solidity-coverage not supporting it\\n    *************************************************************************/\\n\\n    /// @dev The msg.sender must be the contract itself\\n    //modifier onlySelf() virtual\\n\\n}\\n\",\"keccak256\":\"0x8dfd34270438c845f9c03f72a575e5bf2c9e2011b2d0f8ac20f3fdea711b51ca\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\nimport {\\n    IERC20,\\n    ERC20WithTokenInfo\\n} from \\\"../tokens/ERC20WithTokenInfo.sol\\\";\\n\\n\\ninterface ISuperTokenFactory {\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /// @dev Initialize the contract\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the current super token logic used by the factory\\n     */\\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Upgradability modes\\n     */\\n    enum Upgradability {\\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\\n        NON_UPGRADABLE,\\n        /// Upgradable through `host.updateSuperTokenLogic` operation\\n        SEMI_UPGRADABLE,\\n        /// Always using the latest super token logic\\n        FULL_UPGRADABE\\n    }\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param underlyingDecimals Underlying token decimals\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     */\\n    function createERC20Wrapper(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external;\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     *\\n     * NOTE:\\n     * - It assumes token provide the .decimals() function\\n     */\\n    function createERC20Wrapper(\\n        ERC20WithTokenInfo underlyingToken,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external;\\n\\n    function initializeCustomSuperToken(\\n        address customSuperTokenProxy\\n    )\\n        external;\\n\\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\\n\\n    event SuperTokenCreated(ISuperToken indexed token);\\n\\n}\\n\",\"keccak256\":\"0x98ec18cb1785aed6fe64aa5641036c2f5a3047c16e3b50cd48c0b7d6771432e1\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n// This is required by the batchCall and decodeCtx\\npragma experimental ABIEncoderV2;\\n\\nimport { ISuperfluidGovernance } from \\\"./ISuperfluidGovernance.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperTokenFactory } from \\\"./ISuperTokenFactory.sol\\\";\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperApp } from \\\"./ISuperApp.sol\\\";\\nimport {\\n    SuperAppDefinitions,\\n    ContextDefinitions,\\n    BatchOperation,\\n    SuperfluidGovernanceConfigs\\n} from \\\"./Definitions.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid host interface.\\n\\n * It is the central contract of the system where super agreement, super app\\n * and super token features are connected together.\\n *\\n * The superfluid host contract is also the entry point for the protocol users,\\n * where batch call and meta transaction are provided for UX improvements.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluid {\\n\\n    /**************************************************************************\\n     * Governance\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get the current governace of the Superfluid host\\n     */\\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\\n\\n    /**\\n     * @dev Replace the current governance with a new one\\n     */\\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\\n\\n    /**************************************************************************\\n     * Agreement Whitelisting\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Register a new agreement class to the system\\n     * @param agreementClassLogic INitial agreement class code\\n     *\\n     * Modifiers:\\n     *  - onlyGovernance\\n     */\\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    /**\\n    * @dev Update code of an agreement class\\n    * @param agreementClassLogic New code for the agreement class\\n    *\\n    * Modifiers:\\n    *  - onlyGovernance\\n    */\\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\\n\\n    /**\\n    * @dev Get agreement class\\n    */\\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\\n\\n    /**\\n    * @dev Map list of the agreement classes using a bitmap\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function mapAgreementClasses(uint256 bitmap)\\n        external view\\n        returns (ISuperAgreement[] memory agreementClasses);\\n\\n    /**\\n    * @dev Create a new bitmask by adding a agreement class to it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**\\n    * @dev Create a new bitmask by removing a agreement class from it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**************************************************************************\\n    * Super Token Factory\\n    **************************************************************************/\\n\\n    /**\\n     * @dev Get the super token factory\\n     * @return factory The factory\\n     */\\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\\n\\n    /**\\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\\n     * @return logic The factory logic\\n     */\\n    function getSuperTokenFactoryLogic() external view returns (address logic);\\n\\n    /**\\n     * @dev Update super token factory\\n     * @param newFactory New factory logic\\n     */\\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\\n\\n    /**\\n     * @dev Update the super token logic to the latest\\n     *\\n     * NOTE:\\n     * - Refer toISuperTokenFactory.Upgradability for expected behaviours.\\n     */\\n    function updateSuperTokenLogic(ISuperToken token) external;\\n\\n    /**************************************************************************\\n     * App Registry\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Message sender declares it as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     */\\n    function registerApp(uint256 configWord) external;\\n\\n    /**\\n     * @dev Query if the app is registered\\n     * @param app Super app address\\n     */\\n    function isApp(ISuperApp app) external view returns(bool);\\n\\n    /**\\n     * @dev Query app level\\n     * @param app Super app address\\n     */\\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\\n\\n    /**\\n     * @dev Get the manifest of the super app\\n     * @param app Super app address\\n     */\\n    function getAppManifest(\\n        ISuperApp app\\n    )\\n        external view\\n        returns (\\n            bool isSuperApp,\\n            bool isJailed,\\n            uint256 noopMask\\n        );\\n\\n    /**\\n     * @dev Query if the app has been jailed\\n     * @param app Super app address\\n     */\\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\\n\\n    /**\\n     * @dev White-list the target app for app composition for the source app (msg.sender)\\n     * @param targetApp The taget super app address\\n     */\\n    function allowCompositeApp(ISuperApp targetApp) external;\\n\\n    /**\\n     * @dev Query if source app  is allowed to call the target app as downstream app.\\n     * @param app Super app address\\n     * @param targetApp The taget super app address\\n     */\\n    function isCompositeAppAllowed(\\n        ISuperApp app,\\n        ISuperApp targetApp\\n    )\\n        external view\\n        returns (bool isAppAllowed);\\n\\n    /**\\n     * @dev Jail event for the app\\n     */\\n    event Jail(ISuperApp indexed app, uint256 reason);\\n\\n    /**************************************************************************\\n     * Agreement Framework\\n     *\\n     * Agreements use these function to trigger super app callbacks, updates\\n     * app allowance and charge gas fees.\\n     *\\n     * These functions can only be called by registered agreements.\\n     *************************************************************************/\\n\\n    function callAppBeforeCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory cbdata);\\n\\n    function callAppAfterCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory appCtx);\\n\\n    function appCallbackPush(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 appAllowanceGranted,\\n        int256 appAllowanceUsed\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory appCtx);\\n\\n    function appCallbackPop(\\n        bytes calldata ctx,\\n        int256 allowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function ctxUseAllowance(\\n        bytes calldata ctx,\\n        uint256 allowanceWantedMore,\\n        int256 allowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function jailApp(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 reason\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    /**************************************************************************\\n     * Contextless Call Proxies\\n     *\\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\\n     * with agreements or apps.\\n     *\\n     * NOTE: The contextual call data should be generated using\\n     * abi.encodeWithSelector. The context parameter should be set to \\\"0x\\\",\\n     * an empty bytes array as a placeholder to be replaced by the host\\n     * contract.\\n     *************************************************************************/\\n\\n     /**\\n      * @dev Call agreement function\\n      * @param callData The contextual call data with placeholder ctx\\n      * @param userData Extra user data being sent to the super app callbacks\\n      */\\n     function callAgreement(\\n         ISuperAgreement agreementClass,\\n         bytes calldata callData,\\n         bytes calldata userData\\n     )\\n        external\\n        //cleanCtx\\n        returns(bytes memory returnedData);\\n\\n    /**\\n     * @dev Call app action\\n     * @param callData The contextual call data.\\n     *\\n     * NOTE: See callAgreement about contextual call data.\\n     */\\n    function callAppAction(\\n        ISuperApp app,\\n        bytes calldata callData\\n    )\\n        external\\n        //cleanCtx\\n        //isAppActive(app)\\n        returns(bytes memory returnedData);\\n\\n    /**************************************************************************\\n     * Contextual Call Proxies and Context Utilities\\n     *\\n     * For apps, they must use context they receive to interact with\\n     * agreements or apps.\\n     *\\n     * The context changes must be saved and returned by the apps in their\\n     * callbacks always, any modification to the context will be detected and\\n     * the violating app will be jailed.\\n     *************************************************************************/\\n\\n    /**\\n     * @dev ABIv2 Encoded memory data of context\\n     *\\n     * NOTE on backward compatibility:\\n     * - Non-dynamic fields are padded to 32bytes and packed\\n     * - Dynamic fields are referenced through a 32bytes offset to their \\\"parents\\\" field (or root)\\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\\n     *    - non-dynamic fields will be parsed at the same memory location,\\n     *    - and dynamic fields will simply have a greater offset than it was.\\n     */\\n    struct Context {\\n        //\\n        // Call context\\n        //\\n        // callback level\\n        uint8 appLevel;\\n        // type of call\\n        uint8 callType;\\n        // the system timestsamp\\n        uint256 timestamp;\\n        // The intended message sender for the call\\n        address msgSender;\\n\\n        //\\n        // Callback context\\n        //\\n        // For callbacks it is used to know which agreement function selector is called\\n        bytes4 agreementSelector;\\n        // User provided data for app callbacks\\n        bytes userData;\\n\\n        //\\n        // App context\\n        //\\n        // app allowance granted\\n        uint256 appAllowanceGranted;\\n        // app allowance wanted by the app callback\\n        uint256 appAllowanceWanted;\\n        // app allowance used, allowing negative values over a callback session\\n        int256 appAllowanceUsed;\\n    }\\n\\n    function callAgreementWithContext(\\n        ISuperAgreement agreementClass,\\n        bytes calldata callData,\\n        bytes calldata userData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // onlyAgreement(agreementClass)\\n        returns (bytes memory newCtx, bytes memory returnedData);\\n\\n    function callAppActionWithContext(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // isAppActive(app)\\n        returns (bytes memory newCtx);\\n\\n    function decodeCtx(bytes calldata ctx)\\n        external pure\\n        returns (Context memory context);\\n\\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\\n\\n    /**************************************************************************\\n    * Batch call\\n    **************************************************************************/\\n    /**\\n     * @dev Batch operation data\\n     */\\n    struct Operation {\\n        // Operation. Defined in BatchOperation (Definitions.sol)\\n        uint32 operationType;\\n        // Operation target\\n        address target;\\n        // Data specific to the operation\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Batch call function\\n     * @param operations Array of batch operations.\\n     */\\n    function batchCall(Operation[] memory operations) external;\\n\\n    /**\\n     * @dev Batch call function with biconomy forwarder\\n     * @param operations Array of batch operations.\\n     */\\n    function biconomyBatchCall(Operation[] memory operations) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * TODO: turning these off because solidity-coverage don't like it\\n     *************************************************************************/\\n\\n     /* /// @dev The current superfluid context is clean.\\n     modifier cleanCtx() virtual;\\n\\n     /// @dev The superfluid context is valid.\\n     modifier validCtx(bytes memory ctx) virtual;\\n\\n     /// @dev The agreement is a listed agreement.\\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\\n\\n     // onlyGovernance\\n\\n     /// @dev The msg.sender must be a listed agreement.\\n     modifier onlyAgreement() virtual;\\n\\n     /// @dev The app is registered and not jailed.\\n     modifier isAppActive(ISuperApp app) virtual; */\\n}\\n\",\"keccak256\":\"0xcd1a4ada488892fb2cde3a63bf798a57505519df1fdf0daf21a002bd5186a3d6\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperfluidToken  } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's Governance interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidGovernance {\\n\\n    /**\\n     * @dev Replace the current governance with a new governance\\n     */\\n    function replaceGovernance(\\n        ISuperfluid host,\\n        address newGov) external;\\n\\n    /**\\n     * @dev Register a new agreement class\\n     */\\n    function registerAgreementClass(\\n        ISuperfluid host,\\n        address agreementClass) external;\\n\\n    /**\\n     * @dev Update logics of the contracts\\n     *\\n     * NOTE:\\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\\n     */\\n    function updateContracts(\\n        ISuperfluid host,\\n        address hostNewLogic,\\n        address[] calldata agreementClassNewLogics,\\n        address superTokenFactoryNewLogic\\n    ) external;\\n\\n    /**\\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\\n     */\\n    function updateSuperTokenLogic(\\n        ISuperfluid host,\\n        ISuperToken token) external;\\n\\n    /// @dev Get configuration as address value\\n    function getConfigAsAddress(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (address value);\\n\\n    /// @dev Get configuration as uint256 value\\n    function getConfigAsUint256(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x1494ca0fcbe19dac4d2cf599dacd1053c1405d96965761f4bbae9fc4f39e88ac\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's token interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidToken {\\n\\n    /**************************************************************************\\n     * Basic information\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /**************************************************************************\\n     * Real-time balance functions\\n     *************************************************************************/\\n\\n    /**\\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\\n    * @param account for the query\\n    * @param timestamp Time of balance\\n    * @param account Account to query\\n    * @return availableBalance Real-time balance\\n    * @return deposit Account deposit\\n    * @return owedDeposit Account owed Deposit\\n    */\\n    function realtimeBalanceOf(\\n       address account,\\n       uint256 timestamp\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /// @dev realtimeBalanceOf with timestamp equals to block timestamp\\n    function realtimeBalanceOfNow(\\n       address account\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit,\\n            uint256 timestamp);\\n\\n    /**\\n    * @dev Check if one account is critical\\n    * @param account Account check if is critical by a future time\\n    * @param timestamp Time of balance\\n    * @return isCritical\\n    */\\n    function isAccountCritical(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n    * @dev Check if one account is critical now\\n    * @param account Account check if is critical by a future time\\n    * @return isCritical\\n    */\\n    function isAccountCriticalNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n     * @dev Check if one account is solvent\\n     * @param account Account check if is solvent by a future time\\n     * @param timestamp Time of balance\\n     * @return isSolvent\\n     */\\n    function isAccountSolvent(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n     * @dev Check if one account is solvent now\\n     * @param account Account check if is solvent now\\n     * @return isSolvent\\n     */\\n    function isAccountSolventNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n    * @dev Get a list of agreements that is active for the account\\n    * @dev An active agreement is one that has state for the account\\n    * @param account Account to query\\n    * @return activeAgreements List of accounts that have non-zero states for the account\\n    */\\n    function getAccountActiveAgreements(address account)\\n       external view\\n       returns(ISuperAgreement[] memory activeAgreements);\\n\\n\\n   /**************************************************************************\\n    * Super Agreement hosting functions\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function createAgreement(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementCreated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Get data of the agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @return data Data of the agreement\\n     */\\n    function getAgreementData(\\n        address agreementClass,\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external view\\n        returns(bytes32[] memory data);\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function updateAgreementData(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementUpdated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Close the agreement\\n     * @param id Agreement ID\\n     */\\n    function terminateAgreement(\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement termination event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     */\\n    event AgreementTerminated(\\n        address indexed agreementClass,\\n        bytes32 id\\n    );\\n\\n    /**\\n     * @dev Update agreement state slot\\n     * @param account Account to be updated\\n     *\\n     * NOTE\\n     * - To clear the storage out, provide zero-ed array of intended length\\n     */\\n    function updateAgreementStateSlot(\\n        address account,\\n        uint256 slotId,\\n        bytes32[] calldata slotData\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account updated\\n     * @param slotId slot id of the agreement state\\n     */\\n    event AgreementStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        uint256 slotId\\n    );\\n\\n    /**\\n     * @dev Get data of the slot of the state of a agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account to query\\n     * @param slotId slot id of the state\\n     * @param dataLength length of the state data\\n     */\\n    function getAgreementStateSlot(\\n        address agreementClass,\\n        address account,\\n        uint256 slotId,\\n        uint dataLength\\n    )\\n        external view\\n        returns (bytes32[] memory slotData);\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account of the agrement\\n     * @param state Agreement state of the account\\n     */\\n    event AgreementAccountStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        bytes state\\n    );\\n\\n    /**\\n     * @dev Settle balance from an account by the agreement.\\n     *      The agreement needs to make sure that the balance delta is balanced afterwards\\n     * @param account Account to query.\\n     * @param delta Amount of balance delta to be settled\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function settleBalance(\\n        address account,\\n        int256 delta\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement liquidation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAccount Account that collect the reward\\n     * @param rewardAmount Amount of liquidation reward\\n     */\\n    event AgreementLiquidated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed rewardAccount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev System bailout occurred\\n     * @param bailoutAccount Account that bailout the penalty account\\n     * @param bailoutAmount Amount of account bailout\\n     */\\n    event Bailout(\\n        address indexed bailoutAccount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Make liquidation payouts\\n     * @param id Agreement ID\\n     * @param liquidator Address of the executer of liquidation\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of account bailout needed\\n     *\\n     * NOTE:\\n     * Liquidation rules:\\n     *  - If a bailout is required (bailoutAmount > 0)\\n     *     - the actual reward goes to the liquidator,\\n     *     - while the reward account becomes the bailout account\\n     *     - total bailout include: bailout amount + reward amount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayouts\\n    (\\n        bytes32 id,\\n        address liquidator,\\n        address penaltyAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    )\\n        external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * NOTE: solidity-coverage not supporting it\\n     *************************************************************************/\\n\\n     /// @dev The msg.sender must be host contract\\n     //modifier onlyHost() virtual;\\n\\n    /// @dev The msg.sender must be a listed agreement.\\n    //modifier onlyAgreement() virtual;\\n\\n}\\n\",\"keccak256\":\"0xfee1ab65ddbf90b8543a443de70a576218b83dd45aca360c0ec858726eb03feb\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInfo } from \\\"./TokenInfo.sol\\\";\\n\\n\\n/**\\n *\\n * @dev Interface for ERC20 token with token info\\n *\\n * NOTE: Using abstract contract instead of interfaces because old solidity\\n * does not support interface inheriting other interfaces\\n * solhint-disable-next-line no-empty-blocks\\n *\\n */\\n// solhint-disable-next-line no-empty-blocks\\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\\n\",\"keccak256\":\"0x808d3a486826e7f119671174a77896c6e23578e691625350dbb3e9f74a0d5137\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\n/**\\n * @dev ERC20 token info interface\\n *\\n * NOTE: ERC20 standard interface does not specify these functions, but\\n * often the token implementations have them.\\n *\\n */\\ninterface TokenInfo {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x4dee21b8f64edbfe811a300d31f529b5367d1186d69b8b2b8dc3373be7a108b0\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >=0.7.6;\\n\\nimport { UUPSUtils } from \\\"./UUPSUtils.sol\\\";\\nimport { Proxy } from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\n\\n\\n/**\\n * @dev UUPS (Universal Upgradeable Proxy Standard) Proxy\\n *\\n * NOTE:\\n * - Compliant with [Universal Upgradeable Proxy Standard](https://eips.ethereum.org/EIPS/eip-1822)\\n * - Compiiant with [Standard Proxy Storage Slots](https://eips.ethereum.org/EIPS/eip-1967)\\n * - Implements delegation of calls to other contracts, with proper forwarding of\\n *   return values and bubbling of failures.\\n * - It defines a fallback function that delegates all calls to the implementation.\\n */\\ncontract UUPSProxy is Proxy {\\n\\n    /**\\n     * @dev Proxy initialization function.\\n     *      This should only be called once and it is permission-less.\\n     * @param initialAddress Initial logic contract code address to be used.\\n     */\\n    function initializeProxy(address initialAddress) external {\\n        require(initialAddress != address(0), \\\"UUPSProxy: zero address\\\");\\n        require(UUPSUtils.implementation() == address(0), \\\"UUPSProxy: already initialized\\\");\\n        UUPSUtils.setImplementation(initialAddress);\\n    }\\n\\n    /// @dev Proxy._implementation implementation\\n    function _implementation() internal virtual override view returns (address)\\n    {\\n        return UUPSUtils.implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf475fc0aef2ee4a722a3291db1e55c9b953654e8043deacf0cd0a2451253a237\",\"license\":\"AGPLv3\"},\"src/dependency/superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >=0.7.6;\\n\\n/**\\n * @title UUPS (Universal Upgradeable Proxy Standard) Shared Library\\n */\\nlibrary UUPSUtils {\\n\\n    /**\\n     * @dev Implementation slot constant.\\n     * Using https://eips.ethereum.org/EIPS/eip-1967 standard\\n     * Storage slot 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\n     * (obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)).\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @dev Get implementation address.\\n    function implementation() internal view returns (address impl) {\\n        assembly { // solium-disable-line\\n            impl := sload(_IMPLEMENTATION_SLOT)\\n        }\\n    }\\n\\n    /// @dev Set new implementation address.\\n    function setImplementation(address codeAddress) internal {\\n        assembly {\\n            // solium-disable-line\\n            sstore(\\n                _IMPLEMENTATION_SLOT,\\n                codeAddress\\n            )\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x996ca3a84d825f25d6099f574dd81158165d4fd285707382a1a05a936aa5c26a\",\"license\":\"AGPLv3\"},\"src/token/create/CreatonToken.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {\\n    ISuperToken,\\n    CustomSuperTokenProxyBase\\n}\\nfrom \\\"../../dependency/superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/CustomSuperTokenProxyBase.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//import { UUPSProxiable } from \\\"@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol\\\";\\n\\ninterface INativeSuperToken {\\n    function initialize(string calldata name, string calldata symbol, uint256 initialSupply) external;\\n}\\n\\ncontract CreatonToken is INativeSuperToken, CustomSuperTokenProxyBase{\\n\\n    function initialize(string calldata name, string calldata symbol, uint256 initialSupply)\\n        external override\\n    {\\n        ISuperToken(address(this)).initialize(\\n            IERC20(address(0x0)), // no underlying/wrapped token\\n            18, // shouldn't matter if there's no wrapped token\\n            name,\\n            symbol\\n        );\\n        ISuperToken(address(this)).selfMint(msg.sender, initialSupply, new bytes(0));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x6faecf56417970da5d7291776571f2b55c0a8febbf6df1433e124da71cbf54e1\"}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b50610565806100206000396000f3fe60806040526004361061002d5760003560e01c80634a0687ef14610044578063b119490e146100645761003c565b3661003c5761003a610084565b005b61003a610084565b34801561005057600080fd5b5061003a61005f36600461031a565b61009e565b34801561007057600080fd5b5061003a61007f366004610355565b610157565b61008c61009c565b61009c610097610257565b610266565b565b73ffffffffffffffffffffffffffffffffffffffff81166100f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100eb906104f8565b60405180910390fd5b60006100fe61028a565b73ffffffffffffffffffffffffffffffffffffffff161461014b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100eb906104c1565b610154816102af565b50565b6040517f42fe098000000000000000000000000000000000000000000000000000000000815230906342fe09809061019f906000906012908a908a908a908a90600401610468565b600060405180830381600087803b1580156101b957600080fd5b505af11580156101cd573d6000803e3d6000fd5b5050604080516000815260208101918290527fc68d42830000000000000000000000000000000000000000000000000000000090915230925063c68d4283915061021e9033908590602481016103f0565b600060405180830381600087803b15801561023857600080fd5b505af115801561024c573d6000803e3d6000fd5b505050505050505050565b600061026161028a565b905090565b3660008037600080366000845af43d6000803e808015610285573d6000f35b3d6000fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b60008083601f8401126102e4578182fd5b50813567ffffffffffffffff8111156102fb578182fd5b60208301915083602082850101111561031357600080fd5b9250929050565b60006020828403121561032b578081fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461034e578182fd5b9392505050565b60008060008060006060868803121561036c578081fd5b853567ffffffffffffffff80821115610383578283fd5b61038f89838a016102d3565b909750955060208801359150808211156103a7578283fd5b506103b4888289016102d3565b96999598509660400135949350505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff8516825260208481840152606060408401528351806060850152825b8181101561043f57858101830151858201608001528201610423565b818111156104505783608083870101525b50601f01601f19169290920160800195945050505050565b600073ffffffffffffffffffffffffffffffffffffffff8816825260ff87166020830152608060408301526104a16080830186886103c6565b82810360608401526104b48185876103c6565b9998505050505050505050565b6020808252601e908201527f5555505350726f78793a20616c726561647920696e697469616c697a65640000604082015260600190565b60208082526017908201527f5555505350726f78793a207a65726f206164647265737300000000000000000060408201526060019056fea2646970667358221220a05e62a8eeef8e2d9b7a2a95e7f33bac83a22a9f3546383092d52077ab1a7dae64736f6c63430008000033",
    "deployedBytecode": "0x60806040526004361061002d5760003560e01c80634a0687ef14610044578063b119490e146100645761003c565b3661003c5761003a610084565b005b61003a610084565b34801561005057600080fd5b5061003a61005f36600461031a565b61009e565b34801561007057600080fd5b5061003a61007f366004610355565b610157565b61008c61009c565b61009c610097610257565b610266565b565b73ffffffffffffffffffffffffffffffffffffffff81166100f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100eb906104f8565b60405180910390fd5b60006100fe61028a565b73ffffffffffffffffffffffffffffffffffffffff161461014b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100eb906104c1565b610154816102af565b50565b6040517f42fe098000000000000000000000000000000000000000000000000000000000815230906342fe09809061019f906000906012908a908a908a908a90600401610468565b600060405180830381600087803b1580156101b957600080fd5b505af11580156101cd573d6000803e3d6000fd5b5050604080516000815260208101918290527fc68d42830000000000000000000000000000000000000000000000000000000090915230925063c68d4283915061021e9033908590602481016103f0565b600060405180830381600087803b15801561023857600080fd5b505af115801561024c573d6000803e3d6000fd5b505050505050505050565b600061026161028a565b905090565b3660008037600080366000845af43d6000803e808015610285573d6000f35b3d6000fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b60008083601f8401126102e4578182fd5b50813567ffffffffffffffff8111156102fb578182fd5b60208301915083602082850101111561031357600080fd5b9250929050565b60006020828403121561032b578081fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461034e578182fd5b9392505050565b60008060008060006060868803121561036c578081fd5b853567ffffffffffffffff80821115610383578283fd5b61038f89838a016102d3565b909750955060208801359150808211156103a7578283fd5b506103b4888289016102d3565b96999598509660400135949350505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff8516825260208481840152606060408401528351806060850152825b8181101561043f57858101830151858201608001528201610423565b818111156104505783608083870101525b50601f01601f19169290920160800195945050505050565b600073ffffffffffffffffffffffffffffffffffffffff8816825260ff87166020830152608060408301526104a16080830186886103c6565b82810360608401526104b48185876103c6565b9998505050505050505050565b6020808252601e908201527f5555505350726f78793a20616c726561647920696e697469616c697a65640000604082015260600190565b60208082526017908201527f5555505350726f78793a207a65726f206164647265737300000000000000000060408201526060019056fea2646970667358221220a05e62a8eeef8e2d9b7a2a95e7f33bac83a22a9f3546383092d52077ab1a7dae64736f6c63430008000033",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "initializeProxy(address)": {
          "details": "Proxy initialization function.      This should only be called once and it is permission-less.",
          "params": {
            "initialAddress": "Initial logic contract code address to be used."
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 12241,
          "contract": "src/token/create/CreatonToken.sol:CreatonToken",
          "label": "_storagePaddings",
          "offset": 0,
          "slot": "0",
          "type": "t_array(t_uint256)32_storage"
        }
      ],
      "types": {
        "t_array(t_uint256)32_storage": {
          "base": "t_uint256",
          "encoding": "inplace",
          "label": "uint256[32]",
          "numberOfBytes": "1024"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }
}