{"version":3,"file":"portis-connector.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport invariant from 'tiny-invariant'\r\n\r\nconst chainIdToNetwork: { [network: number]: string } = {\r\n  1: 'mainnet',\r\n  3: 'ropsten',\r\n  4: 'rinkeby',\r\n  5: 'goerli',\r\n  42: 'kovan',\r\n  100: 'xdai',\r\n  30: 'orchid',\r\n  31: 'orchidTestnet',\r\n  99: 'core',\r\n  77: 'sokol',\r\n  61: 'classic',\r\n  8: 'ubiq',\r\n  108: 'thundercore',\r\n  18: 'thundercoreTestnet',\r\n  163: 'lightstreams',\r\n  122: 'fuse',\r\n  15001: 'maticTestnet'\r\n}\r\n\r\ntype Network = number | { chainId: string; [key: string]: any }\r\n\r\ninterface PortisConnectorArguments {\r\n  dAppId: string\r\n  networks: Network[]\r\n  config?: any\r\n}\r\n\r\nexport class PortisConnector extends AbstractConnector {\r\n  private readonly dAppId: string\r\n  private readonly networks: Network[]\r\n  private readonly config: any\r\n\r\n  public portis: any\r\n\r\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\r\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\r\n    invariant(\r\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\r\n      `One or more unsupported networks ${networks}`\r\n    )\r\n    super({ supportedChainIds: chainIds })\r\n\r\n    this.dAppId = dAppId\r\n    this.networks = networks\r\n    this.config = config\r\n\r\n    this.handleOnLogout = this.handleOnLogout.bind(this)\r\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\r\n    this.handleOnError = this.handleOnError.bind(this)\r\n  }\r\n\r\n  private handleOnLogout(): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'onLogout' event\")\r\n    }\r\n    this.emitDeactivate()\r\n  }\r\n\r\n  private handleOnActiveWalletChanged(account: string): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\r\n    }\r\n    this.emitUpdate({ account })\r\n  }\r\n\r\n  private handleOnError(error: Error): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'onError' event\")\r\n    }\r\n    this.emitError(error)\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.portis) {\r\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\r\n      this.portis = new Portis(\r\n        this.dAppId,\r\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\r\n        this.config\r\n      )\r\n    }\r\n\r\n    this.portis.onLogout(this.handleOnLogout)\r\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\r\n    this.portis.onError(this.handleOnError)\r\n\r\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.portis.provider, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.portis.provider\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.portis.provider.send('eth_chainId')\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public deactivate() {\r\n    this.portis.onLogout(() => {})\r\n    this.portis.onActiveWalletChanged(() => {})\r\n    this.portis.onError(() => {})\r\n  }\r\n\r\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\r\n    if (typeof newNetwork === 'number') {\r\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\r\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\r\n      this.emitUpdate({ chainId: newNetwork })\r\n    } else {\r\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\r\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\r\n    }\r\n  }\r\n\r\n  public async close() {\r\n    await this.portis.logout()\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["chainIdToNetwork","PortisConnector","dAppId","networks","config","chainIds","map","n","Number","chainId","every","c","invariant","supportedChainIds","handleOnLogout","bind","handleOnActiveWalletChanged","handleOnError","console","log","emitDeactivate","account","emitUpdate","error","emitError","activate","portis","onLogout","onActiveWalletChanged","onError","provider","enable","then","accounts","m","Portis","getProvider","getChainId","send","getAccount","deactivate","changeNetwork","newNetwork","isGasRelayEnabled","close","logout","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAMA,gBAAgB,GAAkC;AACtD,KAAG,SADmD;AAEtD,KAAG,SAFmD;AAGtD,KAAG,SAHmD;AAItD,KAAG,QAJmD;AAKtD,MAAI,OALkD;AAMtD,OAAK,MANiD;AAOtD,MAAI,QAPkD;AAQtD,MAAI,eARkD;AAStD,MAAI,MATkD;AAUtD,MAAI,OAVkD;AAWtD,MAAI,SAXkD;AAYtD,KAAG,MAZmD;AAatD,OAAK,aAbiD;AActD,MAAI,oBAdkD;AAetD,OAAK,cAfiD;AAgBtD,OAAK,MAhBiD;AAiBtD,SAAO;AAjB+C,CAAxD;IA4BaC,eAAb;AAAA;;AAOE;;;QAAcC,cAAAA;QAAQC,gBAAAA;2BAAUC;QAAAA,kCAAS;AACvC,QAAMC,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAa,UAACC,CAAD;AAAA,aAAgB,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAxB,GAA4BC,MAAM,CAACD,CAAC,CAACE,OAAH,CAAlD;AAAA,KAAb,CAAjB;AACA,KACEJ,QAAQ,CAACK,KAAT,CAAe,UAACC,CAAD;AAAA,aAAgB,CAAC,CAACX,gBAAgB,CAACW,CAAD,CAAlC;AAAA,KAAf,CADF,2CAAAC,SAAS,8CAE6BT,QAF7B,CAAT,GAAAS,SAAS,OAAT;AAIA,0CAAM;AAAEC,MAAAA,iBAAiB,EAAER;AAArB,KAAN;AAEA,UAAKH,MAAL,GAAcA,MAAd;AACA,UAAKC,QAAL,GAAgBA,QAAhB;AACA,UAAKC,MAAL,GAAcA,MAAd;AAEA,UAAKU,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,+BAAtB;AACA,UAAKC,2BAAL,GAAmC,MAAKA,2BAAL,CAAiCD,IAAjC,+BAAnC;AACA,UAAKE,aAAL,GAAqB,MAAKA,aAAL,CAAmBF,IAAnB,+BAArB;;AACD;;AAtBH;;AAAA,SAwBUD,cAxBV,GAwBU;AACN,+CAAa;AACXI,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD;;AACD,SAAKC,cAAL;AACD,GA7BH;;AAAA,SA+BUJ,2BA/BV,GA+BU,qCAA4BK,OAA5B;AACN,+CAAa;AACXH,MAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ,EAAmEE,OAAnE;AACD;;AACD,SAAKC,UAAL,CAAgB;AAAED,MAAAA,OAAO,EAAPA;AAAF,KAAhB;AACD,GApCH;;AAAA,SAsCUJ,aAtCV,GAsCU,uBAAcM,KAAd;AACN,+CAAa;AACXL,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD;;AACD,SAAKK,SAAL,CAAeD,KAAf;AACD,GA3CH;;AAAA,SA6CeE,QA7Cf;AAAA;mBA8CS;;;AASL,eAAKC,MAAL,CAAYC,QAAZ,CAAqB,OAAKb,cAA1B;;AACA,eAAKY,MAAL,CAAYE,qBAAZ,CAAkC,OAAKZ,2BAAvC;;AACA,eAAKU,MAAL,CAAYG,OAAZ,CAAoB,OAAKZ,aAAzB;;+BAEsB,OAAKS,MAAL,CAAYI,QAAZ,CAAqBC,MAArB,GAA8BC,IAA9B,CAAmC,UAACC,QAAD;AAAA,iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,SAAnC,kBAAhBZ;AAEN,iBAAO;AAAES,YAAAA,QAAQ,EAAE,OAAKJ,MAAL,CAAYI,QAAxB;AAAkCT,YAAAA,OAAO,EAAPA;AAAlC,WAAP;;;;;YAfI,CAAC,OAAKK;iCACa,OAAO,cAAP,EAAuBM,IAAvB,CAA4B,UAAAE,CAAC;AAAA;;AAAA,iCAAIA,CAAJ,oBAAIA,CAAC,WAAL,yBAAkBA,CAAlB;AAAA,WAA7B,kBAAfC;AACN,mBAAKT,MAAL,GAAc,IAAIS,MAAJ,CACZ,OAAKjC,MADO,EAEZ,OAAO,OAAKC,QAAL,CAAc,CAAd,CAAP,KAA4B,QAA5B,GAAuCH,gBAAgB,CAAC,OAAKG,QAAL,CAAc,CAAd,CAAD,CAAvD,GAA6E,OAAKA,QAAL,CAAc,CAAd,CAFjE,EAGZ,OAAKC,MAHO,CAAd;;;;;;AAcH,KA9DH;AAAA;AAAA;AAAA;;AAAA,SAgEegC,WAhEf;AAAA;mBAiEW;;AAAP,6BAAO,OAAKV,MAAL,CAAYI,QAAnB;AACD,KAlEH;AAAA;AAAA;AAAA;;AAAA,SAoEeO,UApEf;AAAA;mBAqEW;;AAAP,6BAAO,OAAKX,MAAL,CAAYI,QAAZ,CAAqBQ,IAArB,CAA0B,aAA1B,CAAP;AACD,KAtEH;AAAA;AAAA;AAAA;;AAAA,SAwEeC,UAxEf;AAAA;mBAyEW;;AAAP,6BAAO,OAAKb,MAAL,CAAYI,QAAZ,CAAqBQ,IAArB,CAA0B,cAA1B,EAA0CN,IAA1C,CAA+C,UAACC,QAAD;AAAA,eAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,OAA/C,CAAP;AACD,KA1EH;AAAA;AAAA;AAAA;;AAAA,SA4ESO,UA5ET,GA4ES;AACL,SAAKd,MAAL,CAAYC,QAAZ,CAAqB,cAArB;AACA,SAAKD,MAAL,CAAYE,qBAAZ,CAAkC,cAAlC;AACA,SAAKF,MAAL,CAAYG,OAAZ,CAAoB,cAApB;AACD,GAhFH;;AAAA,SAkFeY,aAlFf,0BAkF6BC,UAlF7B,EAkF2DC,iBAlF3D;AAAA;oBAqFM;;AAFF,UAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,SAAU,CAAC,CAAC1C,gBAAgB,CAAC0C,UAAD,CAA5B,2CAAA9B,SAAS,6BAAoD8B,UAApD,CAAT,GAAA9B,SAAS,OAAT;;AACA,gBAAKc,MAAL,CAAYe,aAAZ,CAA0BzC,gBAAgB,CAAC0C,UAAD,CAA1C,EAAwDC,iBAAxD;;AACA,gBAAKrB,UAAL,CAAgB;AAAEb,UAAAA,OAAO,EAAEiC;AAAX,SAAhB;AACD,OAJD,MAIO;AACL,gBAAKhB,MAAL,CAAYe,aAAZ,CAA0BC,UAA1B,EAAsCC,iBAAtC;;AACA,gBAAKrB,UAAL,CAAgB;AAAEb,UAAAA,OAAO,EAAED,MAAM,CAACkC,UAAU,CAACjC,OAAZ;AAAjB,SAAhB;AACD;;;AACF,KA3FH;AAAA;AAAA;AAAA;;AAAA,SA6FemC,KA7Ff;AAAA;oBA8FU;;6BAAA,QAAKlB,MAAL,CAAYmB,MAAZ;AACN,gBAAKzB,cAAL;;AACD,KAhGH;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAqC0B,iBAArC;;;;"}