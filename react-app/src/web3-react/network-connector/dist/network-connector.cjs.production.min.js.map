{"version":3,"file":"network-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport invariant from 'tiny-invariant'\r\n\r\n// taken from ethers.js, compatible interface with web3 provider\r\ntype AsyncSendable = {\r\n  isMetaMask?: boolean\r\n  host?: string\r\n  path?: string\r\n  sendAsync?: (request: any, callback: (error: any, response: any) => void) => void\r\n  send?: (request: any, callback: (error: any, response: any) => void) => void\r\n}\r\n\r\nexport class RequestError extends Error {\r\n  constructor(message: string, public code: number, public data?: unknown) {\r\n    super()\r\n    this.name = this.constructor.name\r\n    this.message = message\r\n  }\r\n}\r\n\r\nclass MiniRpcProvider implements AsyncSendable {\r\n  public readonly isMetaMask: false = false\r\n  public readonly chainId: number\r\n  public readonly url: string\r\n  public readonly host: string\r\n  public readonly path: string\r\n\r\n  constructor(chainId: number, url: string) {\r\n    this.chainId = chainId\r\n    this.url = url\r\n    const parsed = new URL(url)\r\n    this.host = parsed.host\r\n    this.path = parsed.pathname\r\n  }\r\n\r\n  public readonly sendAsync = (\r\n    request: { jsonrpc: '2.0'; id: number | string | null; method: string; params?: unknown[] | object },\r\n    callback: (error: any, response: any) => void\r\n  ): void => {\r\n    console.log('sendAsync', request.method, request.params)\r\n    this.request(request.method, request.params)\r\n      .then(result => callback(null, { jsonrpc: '2.0', id: request.id, result }))\r\n      .catch(error => callback(error, null))\r\n  }\r\n\r\n  public readonly request = async (\r\n    method: string | { method: string; params?: unknown[] | object },\r\n    params?: unknown[] | object\r\n  ): Promise<unknown> => {\r\n    if (typeof method !== 'string') {\r\n      params = (method as any).params\r\n      method = method.method\r\n    }\r\n\r\n    const response = await fetch(this.url, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        jsonrpc: '2.0',\r\n        id: 1,\r\n        method,\r\n        params\r\n      })\r\n    })\r\n    if (!response.ok) throw new RequestError(`${response.status}: ${response.statusText}`, -32000)\r\n    const body = await response.json()\r\n    if ('error' in body) {\r\n      throw new RequestError(body?.error?.message, body?.error?.code, body?.error?.data)\r\n    } else if ('result' in body) {\r\n      return body.result\r\n    } else {\r\n      throw new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, body)\r\n    }\r\n  }\r\n}\r\n\r\ninterface NetworkConnectorArguments {\r\n  urls: { [chainId: number]: string }\r\n  defaultChainId?: number\r\n}\r\n\r\nexport class NetworkConnector extends AbstractConnector {\r\n  private readonly providers: { [chainId: number]: MiniRpcProvider }\r\n  private currentChainId: number\r\n\r\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\r\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url')\r\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) })\r\n\r\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0])\r\n    this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>((accumulator, chainId) => {\r\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)])\r\n      return accumulator\r\n    }, {})\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null }\r\n  }\r\n\r\n  public async getProvider(): Promise<MiniRpcProvider> {\r\n    return this.providers[this.currentChainId]\r\n  }\r\n\r\n  public async getChainId(): Promise<number> {\r\n    return this.currentChainId\r\n  }\r\n\r\n  public async getAccount(): Promise<null> {\r\n    return null\r\n  }\r\n\r\n  public deactivate() {\r\n    return\r\n  }\r\n\r\n  public changeChainId(chainId: number) {\r\n    invariant(Object.keys(this.providers).includes(chainId.toString()), `No url found for chainId ${chainId}`)\r\n    this.currentChainId = chainId\r\n    this.emitUpdate({ provider: this.providers[this.currentChainId], chainId })\r\n  }\r\n}\r\n"],"names":["RequestError","message","code","data","name","_this","constructor","Error","MiniRpcProvider","chainId","url","this","request","callback","console","log","method","params","_this2","then","result","jsonrpc","id","error","fetch","_this3","body","JSON","stringify","response","ok","status","statusText","json","_body$error","_body$error2","_body$error3","parsed","URL","host","path","pathname","urls","defaultChainId","Object","keys","length","invariant","supportedChainIds","map","k","Number","currentChainId","providers","reduce","accumulator","activate","provider","account","getProvider","getChainId","getAccount","deactivate","changeChainId","includes","toString","emitUpdate","AbstractConnector"],"mappings":"u2CAaaA,yBACCC,EAAwBC,EAAqBC,2CAArBD,SAAqBC,IAElDC,KAAOC,EAAKC,YAAYF,OACxBH,QAAUA,uBAJeM,QAQ5BC,EAOJ,SAAYC,EAAiBC,SA2BEC,6BAjCK,iBAcR,SAC1BC,EACAC,GAEAC,QAAQC,IAAI,YAAaH,EAAQI,OAAQJ,EAAQK,QACjDC,EAAKN,QAAQA,EAAQI,OAAQJ,EAAQK,QAClCE,MAAK,SAAAC,UAAUP,EAAS,KAAM,CAAEQ,QAAS,MAAOC,GAAIV,EAAQU,GAAIF,OAAAA,cAC1D,SAAAG,UAASV,EAASU,EAAO,gCAIlCP,EACAC,aAEsB,iBAAXD,IACTC,EAAUD,EAAeC,OACzBD,EAASA,EAAOA,wBAGKQ,MAAMC,EAAKf,IAAK,CACrCM,OAAQ,OACRU,KAAMC,KAAKC,UAAU,CACnBP,QAAS,MACTC,GAAI,EACJN,OAAAA,EACAC,OAAAA,sBANEY,OASDA,EAASC,GAAI,MAAM,IAAI9B,EAAgB6B,EAASE,YAAWF,EAASG,YAAe,6BACrEH,EAASI,uBAAtBP,gBACF,UAAWA,QACP,IAAI1B,QAAa0B,YAAAA,EAAMH,cAANW,EAAajC,cAASyB,YAAAA,EAAMH,cAANY,EAAajC,WAAMwB,YAAAA,EAAMH,cAANa,EAAajC,MACxE,GAAI,WAAYuB,SACdA,EAAKN,aAEN,IAAIpB,8CAAyDgB,eAAoB,KAAOU,kDA1C3FjB,QAAUA,OACVC,IAAMA,MACL2B,EAAS,IAAIC,IAAI5B,QAClB6B,KAAOF,EAAOE,UACdC,KAAOH,EAAOI,mEAoDPC,IAAAA,KAAMC,IAAAA,sBACRA,GAA+C,IAA7BC,OAAOC,KAAKH,GAAMI,QAA9CC,qBACM,CAAEC,kBAAmBJ,OAAOC,KAAKH,GAAMO,KAAI,SAACC,UAAcC,OAAOD,eAElEE,eAAiBT,GAAkBQ,OAAOP,OAAOC,KAAKH,GAAM,MAC5DW,UAAYT,OAAOC,KAAKH,GAAMY,QAA+C,SAACC,EAAa9C,UAC9F8C,EAAYJ,OAAO1C,IAAY,IAAID,EAAgB2C,OAAO1C,GAAUiC,EAAKS,OAAO1C,KACzE8C,IACN,wCAGQC,+CACJ,CAAEC,SAAU9C,KAAK0C,UAAL1C,KAAoByC,gBAAiB3C,QAArCE,KAAmDyC,eAAgBM,QAAS,6CAGpFC,kDACJhD,KAAK0C,UAAL1C,KAAoByC,uDAGhBQ,iDACJjD,KAAKyC,sDAGDS,6CACJ,SAGFC,WAAA,eAIAC,cAAA,SAActD,GACTmC,OAAOC,KAAKlC,KAAK0C,WAAWW,SAASvD,EAAQwD,aAAvDlB,WACKK,eAAiB3C,OACjByD,WAAW,CAAET,SAAU9C,KAAK0C,UAAU1C,KAAKyC,gBAAiB3C,QAAAA,QAtC/B0D"}