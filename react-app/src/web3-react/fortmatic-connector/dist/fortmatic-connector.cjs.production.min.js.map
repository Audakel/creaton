{"version":3,"file":"fortmatic-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport invariant from 'tiny-invariant'\r\n\r\nconst chainIdToNetwork: { [network: number]: string } = {\r\n  1: 'mainnet',\r\n  3: 'ropsten',\r\n  4: 'rinkeby',\r\n  42: 'kovan'\r\n}\r\n\r\ninterface FortmaticConnectorArguments {\r\n  apiKey: string\r\n  chainId: number\r\n}\r\n\r\nexport class FortmaticConnector extends AbstractConnector {\r\n  private readonly apiKey: string\r\n  private readonly chainId: number\r\n\r\n  public fortmatic: any\r\n\r\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\r\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\r\n    super({ supportedChainIds: [chainId] })\r\n\r\n    this.apiKey = apiKey\r\n    this.chainId = chainId\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.fortmatic) {\r\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\r\n      this.fortmatic = new Fortmatic(\r\n        this.apiKey,\r\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\r\n      )\r\n    }\r\n\r\n    const account = await this.fortmatic\r\n      .getProvider()\r\n      .enable()\r\n      .then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.fortmatic.getProvider()\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.chainId\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.fortmatic\r\n      .getProvider()\r\n      .send('eth_accounts')\r\n      .then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public deactivate() {}\r\n\r\n  public async close() {\r\n    await this.fortmatic.user.logout()\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["chainIdToNetwork","apiKey","chainId","Object","keys","includes","toString","invariant","supportedChainIds","activate","this","_this3","fortmatic","getProvider","enable","then","accounts","account","provider","m","Fortmatic","undefined","getChainId","getAccount","send","deactivate","close","_this11","user","logout","emitDeactivate","AbstractConnector"],"mappings":"0OAIA,IAAMA,EAAkD,GACnD,YACA,YACA,aACC,4EAcUC,IAAAA,OAAQC,IAAAA,eACVC,OAAOC,KAAKJ,GAAkBK,SAASH,EAAQI,aAAzDC,qBACM,CAAEC,kBAAmB,CAACN,YAEvBD,OAASA,IACTC,QAAUA,+GAGJO,8BACNC,yCAQiBC,EAAKC,UACxBC,cACAC,SACAC,MAAK,SAACC,UAA+BA,EAAS,sBAH3CC,SAKC,CAAEC,SAAUP,EAAKC,UAAUC,cAAeX,QAASS,EAAKT,QAASe,QAAAA,wBAbnEN,EAAKC,iCACgB,8QAAO,kBAAaG,MAAK,SAAAI,+BAAKA,SAAAA,aAAcA,qBAA9DC,KACDR,UAAY,IAAIQ,EACnBT,EAAKV,OACY,IAAjBU,EAAKT,SAAkC,IAAjBS,EAAKT,aAAgBmB,EAAYrB,EAAiBW,EAAKT,sGAYtEW,kDACJH,KAAKE,UAAUC,qDAGXS,iDACJZ,KAAKR,+CAGDqB,iDACJb,KAAKE,UACTC,cACAW,KAAK,gBACLT,MAAK,SAACC,UAA+BA,EAAS,6CAG5CS,WAAA,eAEMC,2BACLhB,4BAAAiB,EAAKf,UAAUgB,KAAKC,6BACrBC,2DAlD+BC"}